{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/blog.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// // import React, { useState, useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import Update from \"./update\";\n// // import Create from \"./create\";\n// // import Logout from \"./logout\";\n// // import ImageUploader from \"./storeImagetemporarily\";\n// // import Login from \"./login\";\n// // import { useNavigate } from 'react-router-dom';\n\n// // function Blog() {\n// //     const [loading, setLoading] = useState(true);\n// //     const [newBlogTitle, setNewBlogTitle] = useState(\"\");\n// //     const [newBlogContent, setNewBlogContent] = useState(\"\");\n// //     const [newBlogAuthorName, setNewBlogAuthorName] = useState(\"\");\n\n// //     const [blogs, setBlogs] = useState([]);\n// //     const [selectedBlogId, setSelectedBlogId] = useState(\"\");\n// //     const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n// //     const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n// //     const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n// //     const [newBlogImage, setNewBlogImage] = useState(null);\n// //     const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n// //     const [imageUrl, setImageUrl] = useState(null);\n\n// //     const [created_at, setCreatedAt] = useState(\"\");\n// //     const accessToken = localStorage.getItem(\"accessToken\");\n// //     const tokenParts = accessToken.split(\".\");\n\n// //     // Decode the access token payload\n// //     const payload = JSON.parse(atob(tokenParts[1]));\n\n// //     // Get the expiration time from the payload\n// //     const expirationTime = payload.exp;\n\n// //     // Calculate the remaining time in seconds until the token expires\n// //     const currentTime = Math.floor(Date.now() / 1000);\n// //     const remainingTime = expirationTime - currentTime;\n\n// //     console.log(`The access token will expire in ${remainingTime} seconds.`);\n// //     useEffect(() => {\n// //         const fetchBlogs = async () => {\n// //             try {\n// //                 const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //                     headers: {\n// //                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //                     },\n// //                 });\n\n// //                 if (response.status === 401) {\n// //                     console.log(\"token expired and expired time is\", remainingTime);\n\n// //                     // Access token has expired, use refresh token to get a new access token\n// //                     const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n// //                         method: \"POST\",\n// //                         headers: {\n// //                             \"Content-Type\": \"application/json\",\n// //                         },\n// //                         body: JSON.stringify({\n// //                             refresh: localStorage.getItem(\"refreshToken\"),\n// //                         }),\n// //                     });\n\n// //                     if (refreshResponse.ok) {\n// //                         const tokens = await refreshResponse.json();\n// //                         localStorage.setItem(\"accessToken\", tokens.access);\n// //                         // Try fetching blogs again with the new access token\n// //                         const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //                             headers: {\n// //                                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //                             },\n// //                         });\n// //                         const data = await newResponse.json();\n// //                         setBlogs(data);\n// //                         setLoading(false);\n// //                     } else {\n// //                         throw new Error(\"Refresh token is invalid\");\n// //                     }\n// //                 } else {\n// //                     const data = await response.json();\n// //                     setBlogs(data);\n// //                     setLoading(false);\n// //                 }\n// //             } catch (error) {\n// //                 console.error(error);\n// //             }\n// //         };\n\n// //         fetchBlogs();\n// //     }, []);\n\n// //     const handleCreate = () => {\n// //         const newBlog = {\n// //             title: newBlogTitle,\n// //             content: newBlogContent,\n// //             authorName: newBlogAuthorName,\n// //             image: newBlogImage, // Add the image file to the new blog object\n// //         };\n\n// //         const formData = new FormData();\n// //         formData.append(\"title\", newBlog.title);\n// //         formData.append(\"content\", newBlog.content);\n// //         formData.append(\"authorName\", newBlog.authorName);\n// //         if(newBlogImage != null){\n// //             formData.append('image', newBlogImage);\n// //         }\n\n// //         fetch(\"http://localhost:8000/api/blog/create/\", {\n// //             method: \"POST\",\n// //             headers: {\n// //                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //             },\n// //             body: formData, // Use the form data instead of JSON.stringify\n// //         })\n// //             .then((response) => response.json())\n// //             .then((data) => {\n// //                 setBlogs([...blogs, data]);\n// //                 setNewBlogTitle(\"\");\n// //                 setNewBlogContent(\"\");\n// //                 setNewBlogAuthorName(\"\");\n// //                 setNewBlogImage(null); // Reset the image state after submitting the form\n// //             });\n// //     };\n\n// //     const handleDelete = (id) => {\n// //         if (window.confirm(\"Are you sure you want to delete this post?\")) {\n// //             fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n// //                 method: \"DELETE\",\n// //                 headers: {\n// //                     \"Content-Type\": \"application/json\",\n// //                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //                 },\n// //             })\n// //                 .then((response) => {\n// //                     if (response.ok) {\n// //                         setBlogs(blogs.filter((blog) => blog.id !== id));\n// //                     } else {\n// //                         throw new Error(\"Delete failed\");\n// //                     }\n// //                 })\n// //                 .catch((error) => {\n// //                     console.error(error);\n// //                 });\n// //         }\n// //     };\n\n// //     const handleUpdate = () => {\n// //         const updatedBlog = {\n// //             id: selectedBlogId,\n// //             title: updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle,\n// //             content: updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent,\n// //             authorName: updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName,\n// //         };\n\n// //         const formData = new FormData();\n// //         formData.append(\"title\", updatedBlog.title);\n// //         formData.append(\"content\", updatedBlog.content);\n// //         formData.append(\"authorName\", updatedBlog.authorName);\n// //         if(updatedBlogImage != null){\n// //             formData.append('image', updatedBlogImage);\n// //         }\n\n// //         fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n// //             method: \"PUT\",\n// //             headers: {\n// //                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //             },\n// //             body: formData,\n// //         })\n// //             .then((response) => response.json())\n// //             .then((data) => {\n// //                 const index = blogs.findIndex((blog) => blog.id === data.id);\n// //                 const newBlogs = [...blogs];\n// //                 newBlogs[index] = data;\n// //                 setBlogs(newBlogs);\n// //                 setSelectedBlogId(\"\");\n// //                 setUpdatedBlogTitle(undefined);\n// //                 setUpdatedBlogContent(undefined);\n// //                 setUpdatedBlogAuthorName(undefined);\n// //                 setUpdatedBlogImage(null);\n// //             })\n// //             .catch((error) => console.error(error));\n// //     };\n\n// //   const navigate = useNavigate();\n\n// //   const  handleLogout = () => {\n// //     if (window.confirm(\"Are you sure you want to logout?\")) {\n// //     // Remove access token and refresh token from local storage\n// //     localStorage.removeItem('accessToken');\n// //     localStorage.removeItem('refreshToken');\n\n// //     // Navigate to the login page\n\n// //     navigate('/login');\n// //   } }\n\n// //     if (loading) {\n// //         return <span class=\"loader\"></span>\n// //     }\n\n// //     return (\n\n// //         <div>\n\n// //         <div style={{ display: \"flex\", justifyContent: \"space-around\" , flexWrap: \"wrap-reverse\" , width: \"100%\", padding: \"0 55px\", margin: \"0 35px\"}}>\n\n// //         <div style={{ margin: \"0px\", width: \"50%\"}}>\n\n// //             <div>\n\n// //                 <h1>Blog List</h1>\n\n// //                 {blogs\n// //                     .sort((a, b) => b.id - a.id)\n// //                     .map((blog) => (\n// //                         <div key={blog.id}>\n// //                             <h2>{blog.title}</h2>\n// //                             <img src={`http://localhost:8000${blog.image}`} style={{ width: \"450px\", maxWidth: \"100%\" }} />\n\n// //                             <p>{blog.content}</p>\n// //                             <p>Author: {blog.authorName}</p>\n// //                             <p>Published Date: {blog.created_at}</p>\n// //                             <p>Updated Date: {blog.updated_at}</p>\n// //                             {created_at && <p>Blog Created at Standard: {created_at}</p>}\n// //                             <button className=\"update\" onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n// //                             <button className=\"delete\" onClick={() => handleDelete(blog.id)}>Delete</button>\n// //                         </div>\n// //                     ))}\n// //             </div>\n// //         </div>\n\n// //         <div style={{margin: \"0px\" ,width: \"50%\"}}> \n\n// //         <button onClick={handleLogout}>Logout</button>\n// //         <div style={{ position: \"fixed\"}}>\n// //         <h2>Create New Blog</h2>\n// //                     <label>\n// //                         Title: </label><br></br>\n// //                         <input type=\"text\" value={newBlogTitle} onChange={(event) => setNewBlogTitle(event.target.value)} />\n\n// //                     <br />\n// //                     <label>\n// //                         Content: </label> <br></br>\n// //                         <textarea value={newBlogContent} onChange={(event) => setNewBlogContent(event.target.value)} />\n\n// //                     <br />\n// //                     <label>\n// //                         Author Name:    </label>  <br></br>\n// //                         <input type=\"text\" value={newBlogAuthorName} onChange={(event) => setNewBlogAuthorName(event.target.value)} />\n\n// //                     <div>\n// //                         <label htmlFor=\"newBlogImage\">Image:</label> \n// //                         <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"newBlogImage\" name=\"newBlogImage\" onChange={(event) => setNewBlogImage(event.target.files[0])} />\n// //                     </div>\n// //                     <button  className=\"create\" onClick={handleCreate}>Create Blog</button>\n\n// //                                     {/* <UpdateBlog/> */}\n// //                 {selectedBlogId !== \"\" && (\n// //                     <div style={{ width: \"auto\"}}>\n// //                         <h2>Update Blog \"{blogs.find((blog) => blog.id === selectedBlogId).title}\"</h2>\n\n// //                         <div>\n// //                             <label htmlFor=\"blog-title\">Title:</label> <br></br>\n// //                             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={(e) => setUpdatedBlogTitle(e.target.value)} />\n// //                         </div>\n\n// //                         <div>\n// //                             <label htmlFor=\"blog-content\">Content:</label> <br></br>\n// //                             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent} onChange={(e) => setUpdatedBlogContent(e.target.value)} />\n// //                         </div>\n\n// //                         <div>\n// //                             <label htmlFor=\"blog-author-name\">Author Name:</label> <br></br>\n// //                             <input\n// //                                 type=\"text\"\n// //                                 id=\"blog-author-name\"\n// //                                 value={updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName}\n// //                                 onChange={(e) => setUpdatedBlogAuthorName(e.target.value)}\n// //                             />\n// //                         </div>\n\n// //                         <div>\n// //                             <label htmlFor=\"updatedBlogImage\">Image:</label>\n// //                             <img src={`http://localhost:8000${blogs.find((blog) => blog.id === selectedBlogId).image}`} style={{ width: \"50px\", maxWidth: \"100%\" }} />\n// //                             <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={(event) => setUpdatedBlogImage(event.target.files[0])} />\n// //                         </div>\n\n// //                         <button className=\"update\"  onClick={handleUpdate}>Update Blog</button>\n// //                         <button className=\"cancel\" onClick={() => setSelectedBlogId(\"\")}>Cancel</button>\n// //                     </div>\n// //                 )}\n\n// //         </div>\n\n// //         </div>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n// // export default Blog;\n\n// import { Button } from 'react-bootstrap';\n// import * as React from 'react';\n// import Typography from '@mui/material/Typography';\n// import Breadcrumbs from '@mui/material/Breadcrumbs';\n// import Link from '@mui/material/Link';\n// import HomeIcon from '@mui/icons-material/Home';\n// import WhatshotIcon from '@mui/icons-material/Whatshot';\n// import GrainIcon from '@mui/icons-material/Grain';\n\n// function Blog(){\n//     return(\n//         <div>\n\n//             <div>\n\n// <nav class=\"navbar navbar-light\">\n// <div class=\"col\" role=\"presentation\">\n//       <Breadcrumbs aria-label=\"breadcrumb\">\n//         <Link\n//           underline=\"hover\"\n//           sx={{ display: 'flex', alignItems: 'center' }}\n//           color=\"inherit\"\n//           href=\"/\"\n//         >\n//           <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n//           MUI\n//         </Link>\n//         <Link\n//           underline=\"hover\"\n//           sx={{ display: 'flex', alignItems: 'center' }}\n//           color=\"inherit\"\n//           href=\"/material-ui/getting-started/installation/\"\n//         >\n//           <WhatshotIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n//           Core\n//         </Link>\n//         <Typography\n//           sx={{ display: 'flex', alignItems: 'center' }}\n//           color=\"text.primary\"\n//         >\n//           <GrainIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n//           Breadcrumb\n//         </Typography>\n//       </Breadcrumbs>\n//     </div>\n// </nav>\n\n//             </div>\n\n//             <div class=\"container\">\n\n//                 <div class=\"row\">\n\n//                 </div>\n//   <div class=\"row\">\n//     <div class=\"col-sm\">\n//       One of three columns\n//     </div>\n//     <div class=\"col-sm\">\n//       One of three columns\n//     </div>\n//     <div class=\"col-sm\">\n//           <div>\n//             <input placeholder='Search Blogs Here.....'></input>\n//             <button>Search</button>\n//             </div>\n//           <div>Search List</div>\n//     </div>\n//   </div>\n// </div>\n//         </div>\n//     )\n// }\n\n// export default Blog;\n\nfunction Blog() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 9\n  }, this);\n}\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["Blog","_jsxDEV","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/blog.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import Update from \"./update\";\n// // import Create from \"./create\";\n// // import Logout from \"./logout\";\n// // import ImageUploader from \"./storeImagetemporarily\";\n// // import Login from \"./login\";\n// // import { useNavigate } from 'react-router-dom';\n\n// // function Blog() {\n// //     const [loading, setLoading] = useState(true);\n// //     const [newBlogTitle, setNewBlogTitle] = useState(\"\");\n// //     const [newBlogContent, setNewBlogContent] = useState(\"\");\n// //     const [newBlogAuthorName, setNewBlogAuthorName] = useState(\"\");\n\n// //     const [blogs, setBlogs] = useState([]);\n// //     const [selectedBlogId, setSelectedBlogId] = useState(\"\");\n// //     const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n// //     const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n// //     const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n// //     const [newBlogImage, setNewBlogImage] = useState(null);\n// //     const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n// //     const [imageUrl, setImageUrl] = useState(null);\n\n// //     const [created_at, setCreatedAt] = useState(\"\");\n// //     const accessToken = localStorage.getItem(\"accessToken\");\n// //     const tokenParts = accessToken.split(\".\");\n\n// //     // Decode the access token payload\n// //     const payload = JSON.parse(atob(tokenParts[1]));\n\n// //     // Get the expiration time from the payload\n// //     const expirationTime = payload.exp;\n\n// //     // Calculate the remaining time in seconds until the token expires\n// //     const currentTime = Math.floor(Date.now() / 1000);\n// //     const remainingTime = expirationTime - currentTime;\n\n// //     console.log(`The access token will expire in ${remainingTime} seconds.`);\n// //     useEffect(() => {\n// //         const fetchBlogs = async () => {\n// //             try {\n// //                 const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //                     headers: {\n// //                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //                     },\n// //                 });\n\n// //                 if (response.status === 401) {\n// //                     console.log(\"token expired and expired time is\", remainingTime);\n\n// //                     // Access token has expired, use refresh token to get a new access token\n// //                     const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n// //                         method: \"POST\",\n// //                         headers: {\n// //                             \"Content-Type\": \"application/json\",\n// //                         },\n// //                         body: JSON.stringify({\n// //                             refresh: localStorage.getItem(\"refreshToken\"),\n// //                         }),\n// //                     });\n\n// //                     if (refreshResponse.ok) {\n// //                         const tokens = await refreshResponse.json();\n// //                         localStorage.setItem(\"accessToken\", tokens.access);\n// //                         // Try fetching blogs again with the new access token\n// //                         const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //                             headers: {\n// //                                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //                             },\n// //                         });\n// //                         const data = await newResponse.json();\n// //                         setBlogs(data);\n// //                         setLoading(false);\n// //                     } else {\n// //                         throw new Error(\"Refresh token is invalid\");\n// //                     }\n// //                 } else {\n// //                     const data = await response.json();\n// //                     setBlogs(data);\n// //                     setLoading(false);\n// //                 }\n// //             } catch (error) {\n// //                 console.error(error);\n// //             }\n// //         };\n\n// //         fetchBlogs();\n// //     }, []);\n\n// //     const handleCreate = () => {\n// //         const newBlog = {\n// //             title: newBlogTitle,\n// //             content: newBlogContent,\n// //             authorName: newBlogAuthorName,\n// //             image: newBlogImage, // Add the image file to the new blog object\n// //         };\n\n// //         const formData = new FormData();\n// //         formData.append(\"title\", newBlog.title);\n// //         formData.append(\"content\", newBlog.content);\n// //         formData.append(\"authorName\", newBlog.authorName);\n// //         if(newBlogImage != null){\n// //             formData.append('image', newBlogImage);\n// //         }\n\n// //         fetch(\"http://localhost:8000/api/blog/create/\", {\n// //             method: \"POST\",\n// //             headers: {\n// //                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //             },\n// //             body: formData, // Use the form data instead of JSON.stringify\n// //         })\n// //             .then((response) => response.json())\n// //             .then((data) => {\n// //                 setBlogs([...blogs, data]);\n// //                 setNewBlogTitle(\"\");\n// //                 setNewBlogContent(\"\");\n// //                 setNewBlogAuthorName(\"\");\n// //                 setNewBlogImage(null); // Reset the image state after submitting the form\n// //             });\n// //     };\n\n// //     const handleDelete = (id) => {\n// //         if (window.confirm(\"Are you sure you want to delete this post?\")) {\n// //             fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n// //                 method: \"DELETE\",\n// //                 headers: {\n// //                     \"Content-Type\": \"application/json\",\n// //                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //                 },\n// //             })\n// //                 .then((response) => {\n// //                     if (response.ok) {\n// //                         setBlogs(blogs.filter((blog) => blog.id !== id));\n// //                     } else {\n// //                         throw new Error(\"Delete failed\");\n// //                     }\n// //                 })\n// //                 .catch((error) => {\n// //                     console.error(error);\n// //                 });\n// //         }\n// //     };\n\n// //     const handleUpdate = () => {\n// //         const updatedBlog = {\n// //             id: selectedBlogId,\n// //             title: updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle,\n// //             content: updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent,\n// //             authorName: updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName,\n// //         };\n\n// //         const formData = new FormData();\n// //         formData.append(\"title\", updatedBlog.title);\n// //         formData.append(\"content\", updatedBlog.content);\n// //         formData.append(\"authorName\", updatedBlog.authorName);\n// //         if(updatedBlogImage != null){\n// //             formData.append('image', updatedBlogImage);\n// //         }\n\n// //         fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n// //             method: \"PUT\",\n// //             headers: {\n// //                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //             },\n// //             body: formData,\n// //         })\n// //             .then((response) => response.json())\n// //             .then((data) => {\n// //                 const index = blogs.findIndex((blog) => blog.id === data.id);\n// //                 const newBlogs = [...blogs];\n// //                 newBlogs[index] = data;\n// //                 setBlogs(newBlogs);\n// //                 setSelectedBlogId(\"\");\n// //                 setUpdatedBlogTitle(undefined);\n// //                 setUpdatedBlogContent(undefined);\n// //                 setUpdatedBlogAuthorName(undefined);\n// //                 setUpdatedBlogImage(null);\n// //             })\n// //             .catch((error) => console.error(error));\n// //     };\n    \n// //   const navigate = useNavigate();\n\n// //   const  handleLogout = () => {\n// //     if (window.confirm(\"Are you sure you want to logout?\")) {\n// //     // Remove access token and refresh token from local storage\n// //     localStorage.removeItem('accessToken');\n// //     localStorage.removeItem('refreshToken');\n\n// //     // Navigate to the login page\n  \n// //     navigate('/login');\n// //   } }\n\n// //     if (loading) {\n// //         return <span class=\"loader\"></span>\n// //     }\n\n// //     return (\n\n// //         <div>\n\n\n// //         <div style={{ display: \"flex\", justifyContent: \"space-around\" , flexWrap: \"wrap-reverse\" , width: \"100%\", padding: \"0 55px\", margin: \"0 35px\"}}>\n\n// //         <div style={{ margin: \"0px\", width: \"50%\"}}>\n          \n            \n// //             <div>\n\n\n\n// //                 <h1>Blog List</h1>\n\n// //                 {blogs\n// //                     .sort((a, b) => b.id - a.id)\n// //                     .map((blog) => (\n// //                         <div key={blog.id}>\n// //                             <h2>{blog.title}</h2>\n// //                             <img src={`http://localhost:8000${blog.image}`} style={{ width: \"450px\", maxWidth: \"100%\" }} />\n\n// //                             <p>{blog.content}</p>\n// //                             <p>Author: {blog.authorName}</p>\n// //                             <p>Published Date: {blog.created_at}</p>\n// //                             <p>Updated Date: {blog.updated_at}</p>\n// //                             {created_at && <p>Blog Created at Standard: {created_at}</p>}\n// //                             <button className=\"update\" onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n// //                             <button className=\"delete\" onClick={() => handleDelete(blog.id)}>Delete</button>\n// //                         </div>\n// //                     ))}\n// //             </div>\n// //         </div>\n\n// //         <div style={{margin: \"0px\" ,width: \"50%\"}}> \n\n// //         <button onClick={handleLogout}>Logout</button>\n// //         <div style={{ position: \"fixed\"}}>\n// //         <h2>Create New Blog</h2>\n// //                     <label>\n// //                         Title: </label><br></br>\n// //                         <input type=\"text\" value={newBlogTitle} onChange={(event) => setNewBlogTitle(event.target.value)} />\n                   \n// //                     <br />\n// //                     <label>\n// //                         Content: </label> <br></br>\n// //                         <textarea value={newBlogContent} onChange={(event) => setNewBlogContent(event.target.value)} />\n                   \n// //                     <br />\n// //                     <label>\n// //                         Author Name:    </label>  <br></br>\n// //                         <input type=\"text\" value={newBlogAuthorName} onChange={(event) => setNewBlogAuthorName(event.target.value)} />\n                 \n\n// //                     <div>\n// //                         <label htmlFor=\"newBlogImage\">Image:</label> \n// //                         <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"newBlogImage\" name=\"newBlogImage\" onChange={(event) => setNewBlogImage(event.target.files[0])} />\n// //                     </div>\n// //                     <button  className=\"create\" onClick={handleCreate}>Create Blog</button>\n\n\n// //                                     {/* <UpdateBlog/> */}\n// //                 {selectedBlogId !== \"\" && (\n// //                     <div style={{ width: \"auto\"}}>\n// //                         <h2>Update Blog \"{blogs.find((blog) => blog.id === selectedBlogId).title}\"</h2>\n\n// //                         <div>\n// //                             <label htmlFor=\"blog-title\">Title:</label> <br></br>\n// //                             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={(e) => setUpdatedBlogTitle(e.target.value)} />\n// //                         </div>\n\n// //                         <div>\n// //                             <label htmlFor=\"blog-content\">Content:</label> <br></br>\n// //                             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent} onChange={(e) => setUpdatedBlogContent(e.target.value)} />\n// //                         </div>\n\n// //                         <div>\n// //                             <label htmlFor=\"blog-author-name\">Author Name:</label> <br></br>\n// //                             <input\n// //                                 type=\"text\"\n// //                                 id=\"blog-author-name\"\n// //                                 value={updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName}\n// //                                 onChange={(e) => setUpdatedBlogAuthorName(e.target.value)}\n// //                             />\n// //                         </div>\n\n// //                         <div>\n// //                             <label htmlFor=\"updatedBlogImage\">Image:</label>\n// //                             <img src={`http://localhost:8000${blogs.find((blog) => blog.id === selectedBlogId).image}`} style={{ width: \"50px\", maxWidth: \"100%\" }} />\n// //                             <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={(event) => setUpdatedBlogImage(event.target.files[0])} />\n// //                         </div>\n                    \n\n// //                         <button className=\"update\"  onClick={handleUpdate}>Update Blog</button>\n// //                         <button className=\"cancel\" onClick={() => setSelectedBlogId(\"\")}>Cancel</button>\n// //                     </div>\n// //                 )}\n\n               \n// //         </div>\n        \n// //         </div>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n// // export default Blog;\n\n\n// import { Button } from 'react-bootstrap';\n// import * as React from 'react';\n// import Typography from '@mui/material/Typography';\n// import Breadcrumbs from '@mui/material/Breadcrumbs';\n// import Link from '@mui/material/Link';\n// import HomeIcon from '@mui/icons-material/Home';\n// import WhatshotIcon from '@mui/icons-material/Whatshot';\n// import GrainIcon from '@mui/icons-material/Grain';\n\n// function Blog(){\n//     return(\n//         <div>\n\n//             <div>\n\n// <nav class=\"navbar navbar-light\">\n// <div class=\"col\" role=\"presentation\">\n//       <Breadcrumbs aria-label=\"breadcrumb\">\n//         <Link\n//           underline=\"hover\"\n//           sx={{ display: 'flex', alignItems: 'center' }}\n//           color=\"inherit\"\n//           href=\"/\"\n//         >\n//           <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n//           MUI\n//         </Link>\n//         <Link\n//           underline=\"hover\"\n//           sx={{ display: 'flex', alignItems: 'center' }}\n//           color=\"inherit\"\n//           href=\"/material-ui/getting-started/installation/\"\n//         >\n//           <WhatshotIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n//           Core\n//         </Link>\n//         <Typography\n//           sx={{ display: 'flex', alignItems: 'center' }}\n//           color=\"text.primary\"\n//         >\n//           <GrainIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n//           Breadcrumb\n//         </Typography>\n//       </Breadcrumbs>\n//     </div>\n// </nav>\n\n//             </div>\n\n\n//             <div class=\"container\">\n\n//                 <div class=\"row\">\n               \n \n//                 </div>\n//   <div class=\"row\">\n//     <div class=\"col-sm\">\n//       One of three columns\n//     </div>\n//     <div class=\"col-sm\">\n//       One of three columns\n//     </div>\n//     <div class=\"col-sm\">\n//           <div>\n//             <input placeholder='Search Blogs Here.....'></input>\n//             <button>Search</button>\n//             </div>\n//           <div>Search List</div>\n//     </div>\n//   </div>\n// </div>\n//         </div>\n//     )\n// }\n\n// export default Blog;\n\n\nfunction Blog(){\n    return(\n        <div>\n\n        </div>\n        )\n}\n    \nexport default Blog;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;;AAGA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,IAAIA,CAAA,EAAE;EACX,oBACIC,OAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEM;AAEd;AAACC,EAAA,GANQN,IAAI;AAQb,eAAeA,IAAI;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}