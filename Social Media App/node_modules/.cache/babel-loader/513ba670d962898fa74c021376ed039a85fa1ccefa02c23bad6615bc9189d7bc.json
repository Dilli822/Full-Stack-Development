{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/blog-comment.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n\n// export default function Comments({ authToken, blogId, commentId }) {\n//   const [commentData, setCommentData] = useState(null);\n//   const [newComment, setNewComment] = useState('');\n\n//   useEffect(() => {\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'GET',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//       },\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   }, [authToken, blogId, commentId]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'PUT',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ comment: newComment }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   };\n\n//   if (!commentData) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <textarea\n//         value={newComment}\n//         onChange={(event) => setNewComment(event.target.value)}\n//       />\n//       <button type=\"submit\">Save</button>\n//     </form>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comments(_ref) {\n  _s();\n  let {\n    blogPk,\n    commentPk,\n    authToken\n  } = _ref;\n  const [comment, setComment] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${authToken}`\n    };\n    fetch('http://localhost:8000/api/blog/1/comments/1/', {\n      headers\n    }).then(response => response.json()).then(data => {\n      setComment(data);\n      setIsLoading(false);\n    }).catch(error => console.error(error));\n  }, [blogPk, commentPk, authToken]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading comment...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: comment.comment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"By \", comment.user.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Comments, \"N98LzcONfH10slU0uw3kupHAABo=\");\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Comments","_ref","_s","blogPk","commentPk","authToken","comment","setComment","isLoading","setIsLoading","headers","Authorization","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","user","username","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/blog-comment.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n\n// export default function Comments({ authToken, blogId, commentId }) {\n//   const [commentData, setCommentData] = useState(null);\n//   const [newComment, setNewComment] = useState('');\n\n//   useEffect(() => {\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'GET',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//       },\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   }, [authToken, blogId, commentId]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'PUT',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ comment: newComment }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   };\n\n//   if (!commentData) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <textarea\n//         value={newComment}\n//         onChange={(event) => setNewComment(event.target.value)}\n//       />\n//       <button type=\"submit\">Save</button>\n//     </form>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from 'react';\n\nexport default function Comments({ blogPk, commentPk, authToken }) {\n  const [comment, setComment] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${authToken}`,\n    };\n\n    fetch('http://localhost:8000/api/blog/1/comments/1/', { headers })\n      .then((response) => response.json())\n      .then((data) => {\n        setComment(data);\n        setIsLoading(false);\n      })\n      .catch((error) => console.error(error));\n  }, [blogPk, commentPk, authToken]);\n\n  if (isLoading) {\n    return <p>Loading comment...</p>;\n  }\n\n  return (\n    <div>\n      <h2>{comment.comment}</h2>\n      <p>By {comment.user.username}</p>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,QAAQA,CAAAC,IAAA,EAAmC;EAAAC,EAAA;EAAA,IAAlC;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EAC/D,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMa,OAAO,GAAG;MACd,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,SAAQN,SAAU;IACpC,CAAC;IAEDO,KAAK,CAAC,8CAA8C,EAAE;MAAEF;IAAQ,CAAC,CAAC,CAC/DG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdT,UAAU,CAACS,IAAI,CAAC;MAChBP,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACf,MAAM,EAAEC,SAAS,EAAEC,SAAS,CAAC,CAAC;EAElC,IAAIG,SAAS,EAAE;IACb,oBAAOT,OAAA;MAAAqB,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAClC;EAEA,oBACEzB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAKd,OAAO,CAACA;IAAO;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAC1BzB,OAAA;MAAAqB,QAAA,GAAG,KAAG,EAACd,OAAO,CAACmB,IAAI,CAACC,QAAQ;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC7B;AAEV;AAACtB,EAAA,CA7BuBF,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}