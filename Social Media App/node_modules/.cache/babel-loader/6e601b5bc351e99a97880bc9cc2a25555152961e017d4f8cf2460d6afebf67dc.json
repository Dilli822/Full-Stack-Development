{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/drf-blog-api-master/django/frontend/src/blog.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react'\n\n// function Blog() {\n//   const [blogs, setBlogs] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [newBlogTitle, setNewBlogTitle] = useState('')\n//   const [newBlogContent, setNewBlogContent] = useState('')\n//   const [newBlogAuthorName, setNewBlogAuthorName] = useState('')\n//   const [selectedBlogId, setSelectedBlogId] = useState('')\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n//   useEffect(() => {\n//     fetch('http://localhost:8000/api/blog/', {\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs(data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.error(error))\n//   }, [])\n\n//   const handleCreate = () => {\n//     const newBlog = {\n//       title: newBlogTitle,\n//       content: newBlogContent,\n//       authorName: newBlogAuthorName\n//     }\n\n//     fetch('http://localhost:8000/api/blog/', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(newBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs([...blogs, data])\n//       setNewBlogTitle('')\n//       setNewBlogContent('')\n//       setNewBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleUpdate = () => {\n//     const updatedBlog = {\n//       id: selectedBlogId,\n//       title: updatedBlogTitle,\n//       content: updatedBlogContent,\n//       authorName: updatedBlogAuthorName\n//     }\n\n//     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(updatedBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       const index = blogs.findIndex(blog => blog.id === data.id)\n//       const newBlogs = [...blogs]\n//       newBlogs[index] = data\n//       setBlogs(newBlogs)\n//       setSelectedBlogId('')\n//       setUpdatedBlogTitle('')\n//       setUpdatedBlogContent('')\n//       setUpdatedBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleDelete = (id) => {\n//     if (window.confirm('Are you sure you want to delete this post?')) {\n//       fetch(`http://localhost:8000/api/blog/${id}/`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       })\n//       .then(response => {\n//         if (response.ok) {\n//           setBlogs(blogs.filter(blog => blog.id !== id))\n//         } else {\n//           throw new Error('Delete failed')\n//         }\n//       })\n//       .catch(error => {\n//         console.error(error)\n//       })\n//     }\n//   }\n\n//   if (loading) {\n//     return <p>Loading...</p>\n//   }\n//   return (\n//     <div>\n//       <h1>Blog List</h1>\n//     <ul>\n//       {blogs.map(blog => (\n//         <li key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           <p>Author: {blog.authorName}</p>\n//           <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//           <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//         </li>\n//       ))}\n//     </ul>\n//     {selectedBlogId && (\n//       <div>\n//         <h2>Edit Blog</h2>\n//         {blogs.map(blog => {\n//           if (blog.id === selectedBlogId) {\n//             return (\n//               <div key={blog.id}>\n//                 <label>\n//                   Title:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogTitle || blog.title}\n//                     onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Content:\n//                   <textarea\n//                     value={updatedBlogContent || blog.content}\n//                     onChange={(event) => setUpdatedBlogContent(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Author Name:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogAuthorName || blog.authorName}\n//                     onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//               </div>\n//             );\n//           } else {\n//             return null;\n//           }\n//         })}\n//         <button onClick={handleUpdate}>Save Changes</button>\n//         <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n//       </div>\n//     )}\n//     <div>\n//     <h2>Create New Blog</h2>\n//     <label>\n//     Title:\n//     <input\n//     type=\"text\"\n//     value={newBlogTitle}\n//     onChange={(event) => setNewBlogTitle(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Content:\n//     <textarea\n//     value={newBlogContent}\n//     onChange={(event) => setNewBlogContent(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Author Name:\n//     <input\n//     type=\"text\"\n//     value={newBlogAuthorName}\n//     onChange={(event) => setNewBlogAuthorName(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <button onClick={handleCreate}>Create Blog</button>\n//     </div>\n//     </div>\n//     )\n//     }\n// export default Blog;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Blog() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedBlogId, setSelectedBlogId] = useState('');\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState('');\n  const [updatedBlogContent, setUpdatedBlogContent] = useState('');\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:8000/api/blog/', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    }).then(response => response.json()).then(data => {\n      setBlogs(data);\n      setLoading(false);\n    }).catch(error => console.error(error));\n  }, []);\n  const handleUpdate = () => {\n    fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      body: JSON.stringify(updatedBlog)\n    }).then(response => response.json()).then(data => {\n      const index = blogs.findIndex(blog => blog.id === data.id);\n      const newBlogs = [...blogs];\n      newBlogs[index] = data;\n      setBlogs(newBlogs);\n      setSelectedBlogId('');\n      setUpdatedBlogTitle('');\n      setUpdatedBlogContent('');\n      setUpdatedBlogAuthorName('');\n    }).catch(error => console.error(error));\n  };\n  const handleDelete = blogId => {\n    fetch(`http://localhost:8000/api/blog/${blogId}/`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    }).then(() => {\n      const newBlogs = blogs.filter(blog => blog.id !== blogId);\n      setBlogs(newBlogs);\n    }).catch(error => console.error(error));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blog List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Author: \", blog.authorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedBlogId(blog.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(blog.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), selectedBlogId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 5\n      }, this), blogs.map(blog => {\n        if (blog.id === selectedBlogId) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: updatedBlogTitle || blog.title,\n                onChange: event => setUpdatedBlogTitle(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Content:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n                value: updatedBlogContent || blog.content,\n                onChange: event => setUpdatedBlogContent(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Author Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: updatedBlogAuthorName || blog.authorName,\n                onChange: event => setUpdatedBlogAuthorName(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 13\n            }, this)]\n          }, blog.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 11\n          }, this);\n        } else {\n          return null;\n        }\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdate,\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBlogId(''),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n}\n_s(Blog, \"58Qh7sZ76TNr8hpSPm+6peWcQ1k=\");\n_c = Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Blog","_s","blogs","setBlogs","loading","setLoading","selectedBlogId","setSelectedBlogId","updatedBlogTitle","setUpdatedBlogTitle","updatedBlogContent","setUpdatedBlogContent","updatedBlogAuthorName","setUpdatedBlogAuthorName","fetch","headers","localStorage","getItem","then","response","json","data","catch","error","console","handleUpdate","updatedBlog","id","method","body","JSON","stringify","index","findIndex","blog","newBlogs","handleDelete","blogId","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","content","authorName","onClick","type","value","onChange","event","target","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/drf-blog-api-master/django/frontend/src/blog.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react'\n\n// function Blog() {\n//   const [blogs, setBlogs] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [newBlogTitle, setNewBlogTitle] = useState('')\n//   const [newBlogContent, setNewBlogContent] = useState('')\n//   const [newBlogAuthorName, setNewBlogAuthorName] = useState('')\n//   const [selectedBlogId, setSelectedBlogId] = useState('')\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n//   useEffect(() => {\n//     fetch('http://localhost:8000/api/blog/', {\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs(data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.error(error))\n//   }, [])\n\n//   const handleCreate = () => {\n//     const newBlog = {\n//       title: newBlogTitle,\n//       content: newBlogContent,\n//       authorName: newBlogAuthorName\n//     }\n\n//     fetch('http://localhost:8000/api/blog/', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(newBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs([...blogs, data])\n//       setNewBlogTitle('')\n//       setNewBlogContent('')\n//       setNewBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleUpdate = () => {\n//     const updatedBlog = {\n//       id: selectedBlogId,\n//       title: updatedBlogTitle,\n//       content: updatedBlogContent,\n//       authorName: updatedBlogAuthorName\n//     }\n\n//     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(updatedBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       const index = blogs.findIndex(blog => blog.id === data.id)\n//       const newBlogs = [...blogs]\n//       newBlogs[index] = data\n//       setBlogs(newBlogs)\n//       setSelectedBlogId('')\n//       setUpdatedBlogTitle('')\n//       setUpdatedBlogContent('')\n//       setUpdatedBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleDelete = (id) => {\n//     if (window.confirm('Are you sure you want to delete this post?')) {\n//       fetch(`http://localhost:8000/api/blog/${id}/`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       })\n//       .then(response => {\n//         if (response.ok) {\n//           setBlogs(blogs.filter(blog => blog.id !== id))\n//         } else {\n//           throw new Error('Delete failed')\n//         }\n//       })\n//       .catch(error => {\n//         console.error(error)\n//       })\n//     }\n//   }\n\n//   if (loading) {\n//     return <p>Loading...</p>\n//   }\n//   return (\n//     <div>\n//       <h1>Blog List</h1>\n//     <ul>\n//       {blogs.map(blog => (\n//         <li key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           <p>Author: {blog.authorName}</p>\n//           <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//           <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//         </li>\n//       ))}\n//     </ul>\n//     {selectedBlogId && (\n//       <div>\n//         <h2>Edit Blog</h2>\n//         {blogs.map(blog => {\n//           if (blog.id === selectedBlogId) {\n//             return (\n//               <div key={blog.id}>\n//                 <label>\n//                   Title:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogTitle || blog.title}\n//                     onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Content:\n//                   <textarea\n//                     value={updatedBlogContent || blog.content}\n//                     onChange={(event) => setUpdatedBlogContent(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Author Name:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogAuthorName || blog.authorName}\n//                     onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//               </div>\n//             );\n//           } else {\n//             return null;\n//           }\n//         })}\n//         <button onClick={handleUpdate}>Save Changes</button>\n//         <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n//       </div>\n//     )}\n//     <div>\n//     <h2>Create New Blog</h2>\n//     <label>\n//     Title:\n//     <input\n//     type=\"text\"\n//     value={newBlogTitle}\n//     onChange={(event) => setNewBlogTitle(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Content:\n//     <textarea\n//     value={newBlogContent}\n//     onChange={(event) => setNewBlogContent(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Author Name:\n//     <input\n//     type=\"text\"\n//     value={newBlogAuthorName}\n//     onChange={(event) => setNewBlogAuthorName(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <button onClick={handleCreate}>Create Blog</button>\n//     </div>\n//     </div>\n//     )\n//     }\n// export default Blog;\n\n\nimport React, { useState, useEffect } from 'react'\n\nexport default function Blog() {\n  const [blogs, setBlogs] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  const [selectedBlogId, setSelectedBlogId] = useState('')\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n  const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n  useEffect(() => {\n    fetch('http://localhost:8000/api/blog/', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    })\n    .then(response => response.json())\n    .then(data => {\n      setBlogs(data)\n      setLoading(false)\n    })\n    .catch(error => console.error(error))\n  }, [])\n\n  const handleUpdate = () => {\n\n    fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      body: JSON.stringify(updatedBlog)\n    })\n    .then(response => response.json())\n    .then(data => {\n      const index = blogs.findIndex(blog => blog.id === data.id)\n      const newBlogs = [...blogs]\n      newBlogs[index] = data\n      setBlogs(newBlogs)\n      setSelectedBlogId('')\n      setUpdatedBlogTitle('')\n      setUpdatedBlogContent('')\n      setUpdatedBlogAuthorName('')\n    })\n    .catch(error => console.error(error))\n  }\n  \n\n  const handleDelete = (blogId) => {\n    fetch(`http://localhost:8000/api/blog/${blogId}/`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    })\n    .then(() => {\n      const newBlogs = blogs.filter(blog => blog.id !== blogId)\n      setBlogs(newBlogs)\n    })\n    .catch(error => console.error(error))\n  }\n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n  return (\n    <div>\n      <h1>Blog List</h1>\n      <ul>\n        {blogs.map(blog => (\n          <li key={blog.id}>\n            <h2>{blog.title}</h2>\n            <p>{blog.content}</p>\n            <p>Author: {blog.authorName}</p>\n            <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n            <button onClick={() => handleDelete(blog.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      {selectedBlogId && (\n  <div>\n    <h2>Edit Blog</h2>\n    {blogs.map(blog => {\n      if (blog.id === selectedBlogId) {\n        return (\n          <div key={blog.id}>\n            <label>\n              Title:\n              <input\n                type=\"text\"\n                value={updatedBlogTitle || blog.title}\n                onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n              />\n            </label>\n            <br />\n            <label>\n              Content:\n              <textarea\n                value={updatedBlogContent || blog.content}\n                onChange={(event) => setUpdatedBlogContent(event.target.value)}\n              />\n            </label>\n            <br />\n            <label>\n              Author Name:\n              <input\n                type=\"text\"\n                value={updatedBlogAuthorName || blog.authorName}\n                onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n              />\n            </label>\n            <br />\n          </div>\n        );\n      } else {\n        return null;\n      }\n    })}\n    <button onClick={handleUpdate}>Save Changes</button>\n    <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n  </div>\n)}\n\n</div>\n)}"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}