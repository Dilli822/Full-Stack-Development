{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState(null);\n//   const [liked, setLiked] = useState(false);\n//   const [likeCount, setLikeCount] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleBlogClick = (id) => {\n//     const blog = blogs.find((blog) => blog.id === id);\n//     setSelectedBlogId(id);\n//     setLiked(blog.liked);\n//     setLikeCount(blog.likes);\n//   };\n\n//   const handleLikeClick = async (blog) => {\n//     const { id, liked } = blog;\n//     const newLiked = !liked;\n//     const newLikes = liked ? blog.likes - 1 : blog.likes + 1;\n\n//     try {\n//       const response = await fetch(`http://localhost:8000/api/blog/likes/update/${id}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//         body: JSON.stringify({ liked: newLiked, likes: newLikes }),\n//       });\n\n//       const data = await response.json();\n//       const newBlogs = blogs.map((blog) => (blog.id === data.id ? data : blog));\n\n//       setBlogs(newBlogs);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//   {blogs.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>{blog.content}</p>\n//       <p>\n//         Author: {blog.author.first_name} {blog.author.last_name}\n//       </p>\n//       <p>Likes: {blog.likes}</p>\n//       <IconButton onClick={() => handleLikeClick(blog)}>\n//         <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//       </IconButton>\n//     </div>\n//   ))}\n// </div>\n\n//       {selectedBlogId && (\n//         <div className=\"likes\">\n//           <h3>\n//             {blogs.find((blog) => blog.id === selectedBlogId).title} - Likes:{\" \"}\n//             {likeCount}\n//           </h3>\n//           <IconButton\n//             onClick={() => {\n//               setLikeCount(likeCount + (liked ? -1 : 1));\n//               setLiked(!liked);\n//             }}\n//           >\n//             <FavoriteIcon color={liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//           <IconButton onClick={handleLikeClick}>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   return (\n//     <div className=\"blogs\">\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h3>{blog.title}</h3>\n//           <p>{blog.content}</p>\n//           <p>\n//             Author: {blog.author.first_name} {blog.author.last_name}\n//           </p>\n//           <p>Likes: {blog.likes}</p>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n//             <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Likes;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(0);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = blogId => {\n    const index = blogs.findIndex(blog => blog.id === blogId);\n    const blogToUpdate = {\n      ...blogs[index]\n    };\n    if (blogToUpdate.liked) {\n      // If the blog post is already liked, decrease the like count by 1\n      blogToUpdate.likes--;\n    } else {\n      // If the blog post is not liked, increase the like count by 1\n      blogToUpdate.likes++;\n    }\n\n    // Toggle the liked state for the blog post\n    blogToUpdate.liked = !blogToUpdate.liked;\n\n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[index] = blogToUpdate;\n    setBlogs(newBlogs);\n\n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        liked: blogToUpdate.liked,\n        likes: blogToUpdate.likes\n      })\n    }).then(response => response.json()).then(data => console.log(data)).catch(error => {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    });\n  };\n\n  // const handleLikeClick = (blogId) => {\n  //   const index = blogs.findIndex((blog) => blog.id === blogId);\n  //   const blogToUpdate = { ...blogs[index] };\n\n  //   if (blogToUpdate.liked) {\n  //     // If the blog post is already liked, decrease the like count by 1\n  //     if (blogToUpdate.likes > countLikes) {\n  //       blogToUpdate.likes--;\n  //     }\n  //   } else {\n  //     // If the blog post is not liked, increase the like count by 1\n  //     if (blogToUpdate.likes < countLikes) {\n  //       blogToUpdate.likes++;\n  //     }\n  //   }\n\n  //   // Toggle the liked state for the blog post\n  //   blogToUpdate.liked = !blogToUpdate.liked;\n\n  //   // Update the state with the new liked state and like count\n  //   const newBlogs = [...blogs];\n  //   newBlogs[index] = blogToUpdate;\n  //   setBlogs(newBlogs);\n\n  //   // Update the API with the new liked state and like count\n  //   fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       liked: blogToUpdate.liked,\n  //       likes: blogToUpdate.likes,\n  //     }),\n  //   })\n  //     .then((response) => response.json())\n  //     .then((data) => console.log(data))\n  //     .catch((error) => {\n  //       console.error(error);\n  //       setError(\"Failed to update like state.\");\n  //     });\n  // };\n  console.log(`The access token will expire in ${remainingTime} seconds.`);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        if (response.status === 401) {\n          console.log(\"token expired and expired time is\", remainingTime);\n\n          // Access token has expired, use refresh token to get a new access token\n          const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              refresh: localStorage.getItem(\"refreshToken\")\n            })\n          });\n          if (refreshResponse.ok) {\n            const tokens = await refreshResponse.json();\n            localStorage.setItem(\"accessToken\", tokens.access);\n            // Try fetching blogs again with the new access token\n            const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n              }\n            });\n            const data = await newResponse.json();\n            console.log(data);\n            setBlogs(data);\n            setAuthorId(data.author_id);\n            setCountBlogLikes(data.likes);\n            setLoading(false);\n          } else {\n            throw new Error(\"Refresh token is invalid\");\n          }\n        } else {\n          const data = await response.json();\n          console.log(data);\n          setBlogs(data);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/user/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n        console.log(data.id);\n        setUser(data);\n        setUserId(data.id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchUser();\n    fetchBlogs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blogs\",\n      children: blogs.sort((a, b) => b.id - a.id).map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {},\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:8000${blog.image}`,\n          style: {\n            width: \"100%\",\n            maxWidth: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"1rem 0 0 0rem\",\n            wordSpacing: \"0.1em\",\n            textAlign: \"justify\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"Author: \", blog.authorName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: blog.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Published Date: \", blog.created_at, \", Updated Date: \", blog.updated_at, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 12\n          }, this), created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Blog Created at Standard: \", created_at]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Likes: \", blog.likes]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => handleLikeClick(blog.id),\n            children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n              color: blog.liked ? \"error\" : \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"share\",\n            children: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, this)]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 8\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"Qm9uj9PGxCxdpSmdtXS4NAWwia0=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","countLikes","setCountLikes","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","liked","console","handleLikeClick","blogId","index","findIndex","id","blogToUpdate","likes","newBlogs","method","body","JSON","stringify","then","log","catch","remainingTime","status","refreshResponse","refresh","ok","tokens","setItem","access","newResponse","setAuthorId","author_id","setCountBlogLikes","setLoading","Error","fetchUser","setUser","setUserId","children","className","sort","a","b","style","title","fileName","_jsxFileName","lineNumber","columnNumber","src","image","width","maxWidth","padding","wordSpacing","textAlign","authorName","content","created_at","updated_at","onClick","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState(null);\n//   const [liked, setLiked] = useState(false);\n//   const [likeCount, setLikeCount] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleBlogClick = (id) => {\n//     const blog = blogs.find((blog) => blog.id === id);\n//     setSelectedBlogId(id);\n//     setLiked(blog.liked);\n//     setLikeCount(blog.likes);\n//   };\n\n//   const handleLikeClick = async (blog) => {\n//     const { id, liked } = blog;\n//     const newLiked = !liked;\n//     const newLikes = liked ? blog.likes - 1 : blog.likes + 1;\n  \n//     try {\n//       const response = await fetch(`http://localhost:8000/api/blog/likes/update/${id}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//         body: JSON.stringify({ liked: newLiked, likes: newLikes }),\n//       });\n  \n//       const data = await response.json();\n//       const newBlogs = blogs.map((blog) => (blog.id === data.id ? data : blog));\n  \n//       setBlogs(newBlogs);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n  \n\n//   return (\n//     <div>\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//   {blogs.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>{blog.content}</p>\n//       <p>\n//         Author: {blog.author.first_name} {blog.author.last_name}\n//       </p>\n//       <p>Likes: {blog.likes}</p>\n//       <IconButton onClick={() => handleLikeClick(blog)}>\n//         <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//       </IconButton>\n//     </div>\n//   ))}\n// </div>\n\n//       {selectedBlogId && (\n//         <div className=\"likes\">\n//           <h3>\n//             {blogs.find((blog) => blog.id === selectedBlogId).title} - Likes:{\" \"}\n//             {likeCount}\n//           </h3>\n//           <IconButton\n//             onClick={() => {\n//               setLikeCount(likeCount + (liked ? -1 : 1));\n//               setLiked(!liked);\n//             }}\n//           >\n//             <FavoriteIcon color={liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//           <IconButton onClick={handleLikeClick}>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   return (\n//     <div className=\"blogs\">\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h3>{blog.title}</h3>\n//           <p>{blog.content}</p>\n//           <p>\n//             Author: {blog.author.first_name} {blog.author.last_name}\n//           </p>\n//           <p>Likes: {blog.likes}</p>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n//             <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Likes;\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(0);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n\n  const handleLikeClick = (blogId) => {\n    const index = blogs.findIndex((blog) => blog.id === blogId);\n    const blogToUpdate = { ...blogs[index] };\n  \n    if (blogToUpdate.liked) {\n      // If the blog post is already liked, decrease the like count by 1\n      blogToUpdate.likes--;\n    } else {\n      // If the blog post is not liked, increase the like count by 1\n      blogToUpdate.likes++;\n    }\n  \n    // Toggle the liked state for the blog post\n    blogToUpdate.liked = !blogToUpdate.liked;\n  \n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[index] = blogToUpdate;\n    setBlogs(newBlogs);\n  \n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        liked: blogToUpdate.liked,\n        likes: blogToUpdate.likes,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(data))\n      .catch((error) => {\n        console.error(error);\n        setError(\"Failed to update like state.\");\n      });\n  };\n  \n  // const handleLikeClick = (blogId) => {\n  //   const index = blogs.findIndex((blog) => blog.id === blogId);\n  //   const blogToUpdate = { ...blogs[index] };\n  \n  //   if (blogToUpdate.liked) {\n  //     // If the blog post is already liked, decrease the like count by 1\n  //     if (blogToUpdate.likes > countLikes) {\n  //       blogToUpdate.likes--;\n  //     }\n  //   } else {\n  //     // If the blog post is not liked, increase the like count by 1\n  //     if (blogToUpdate.likes < countLikes) {\n  //       blogToUpdate.likes++;\n  //     }\n  //   }\n  \n  //   // Toggle the liked state for the blog post\n  //   blogToUpdate.liked = !blogToUpdate.liked;\n  \n  //   // Update the state with the new liked state and like count\n  //   const newBlogs = [...blogs];\n  //   newBlogs[index] = blogToUpdate;\n  //   setBlogs(newBlogs);\n  \n  //   // Update the API with the new liked state and like count\n  //   fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       liked: blogToUpdate.liked,\n  //       likes: blogToUpdate.likes,\n  //     }),\n  //   })\n  //     .then((response) => response.json())\n  //     .then((data) => console.log(data))\n  //     .catch((error) => {\n  //       console.error(error);\n  //       setError(\"Failed to update like state.\");\n  //     });\n  // };\n  console.log(`The access token will expire in ${remainingTime} seconds.`);\n  useEffect(() => {\n      const fetchBlogs = async () => {\n          try {\n              const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n                  headers: {\n                      Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n                  },\n                  \n              });\n\n \n\n              if (response.status === 401) {\n                  console.log(\"token expired and expired time is\", remainingTime);\n\n                  // Access token has expired, use refresh token to get a new access token\n                  const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n                      method: \"POST\",\n                      headers: {\n                          \"Content-Type\": \"application/json\",\n                      },\n                      body: JSON.stringify({\n                          refresh: localStorage.getItem(\"refreshToken\"),\n                      }),\n                  });\n\n                  if (refreshResponse.ok) {\n                      const tokens = await refreshResponse.json();\n                      localStorage.setItem(\"accessToken\", tokens.access);\n                      // Try fetching blogs again with the new access token\n                      const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n                          headers: {\n                              Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n                          },\n                      });\n                      const data = await newResponse.json();\n                      console.log(data);\n                      setBlogs(data);\n                      setAuthorId(data.author_id);\n                      setCountBlogLikes(data.likes);\n             \n                      setLoading(false);\n                  } else {\n                      throw new Error(\"Refresh token is invalid\");\n                  }\n              } else {\n                  const data = await response.json();\n                  console.log(data);\n                  setBlogs(data);\n                  setLoading(false);\n              }\n          } catch (error) {\n              console.error(error);\n          }\n      };\n\n      const fetchUser = async () => {\n          try {\n            const response = await fetch(\"http://localhost:8000/api/user/\", {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n              },\n            });\n      \n            const data = await response.json();\n            console.log(data);\n            console.log(data.id)\n            setUser(data);\n            setUserId(data.id);\n          } catch (error) {\n            console.error(error);\n          }\n        };\n        fetchUser();        \n\n      fetchBlogs();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"blogs\">\n            {/* <NewsFeedCard/> */}\n{blogs\n    .sort((a, b) => b.id - a.id)\n   .map((blog) => (\n       <div key={blog.id} style={{ }}>\n           <h2>{blog.title}</h2>\n           <img src={`http://localhost:8000${blog.image}`} style={{  width: \"100%\",maxWidth: \"100%\" }} />\n          <div style={{  padding: \"1rem 0 0 0rem\", wordSpacing: \"0.1em\",textAlign: \"justify\"}} > \n           <h5>Author: {blog.authorName}</h5>\n            <p >{blog.content}</p>\n          \n           <p>Published Date: {blog.created_at}, Updated Date: {blog.updated_at} </p>\n            {created_at && <p>Blog Created at Standard: {created_at}</p>}\n\n            <p>Likes: {blog.likes}</p>\n            {error && <p>{error}</p>}\n            <IconButton onClick={() => handleLikeClick(blog.id)}>\n              <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n            </IconButton>\n\n        <IconButton aria-label=\"share\">\n          <ShareIcon />\n        </IconButton>\n            </div>\n            <hr></hr>\n\n        </div>\n       \n    ))} \n\n      \n\n\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;;AAGjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;UACnEC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UAC/D;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;;QAElC;QACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,GAAG,CAAEC,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEC,KAAK,EAAE;QAAM,CAAC,CAAC,CAAC;QAEtEjB,QAAQ,CAACc,cAAc,CAAC;QACxBV,aAAa,CAACU,cAAc,CAAC;MAC/B,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdiB,OAAO,CAACjB,KAAK,CAACA,KAAK,CAAC;QACpBC,QAAQ,CAAC,6BAA6B,CAAC;MACzC;IACF,CAAC;IAEDG,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,eAAe,GAAIC,MAAM,IAAK;IAClC,MAAMC,KAAK,GAAGtB,KAAK,CAACuB,SAAS,CAAEN,IAAI,IAAKA,IAAI,CAACO,EAAE,KAAKH,MAAM,CAAC;IAC3D,MAAMI,YAAY,GAAG;MAAE,GAAGzB,KAAK,CAACsB,KAAK;IAAE,CAAC;IAExC,IAAIG,YAAY,CAACP,KAAK,EAAE;MACtB;MACAO,YAAY,CAACC,KAAK,EAAE;IACtB,CAAC,MAAM;MACL;MACAD,YAAY,CAACC,KAAK,EAAE;IACtB;;IAEA;IACAD,YAAY,CAACP,KAAK,GAAG,CAACO,YAAY,CAACP,KAAK;;IAExC;IACA,MAAMS,QAAQ,GAAG,CAAC,GAAG3B,KAAK,CAAC;IAC3B2B,QAAQ,CAACL,KAAK,CAAC,GAAGG,YAAY;IAC9BxB,QAAQ,CAAC0B,QAAQ,CAAC;;IAElB;IACAnB,KAAK,CAAE,+CAA8Ca,MAAO,GAAE,EAAE;MAC9DO,MAAM,EAAE,KAAK;MACbnB,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE,EAAC;QAC9D,cAAc,EAAE;MAClB,CAAC;MACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBb,KAAK,EAAEO,YAAY,CAACP,KAAK;QACzBQ,KAAK,EAAED,YAAY,CAACC;MACtB,CAAC;IACH,CAAC,CAAC,CACCM,IAAI,CAAEzB,QAAQ,IAAKA,QAAQ,CAACO,IAAI,EAAE,CAAC,CACnCkB,IAAI,CAAEnB,IAAI,IAAKM,OAAO,CAACc,GAAG,CAACpB,IAAI,CAAC,CAAC,CACjCqB,KAAK,CAAEhC,KAAK,IAAK;MAChBiB,OAAO,CAACjB,KAAK,CAACA,KAAK,CAAC;MACpBC,QAAQ,CAAC,8BAA8B,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;;EAED;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAgB,OAAO,CAACc,GAAG,CAAE,mCAAkCE,aAAc,WAAU,CAAC;EACxE3C,SAAS,CAAC,MAAM;IACZ,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;UACjEC,OAAO,EAAE;YACLC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UACjE;QAEJ,CAAC,CAAC;QAIF,IAAIL,QAAQ,CAAC6B,MAAM,KAAK,GAAG,EAAE;UACzBjB,OAAO,CAACc,GAAG,CAAC,mCAAmC,EAAEE,aAAa,CAAC;;UAE/D;UACA,MAAME,eAAe,GAAG,MAAM7B,KAAK,CAAC,oCAAoC,EAAE;YACtEoB,MAAM,EAAE,MAAM;YACdnB,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDoB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACjBO,OAAO,EAAE3B,YAAY,CAACC,OAAO,CAAC,cAAc;YAChD,CAAC;UACL,CAAC,CAAC;UAEF,IAAIyB,eAAe,CAACE,EAAE,EAAE;YACpB,MAAMC,MAAM,GAAG,MAAMH,eAAe,CAACvB,IAAI,EAAE;YAC3CH,YAAY,CAAC8B,OAAO,CAAC,aAAa,EAAED,MAAM,CAACE,MAAM,CAAC;YAClD;YACA,MAAMC,WAAW,GAAG,MAAMnC,KAAK,CAAC,sCAAsC,EAAE;cACpEC,OAAO,EAAE;gBACLC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;cACjE;YACJ,CAAC,CAAC;YACF,MAAMC,IAAI,GAAG,MAAM8B,WAAW,CAAC7B,IAAI,EAAE;YACrCK,OAAO,CAACc,GAAG,CAACpB,IAAI,CAAC;YACjBZ,QAAQ,CAACY,IAAI,CAAC;YACd+B,WAAW,CAAC/B,IAAI,CAACgC,SAAS,CAAC;YAC3BC,iBAAiB,CAACjC,IAAI,CAACa,KAAK,CAAC;YAE7BqB,UAAU,CAAC,KAAK,CAAC;UACrB,CAAC,MAAM;YACH,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;UAC/C;QACJ,CAAC,MAAM;UACH,MAAMnC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;UAClCK,OAAO,CAACc,GAAG,CAACpB,IAAI,CAAC;UACjBZ,QAAQ,CAACY,IAAI,CAAC;UACdkC,UAAU,CAAC,KAAK,CAAC;QACrB;MACJ,CAAC,CAAC,OAAO7C,KAAK,EAAE;QACZiB,OAAO,CAACjB,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ,CAAC;IAED,MAAM+C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACF,MAAM1C,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;UAC9DC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UAC/D;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;QAClCK,OAAO,CAACc,GAAG,CAACpB,IAAI,CAAC;QACjBM,OAAO,CAACc,GAAG,CAACpB,IAAI,CAACW,EAAE,CAAC;QACpB0B,OAAO,CAACrC,IAAI,CAAC;QACbsC,SAAS,CAACtC,IAAI,CAACW,EAAE,CAAC;MACpB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACdiB,OAAO,CAACjB,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACD+C,SAAS,EAAE;IAEb3C,UAAU,EAAE;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAAuD,QAAA,eACEvD,OAAA;MAAKwD,SAAS,EAAC,OAAO;MAAAD,QAAA,EAE3BpD,KAAK,CACDsD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChC,EAAE,GAAG+B,CAAC,CAAC/B,EAAE,CAAC,CAC5BR,GAAG,CAAEC,IAAI,iBACNpB,OAAA;QAAmB4D,KAAK,EAAE,CAAE,CAAE;QAAAL,QAAA,gBAC1BvD,OAAA;UAAAuD,QAAA,EAAKnC,IAAI,CAACyC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eACrBjE,OAAA;UAAKkE,GAAG,EAAG,wBAAuB9C,IAAI,CAAC+C,KAAM,EAAE;UAACP,KAAK,EAAE;YAAGQ,KAAK,EAAE,MAAM;YAACC,QAAQ,EAAE;UAAO;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eAC/FjE,OAAA;UAAK4D,KAAK,EAAE;YAAGU,OAAO,EAAE,eAAe;YAAEC,WAAW,EAAE,OAAO;YAACC,SAAS,EAAE;UAAS,CAAE;UAAAjB,QAAA,gBACnFvD,OAAA;YAAAuD,QAAA,GAAI,UAAQ,EAACnC,IAAI,CAACqD,UAAU;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAM,eACjCjE,OAAA;YAAAuD,QAAA,EAAKnC,IAAI,CAACsD;UAAO;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eAEvBjE,OAAA;YAAAuD,QAAA,GAAG,kBAAgB,EAACnC,IAAI,CAACuD,UAAU,EAAC,kBAAgB,EAACvD,IAAI,CAACwD,UAAU,EAAC,GAAC;UAAA;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI,EACxEU,UAAU,iBAAI3E,OAAA;YAAAuD,QAAA,GAAG,4BAA0B,EAACoB,UAAU;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eAE5DjE,OAAA;YAAAuD,QAAA,GAAG,SAAO,EAACnC,IAAI,CAACS,KAAK;UAAA;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,EACzB5D,KAAK,iBAAIL,OAAA;YAAAuD,QAAA,EAAIlD;UAAK;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eACxBjE,OAAA,CAACJ,UAAU;YAACiF,OAAO,EAAEA,CAAA,KAAMtD,eAAe,CAACH,IAAI,CAACO,EAAE,CAAE;YAAA4B,QAAA,eAClDvD,OAAA,CAACH,YAAY;cAACiF,KAAK,EAAE1D,IAAI,CAACC,KAAK,GAAG,OAAO,GAAG;YAAU;cAAAyC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAG;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAC9C,eAEjBjE,OAAA,CAACJ,UAAU;YAAC,cAAW,OAAO;YAAA2D,QAAA,eAC5BvD,OAAA,CAACF,SAAS;cAAAgE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAG;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACF;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACH,eACNjE,OAAA;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA,GApBJ7C,IAAI,CAACO,EAAE;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAwBnB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAKM;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAAC/D,EAAA,CAvOuBD,KAAK;AAAA8E,EAAA,GAAL9E,KAAK;AAAA,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}