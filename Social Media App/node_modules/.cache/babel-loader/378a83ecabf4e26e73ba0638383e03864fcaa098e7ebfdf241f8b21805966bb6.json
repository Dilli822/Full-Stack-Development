{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes({ postId }) {\n//   const [likes, setLikes] = useState(0);\n//   const [liked, setLiked] = useState();\n\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\" http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikes(blogsWithLiked.likes);\n//         setLiked(blogsWithLiked.liked);\n//         setAuthorId(blogsWithLiked.author_id);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   // Render the like button with the current likes and handle the click event\n//   return (\n//     <div>\n\n//     </div>\n//   );\n// }\n\n// export default Likes;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Likes() {\n  _s();\n  // useEffect(() => {\n  //   const fetchLikes = async () => {\n  //     try {\n  //       const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n  //         headers: {\n  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         },\n  //       });\n\n  //       const data = await response.json();\n  //       console.log(data);\n  //       setBlogs(data);\n  //       setLikes(data.likes);\n  //       setLiked(data.liked_state);\n  //       setBlogs(data.blog_name);\n\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   };\n\n  //   fetchLikes();\n  // }, []);\n\n  //   useEffect(() => {\n  //     const fetchLikes = async () => {\n  //       try {\n  //         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n  //           headers: {\n  //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //           },\n  //         });\n\n  //         const data = await response.json();\n  //         const sizeofArr = data.length;\n  //         console.log(\"size\", sizeofArr);\n\n  //         const blogLikes = data.map(blog => {\n  //           return {\n  //             id: blog.id,\n  //             likes: blog.likes,\n  //             liked_state: blog.liked_state,\n  //             blog_name: blog.blog_name,\n  //           }\n  //         });\n\n  //         setBlogs(blogLikes);\n  //         console.log(\"liked_state\", blogLikes.map(blog => blog.liked_state));\n  //         console.log(\"liked_state\", blogLikes.map(blog => blog.likes));\n\n  //       } catch (error) {\n  //         console.error(error);\n  //       }\n  //     };\n\n  //     fetchLikes();\n  //   }, []);\n\n  // console.log(\"likes\", likes);\n  // console.log(\"liked_state\", liked);\n\n  //   return (\n  //     <div>\n  //       {blogs.map((blog) => (\n  //         <div key={blog.id}>\n  //           <h2>{blog.blog_name}</h2>\n  //           <h3>{blog.id}</h3>\n  //           <p>{blog.likes} Likes</p>\n  //           <p>{blog.liked_state} Liked</p>\n  //           <button>Like</button>\n  //         </div>\n  //       ))}\n  //     </div>\n  //   );\n  // }\n\n  // export default Likes;\n\n  const [blogs, setBlogs] = useState([]);\n  const [likes, setLikes] = useState([]);\n  const [liked, setLiked] = useState([]);\n\n  // useEffect(() => {\n  //   const fetchLikes = async () => {\n  //     try {\n  //       const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n  //         headers: {\n  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         },\n  //       });\n\n  //       const data = await response.json();\n  //       const blogLikes = data.map((blog) => {\n  //         return {\n  //           id: blog.id,\n  //           likes: blog.likes,\n  //           liked_state: blog.liked_state,\n  //           blog_name: blog.blog_name,\n  //         };\n  //       });\n\n  //       setBlogs(blogLikes);\n  //       setLikes(blogLikes.map((blog) => blog.likes));\n  //       setLiked(blogLikes.map((blog) => blog.liked_state));\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   };\n\n  //   fetchLikes();\n  // }, []);\n\n  const handleLike = async (blogId, currentLikedState, index) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        },\n        body: JSON.stringify({\n          liked: !currentLikedState\n        })\n      });\n      if (response.ok) {\n        // update liked state for the current blog\n        const updatedBlogLikes = [...blogs];\n        updatedBlogLikes[index].liked_state = !currentLikedState;\n        if (currentLikedState) {\n          updatedBlogLikes[index].likes--;\n        } else {\n          updatedBlogLikes[index].likes++;\n        }\n        setBlogs(updatedBlogLikes);\n\n        // update total likes count\n        const updatedLikes = [...likes];\n        if (currentLikedState) {\n          updatedLikes[index]--;\n        } else {\n          updatedLikes[index]++;\n        }\n        setLikes(updatedLikes);\n\n        // update liked state\n        const updatedLiked = [...liked];\n        updatedLiked[index] = !currentLikedState;\n        setLiked(updatedLiked);\n      } else {\n        console.error(\"Error updating like state\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map((blog, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Title: \", blog.blog_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Blog Id: \", blog.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [likes[index], \" Likes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => handleLike(blog.id, blog.liked_state, index),\n        children: liked[index] ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          color: \"error\",\n          style: {\n            width: \"30px\",\n            height: \"30px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          color: \"black\",\n          style: {\n            width: \"30px\",\n            height: \"30px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 98\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 19\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"epuMtXVk81YuOMQ+WNGSK2wT4W8=\");\n_c = Likes;\nexport default Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","likes","setLikes","liked","setLiked","handleLike","blogId","currentLikedState","index","response","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","ok","updatedBlogLikes","liked_state","updatedLikes","updatedLiked","console","error","children","map","blog","blog_name","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","color","style","width","height","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n\n\n\n\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes({ postId }) {\n//   const [likes, setLikes] = useState(0);\n//   const [liked, setLiked] = useState();\n  \n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\" http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikes(blogsWithLiked.likes);\n//         setLiked(blogsWithLiked.liked);\n//         setAuthorId(blogsWithLiked.author_id);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n \n\n\n//   // Render the like button with the current likes and handle the click event\n//   return (\n//     <div>\n\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n\nfunction Likes() {\n\n  // useEffect(() => {\n  //   const fetchLikes = async () => {\n  //     try {\n  //       const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n  //         headers: {\n  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         },\n  //       });\n\n  //       const data = await response.json();\n  //       console.log(data);\n  //       setBlogs(data);\n  //       setLikes(data.likes);\n  //       setLiked(data.liked_state);\n  //       setBlogs(data.blog_name);\n        \n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   };\n\n  //   fetchLikes();\n  // }, []);\n\n \n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         const data = await response.json();\n//         const sizeofArr = data.length;\n//         console.log(\"size\", sizeofArr);\n  \n//         const blogLikes = data.map(blog => {\n//           return {\n//             id: blog.id,\n//             likes: blog.likes,\n//             liked_state: blog.liked_state,\n//             blog_name: blog.blog_name,\n//           }\n//         });\n  \n//         setBlogs(blogLikes);\n//         console.log(\"liked_state\", blogLikes.map(blog => blog.liked_state));\n//         console.log(\"liked_state\", blogLikes.map(blog => blog.likes));\n  \n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n  \n//     fetchLikes();\n//   }, []);\n  \n// console.log(\"likes\", likes);\n// console.log(\"liked_state\", liked);\n\n//   return (\n//     <div>\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h2>{blog.blog_name}</h2>\n//           <h3>{blog.id}</h3>\n//           <p>{blog.likes} Likes</p>\n//           <p>{blog.liked_state} Liked</p>\n//           <button>Like</button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n  const [blogs, setBlogs] = useState([]);\n  const [likes, setLikes] = useState([]);\n  const [liked, setLiked] = useState([]);\n\n  // useEffect(() => {\n  //   const fetchLikes = async () => {\n  //     try {\n  //       const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n  //         headers: {\n  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         },\n  //       });\n\n  //       const data = await response.json();\n  //       const blogLikes = data.map((blog) => {\n  //         return {\n  //           id: blog.id,\n  //           likes: blog.likes,\n  //           liked_state: blog.liked_state,\n  //           blog_name: blog.blog_name,\n  //         };\n  //       });\n\n  //       setBlogs(blogLikes);\n  //       setLikes(blogLikes.map((blog) => blog.likes));\n  //       setLiked(blogLikes.map((blog) => blog.liked_state));\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   };\n\n  //   fetchLikes();\n  // }, []);\n\n  const handleLike = async (blogId, currentLikedState, index) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n        body: JSON.stringify({ liked: !currentLikedState }),\n      });\n\n      if (response.ok) {\n        // update liked state for the current blog\n        const updatedBlogLikes = [...blogs];\n        updatedBlogLikes[index].liked_state = !currentLikedState;\n        if (currentLikedState) {\n          updatedBlogLikes[index].likes--;\n        } else {\n          updatedBlogLikes[index].likes++;\n        }\n        setBlogs(updatedBlogLikes);\n\n        // update total likes count\n        const updatedLikes = [...likes];\n        if (currentLikedState) {\n          updatedLikes[index]--;\n        } else {\n          updatedLikes[index]++;\n        }\n        setLikes(updatedLikes);\n\n        // update liked state\n        const updatedLiked = [...liked];\n        updatedLiked[index] = !currentLikedState;\n        setLiked(updatedLiked);\n      } else {\n        console.error(\"Error updating like state\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div>\n      {blogs.map((blog, index) => (\n        <div key={blog.id}>\n          <h2>Title: {blog.blog_name}</h2>\n          <h3>Blog Id: {blog.id}</h3>\n          <p>{likes[index]} Likes</p>\n         \n          {/* {liked[index] ? <p>liked<FavoriteIcon color=\"error\"  /></p>: <p>nolike <FavoriteIcon color=\"primary\"  /></p>} */}\n          {/* <button onClick={() => handleLike(blog.id, blog.liked_state, index)}> like </button> */}\n          <IconButton onClick={() => handleLike(blog.id, blog.liked_state, index)}>\n          {liked[index] ? <FavoriteIcon color=\"error\"  style={{ width:\"30px\",height:\"30px\"}}/> : <FavoriteIcon color=\"black\"   style={{ width:\"30px\",height:\"30px\"}} />}\n                 </IconButton>\n                  <IconButton>\n                   <ShareIcon />\n                 </IconButton>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Likes;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAEf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAGF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAMe,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,iBAAiB,EAAEC,KAAK,KAAK;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+CAA8CJ,MAAO,GAAE,EAAE;QACrFK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;QAC/D,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,KAAK,EAAE,CAACI;QAAkB,CAAC;MACpD,CAAC,CAAC;MAEF,IAAIE,QAAQ,CAACU,EAAE,EAAE;QACf;QACA,MAAMC,gBAAgB,GAAG,CAAC,GAAGrB,KAAK,CAAC;QACnCqB,gBAAgB,CAACZ,KAAK,CAAC,CAACa,WAAW,GAAG,CAACd,iBAAiB;QACxD,IAAIA,iBAAiB,EAAE;UACrBa,gBAAgB,CAACZ,KAAK,CAAC,CAACP,KAAK,EAAE;QACjC,CAAC,MAAM;UACLmB,gBAAgB,CAACZ,KAAK,CAAC,CAACP,KAAK,EAAE;QACjC;QACAD,QAAQ,CAACoB,gBAAgB,CAAC;;QAE1B;QACA,MAAME,YAAY,GAAG,CAAC,GAAGrB,KAAK,CAAC;QAC/B,IAAIM,iBAAiB,EAAE;UACrBe,YAAY,CAACd,KAAK,CAAC,EAAE;QACvB,CAAC,MAAM;UACLc,YAAY,CAACd,KAAK,CAAC,EAAE;QACvB;QACAN,QAAQ,CAACoB,YAAY,CAAC;;QAEtB;QACA,MAAMC,YAAY,GAAG,CAAC,GAAGpB,KAAK,CAAC;QAC/BoB,YAAY,CAACf,KAAK,CAAC,GAAG,CAACD,iBAAiB;QACxCH,QAAQ,CAACmB,YAAY,CAAC;MACxB,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACE7B,OAAA;IAAA8B,QAAA,EACG3B,KAAK,CAAC4B,GAAG,CAAC,CAACC,IAAI,EAAEpB,KAAK,kBACrBZ,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAA8B,QAAA,GAAI,SAAO,EAACE,IAAI,CAACC,SAAS;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAChCrC,OAAA;QAAA8B,QAAA,GAAI,WAAS,EAACE,IAAI,CAACM,EAAE;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC3BrC,OAAA;QAAA8B,QAAA,GAAIzB,KAAK,CAACO,KAAK,CAAC,EAAC,QAAM;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAI3BrC,OAAA,CAACJ,UAAU;QAAC2C,OAAO,EAAEA,CAAA,KAAM9B,UAAU,CAACuB,IAAI,CAACM,EAAE,EAAEN,IAAI,CAACP,WAAW,EAAEb,KAAK,CAAE;QAAAkB,QAAA,EACvEvB,KAAK,CAACK,KAAK,CAAC,gBAAGZ,OAAA,CAACH,YAAY;UAAC2C,KAAK,EAAC,OAAO;UAAEC,KAAK,EAAE;YAAEC,KAAK,EAAC,MAAM;YAACC,MAAM,EAAC;UAAM;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE,gBAAGrC,OAAA,CAACH,YAAY;UAAC2C,KAAK,EAAC,OAAO;UAAGC,KAAK,EAAE;YAAEC,KAAK,EAAC,MAAM;YAACC,MAAM,EAAC;UAAM;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACzI,eACZrC,OAAA,CAACJ,UAAU;QAAAkC,QAAA,eACV9B,OAAA,CAACF,SAAS;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACF;IAAA,GAZZL,IAAI,CAACM,EAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAclB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAACnC,EAAA,CAlLQD,KAAK;AAAA2C,EAAA,GAAL3C,KAAK;AAoLd,eAAeA,KAAK;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}