{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Comments() {\n  _s();\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchLikes = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          const blogLikes = data.map(blog => {\n            return {\n              id: blog.id,\n              likes: blog.likes,\n              liked_state: blog.liked_state,\n              title: blog.title,\n              image: blog.image,\n              content: blog.content,\n              authorName: blog.authorName,\n              created_at: blog.created_at,\n              updated_at: blog.updated_at\n            };\n          });\n\n          // Store the mapped data in a variable\n          const mappedData = blogLikes;\n          setBlogs(mappedData);\n          setLikes(mappedData.map(blog => blog.likes));\n          setLiked(mappedData.map(blog => blog.liked_state));\n          console.log(mappedData);\n          setShareUrls(mappedData.map(blog => `${window.location.origin}/blog/${blog.id}`));\n\n          // Call the fetchComments function and pass the mapped data\n          fetchComments(mappedData);\n        } else {\n          console.error(\"Failed to fetch likes\");\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchComments = async mappedData => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          console.log(\"comments are \", data);\n          setComments(data);\n\n          // Use the mapped data and comments data together\n          // Combine the mapped data and comments data as needed\n          const combinedData = {\n            mappedData: mappedData,\n            commentsData: data\n          };\n\n          // Process the combined data as needed\n          console.log(\"Combined data:\", combinedData);\n        } else {\n          console.error(\"Failed to fetch comments\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchLikes();\n  }, []);\n\n  // useEffect(() => {\n  //   fetchComments();\n  // }, []);\n\n  // const fetchComments = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:8000/api/blog/comments/', {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       },\n\n  //     });\n  //     if (response.ok) {\n  //       const data = await response.json();\n  //       console.log(\"comments are \", data);\n  //       setComments(data);\n  //     } else {\n  //       console.error('Failed to fetch comments');\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //   }\n  // };\n\n  // return (\n  //   <div>\n  //     {comments.map((comment) => (\n  //       <div key={comment.id}>\n\n  //         <p>comments: {comment.comment_content}</p>\n  //         <p>commented_by: {comment.author}</p>\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [combinedData.mappedData.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", blog.likes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }, this)), combinedData.commentsData.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: comment.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.comment_content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 3\n  }, this);\n}\n_s(Comments, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = Comments;\n;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Comments","_s","comments","setComments","fetchLikes","response","fetch","headers","Authorization","localStorage","getItem","ok","data","json","blogLikes","map","blog","id","likes","liked_state","title","image","content","authorName","created_at","updated_at","mappedData","setBlogs","setLikes","setLiked","console","log","setShareUrls","window","location","origin","fetchComments","error","method","combinedData","commentsData","children","fileName","_jsxFileName","lineNumber","columnNumber","comment","comment_content","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction Comments () {\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchLikes = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n  \n        if (response.ok) {\n          const data = await response.json();\n          const blogLikes = data.map((blog) => {\n            return {\n              id: blog.id,\n              likes: blog.likes,\n              liked_state: blog.liked_state,\n              title: blog.title,\n              image: blog.image,\n              content: blog.content,\n              authorName: blog.authorName,\n              created_at: blog.created_at,\n              updated_at: blog.updated_at,\n            };\n          });\n  \n          // Store the mapped data in a variable\n          const mappedData = blogLikes;\n  \n          setBlogs(mappedData);\n          setLikes(mappedData.map((blog) => blog.likes));\n          setLiked(mappedData.map((blog) => blog.liked_state));\n  \n          console.log(mappedData);\n          setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n  \n          // Call the fetchComments function and pass the mapped data\n          fetchComments(mappedData);\n        } else {\n          console.error(\"Failed to fetch likes\");\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n    const fetchComments = async (mappedData) => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n  \n        if (response.ok) {\n          const data = await response.json();\n          console.log(\"comments are \", data);\n          setComments(data);\n  \n          // Use the mapped data and comments data together\n          // Combine the mapped data and comments data as needed\n          const combinedData = {\n            mappedData: mappedData,\n            commentsData: data,\n          };\n  \n          // Process the combined data as needed\n          console.log(\"Combined data:\", combinedData);\n        } else {\n          console.error(\"Failed to fetch comments\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n  \n    fetchLikes();\n  }, []);\n  \n  // useEffect(() => {\n  //   fetchComments();\n  // }, []);\n\n  // const fetchComments = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:8000/api/blog/comments/', {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       },\n    \n  //     });\n  //     if (response.ok) {\n  //       const data = await response.json();\n  //       console.log(\"comments are \", data);\n  //       setComments(data);\n  //     } else {\n  //       console.error('Failed to fetch comments');\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //   }\n  // };\n\n  // return (\n  //   <div>\n  //     {comments.map((comment) => (\n  //       <div key={comment.id}>\n   \n  //         <p>comments: {comment.comment_content}</p>\n  //         <p>commented_by: {comment.author}</p>\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n  return (\n  <div>\n  {combinedData.mappedData.map((blog) => (\n    <div key={blog.id}>\n      <h3>{blog.title}</h3>\n      <p>Likes: {blog.likes}</p>\n      {/* Render other properties of the blog as needed */}\n    </div>\n  ))}\n  {combinedData.commentsData.map((comment) => (\n    <div key={comment.id}>\n      <h3>{comment.title}</h3>\n      <p>{comment.comment_content}</p>\n      {/* Render other properties of the comment as needed */}\n    </div>\n  ))}\n</div>\n);\n\n};\n\nexport default Comments;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}