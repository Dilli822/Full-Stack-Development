{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\";\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes({ postId }) {\n//   const [likes, setLikes] = useState(0);\n//   const [liked, setLiked] = useState();\n\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\" http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikes(blogsWithLiked.likes);\n//         setLiked(blogsWithLiked.liked);\n//         setAuthorId(blogsWithLiked.author_id);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   // Render the like button with the current likes and handle the click event\n//   return (\n//     <div>\n\n//     </div>\n//   );\n// }\n\n// export default Likes;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Likes(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.blog_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Author: \", props.author]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Likes: \", props.likes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLikeClick,\n      children: likedPost ? 'Unlike' : 'Like'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n_c = Likes;\nexport default Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","props","children","blog_name","fileName","_jsxFileName","lineNumber","columnNumber","author","likes","onClick","handleLikeClick","likedPost","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n\n\n\n\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes({ postId }) {\n//   const [likes, setLikes] = useState(0);\n//   const [liked, setLiked] = useState();\n  \n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\" http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikes(blogsWithLiked.likes);\n//         setLiked(blogsWithLiked.liked);\n//         setAuthorId(blogsWithLiked.author_id);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n \n\n\n//   // Render the like button with the current likes and handle the click event\n//   return (\n//     <div>\n\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n\n\nfunction Likes(props) {\n\n\n  return (\n    <div>\n      <h2>{props.blog_name}</h2>\n      <p>Author: {props.author}</p>\n      <p>Likes: {props.likes}</p>\n      <button onClick={handleLikeClick}>\n        {likedPost ? 'Unlike' : 'Like'}\n      </button>\n    </div>\n  );\n}\n\nexport default Likes;\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,SAASC,KAAKA,CAACC,KAAK,EAAE;EAGpB,oBACEF,OAAA;IAAAG,QAAA,gBACEH,OAAA;MAAAG,QAAA,EAAKD,KAAK,CAACE;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAC1BR,OAAA;MAAAG,QAAA,GAAG,UAAQ,EAACD,KAAK,CAACO,MAAM;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC7BR,OAAA;MAAAG,QAAA,GAAG,SAAO,EAACD,KAAK,CAACQ,KAAK;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC3BR,OAAA;MAAQW,OAAO,EAAEC,eAAgB;MAAAT,QAAA,EAC9BU,SAAS,GAAG,QAAQ,GAAG;IAAM;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACvB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAACM,EAAA,GAbQb,KAAK;AAed,eAAeA,KAAK;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}