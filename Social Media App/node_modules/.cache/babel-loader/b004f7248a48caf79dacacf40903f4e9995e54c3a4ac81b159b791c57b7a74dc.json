{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(0);\n  const [likedBy, setLikedBy] = useState(0);\n  const [authorId, setAuthorId] = useState(null);\n  console.log(authorId);\n  console.log(likedBy);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked[0].likes);\n        setLikedBy(blogsWithLiked.liked_by);\n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n\n  //   const handleLikeClick = (blogId) => {\n  //     const index = blogs.findIndex((blog) => blog.id === blogId);\n  //     const blogToUpdate = { ...blogs[index] };\n\n  //     if (blogToUpdate.liked || blogToUpdate.author == authorId) {\n  //       // If the blog post is already liked or the author is not the current user,\n  //       // don't decrease the like count\n  //       if (blogToUpdate.likes > countLikes) {\n  //         blogToUpdate.likes--;\n  //         setCountLikes(countLikes - 1);\n  //       }\n  //     } else {\n  //       // If the blog post is not liked and the author is the current user, increase the like count by 1\n  //       blogToUpdate.likes++;\n  //       setCountLikes(countLikes + 1);\n  //     }\n\n  //     // \n  //     // Toggle the liked state for the blog post\n  //     blogToUpdate.liked = !blogToUpdate.liked;\n\n  //     // Update the state with the new liked state and like count\n  //     const newBlogs = [...blogs];\n  //     newBlogs[index] = blogToUpdate;\n  //     setBlogs(newBlogs);\n\n  //     // Update the API with the new liked state and like count\n  //     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //       method: \"PUT\",\n  //       headers: {\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({\n\n  //           liked: blogToUpdate.liked,\n  //           likes: blogToUpdate.likes,\n\n  //       }),\n  //     })\n  //       .then((response) => {\n  //         if (!response.ok) {\n  //           throw new Error('Failed to update like state.');\n  //         }\n  //         return response.json();\n  //       })\n  //       .then((data) => console.log(data))\n  //       .catch((error) => {\n  //         console.error(error);\n  //         setError(\"Failed to update like state.\");\n  //       });\n  //   };\n\n  //   return (\n  //     <div>\n\n  //       {blogs.map((blog) => (\n  //         <div key={blog.id}>\n  //           <h2>{blog.title}</h2>\n  //           <p>{blog.content}</p>\n  //           liked by : {blog.liked_by} <br></br>\n  //           likes: <span>{blog.likes}</span>\n\n  //           {/* {blog.liked_by == blog.author ? \n  //             <div>\n  //                         <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n  //                         <FavoriteIcon color=\"error\" />\n  // </IconButton>\n\n  //                </div>\n  //             : <div>          <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n  //             <FavoriteIcon color=\"error\" />\n  // </IconButton>\n  // </div>} */}\n\n  //  { blog.liked_by !== blog.author_id ? \n  //  <div>  liked by author itself   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n  //  <FavoriteIcon color=\"error\" />\n  // </IconButton>\n  //  </div> : \n  //  <div> author didnot like   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n  //  <FavoriteIcon color=\"primary\" />\n  // </IconButton>\n  // </div> }\n\n  //           <IconButton>\n  //             <ShareIcon />\n  //           </IconButton>\n  //         </div>\n  //       ))}\n\n  //     </div>\n  //   );\n  // }\n\n  const handleLikeClick = blogId => {\n    const blogToUpdate = blogs.find(blog => blog.id === blogId);\n    const updatedBlog = {\n      ...blogToUpdate,\n      likes: blogToUpdate.likes + (blogToUpdate.liked_by.includes(userId) ? -1 : 1),\n      liked_by: blogToUpdate.liked_by.includes(userId) ? blogToUpdate.liked_by.filter(id => id !== userId) : [...blogToUpdate.liked_by, userId]\n    };\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedBlog)\n    }).then(response => response.json()).then(data => {\n      const updatedBlogs = blogs.map(blog => blog.id === data.id ? data : blog);\n      setBlogs(updatedBlogs);\n    }).catch(error => console.error(error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: blog.likes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLikeClick(blog.id),\n        children: blog.liked_by.includes(userId) ? \"Dislike\" : \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 5\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 3\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 3\n  }, this);\n}\n_s(Likes, \"Uww/hXRTpahCX/g0/D7Hc9oZIWY=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","countLikes","setCountLikes","likedBy","setLikedBy","authorId","setAuthorId","console","log","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","liked","likes","liked_by","author","handleLikeClick","blogId","blogToUpdate","find","id","updatedBlog","includes","userId","filter","method","body","JSON","stringify","then","updatedBlogs","catch","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","onClick","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(0);\n  const [likedBy, setLikedBy] = useState(0);\n  const [authorId, setAuthorId] = useState(null);\n\n  console.log(authorId);\n  console.log(likedBy);\n\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        \n        setCountLikes(blogsWithLiked[0].likes);\n        setLikedBy(blogsWithLiked.liked_by);\n        \n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n  \n//   const handleLikeClick = (blogId) => {\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[index] };\n  \n//     if (blogToUpdate.liked || blogToUpdate.author == authorId) {\n//       // If the blog post is already liked or the author is not the current user,\n//       // don't decrease the like count\n//       if (blogToUpdate.likes > countLikes) {\n//         blogToUpdate.likes--;\n//         setCountLikes(countLikes - 1);\n//       }\n//     } else {\n//       // If the blog post is not liked and the author is the current user, increase the like count by 1\n//       blogToUpdate.likes++;\n//       setCountLikes(countLikes + 1);\n//     }\n  \n//     // \n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n  \n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[index] = blogToUpdate;\n//     setBlogs(newBlogs);\n  \n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n    \n//           liked: blogToUpdate.liked,\n//           likes: blogToUpdate.likes,\n    \n\n//       }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to update like state.');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n  \n//   return (\n//     <div>\n    \n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           liked by : {blog.liked_by} <br></br>\n//           likes: <span>{blog.likes}</span>\n          \n//           {/* {blog.liked_by == blog.author ? \n//             <div>\n//                         <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//                         <FavoriteIcon color=\"error\" />\n// </IconButton>\n\n//                </div>\n//             : <div>          <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//             <FavoriteIcon color=\"error\" />\n// </IconButton>\n// </div>} */}\n\n//  { blog.liked_by !== blog.author_id ? \n//  <div>  liked by author itself   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//  <FavoriteIcon color=\"error\" />\n// </IconButton>\n//  </div> : \n//  <div> author didnot like   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//  <FavoriteIcon color=\"primary\" />\n// </IconButton>\n// </div> }\n\n//           <IconButton>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       ))}\n\n//     </div>\n//   );\n// }\n\n\nconst handleLikeClick = (blogId) => {\n  const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n  const updatedBlog = {\n    ...blogToUpdate,\n    likes: blogToUpdate.likes + (blogToUpdate.liked_by.includes(userId) ? -1 : 1),\n    liked_by: blogToUpdate.liked_by.includes(userId)\n      ? blogToUpdate.liked_by.filter((id) => id !== userId)\n      : [...blogToUpdate.liked_by, userId],\n  };\n  fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(updatedBlog),\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      const updatedBlogs = blogs.map((blog) =>\n        blog.id === data.id ? data : blog\n      );\n      setBlogs(updatedBlogs);\n    })\n    .catch((error) => console.error(error));\n};\n\nreturn(\n  <div>\n    {blogs.map((blog) => (\n  <div key={blog.id}>\n    <h2>{blog.title}</h2>\n    <p>{blog.content}</p>\n    <span>{blog.likes}</span>\n    <button onClick={() => handleLikeClick(blog.id)}>\n      {blog.liked_by.includes(userId) ? \"Dislike\" : \"Like\"}\n    </button>\n  </div>\n))}\n\n  </div>\n)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}