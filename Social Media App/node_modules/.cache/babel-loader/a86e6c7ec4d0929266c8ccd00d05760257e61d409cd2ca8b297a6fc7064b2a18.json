{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(15);\n  useEffect(() => {\n    //   const fetchBlogs = async () => {\n    //     try {\n    //       const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n    //         headers: {\n    //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n    //         },\n    //       });\n\n    //       const data = await response.json();\n\n    //       // Initialize liked state for each blog post\n    //       const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n    //       setBlogs(blogsWithLiked);\n    //       setCountLikes(blogsWithLiked[0].likes);\n    //     } catch (error) {\n    //       console.error(error);\n    //       setError(\"Failed to fetch blog posts.\");\n    //     }\n    //   };\n\n    //   fetchBlogs();\n    // }, []);\n\n    const fetchBlogs = async () => {\n      try {\n        const userId = localStorage.getItem(\"userId\");\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => {\n          const likedByUser = blog.liked_by.includes(parseInt(userId));\n          return {\n            ...blog,\n            liked: likedByUser\n          };\n        });\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked[0].likes);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n\n  // const handleLikeClick = (blogId) => {\n  //   const index = blogs.findIndex((blog) => blog.id === blogId);\n  //   const blogToUpdate = { ...blogs[index] };\n\n  //   if (blogToUpdate.liked) {\n  //     // If the blog post is already liked, decrease the like count by 1\n  //     blogToUpdate.likes--;\n  //     setCountLikes(countLikes - 1);\n  //   } else {\n  //     // If the blog post is not liked, increase the like count by 1\n  //     blogToUpdate.likes++;\n  //     setCountLikes(countLikes + 1);\n  //   }\n\n  //   // Toggle the liked state for the blog post\n  //   blogToUpdate.liked = !blogToUpdate.liked;\n\n  //   // Update the state with the new liked state and like count\n  //   const newBlogs = [...blogs];\n  //   newBlogs[index] = blogToUpdate;\n  //   setBlogs(newBlogs);\n\n  //   // Update the API with the new liked state and like count\n  //   fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       liked: blogToUpdate.liked,\n  //       likes: blogToUpdate.likes,\n  //     }),\n  //   })\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error('Failed to update like state.');\n  //       }\n  //       return response.json();\n  //     })\n  //     .then((data) => console.log(data))\n  //     .catch((error) => {\n  //       console.error(error);\n  //       setError(\"Failed to update like state.\");\n  //     });\n  // };\n  const handleLikeClick = blogId => {\n    const index = blogs.findIndex(blog => blog.id === blogId);\n    const blogToUpdate = {\n      ...blogs[index]\n    };\n    if (blogToUpdate.liked) {\n      // If the blog post is already liked, do nothing\n      return;\n    }\n    if (blogToUpdate.likes <= countLikes) {\n      // If the blog post is not liked, increase the like count by 1\n      blogToUpdate.likes++;\n    } else {\n      // If the blog post is already liked, decrease the like count by 1\n      blogToUpdate.likes--;\n    }\n\n    // Toggle the liked state for the blog post\n    blogToUpdate.liked = true;\n\n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[index] = blogToUpdate;\n    setBlogs(newBlogs);\n\n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        liked_by: [...blogToUpdate.liked_by, parseInt(localStorage.getItem(\"userId\"))],\n        likes: blogToUpdate.likes\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to update like state.');\n      }\n      return response.json();\n    }).then(data => console.log(data)).catch(error => {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }, this), blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: blog.likes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => handleLikeClick(blog.id),\n        children: blog.liked ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 60\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"jGbnycFaEJvttjI/yrcKZQX4nuU=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","countLikes","setCountLikes","fetchBlogs","userId","localStorage","getItem","response","fetch","headers","Authorization","data","json","blogsWithLiked","map","blog","likedByUser","liked_by","includes","parseInt","liked","likes","console","handleLikeClick","blogId","index","findIndex","id","blogToUpdate","newBlogs","method","body","JSON","stringify","then","ok","Error","log","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","title","content","onClick","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(15);\n\n  useEffect(() => {\n  //   const fetchBlogs = async () => {\n  //     try {\n  //       const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n  //         headers: {\n  //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         },\n  //       });\n\n  //       const data = await response.json();\n\n  //       // Initialize liked state for each blog post\n  //       const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n  //       setBlogs(blogsWithLiked);\n  //       setCountLikes(blogsWithLiked[0].likes);\n  //     } catch (error) {\n  //       console.error(error);\n  //       setError(\"Failed to fetch blog posts.\");\n  //     }\n  //   };\n\n  //   fetchBlogs();\n  // }, []);\n\n  const fetchBlogs = async () => {\n    try {\n      const userId = localStorage.getItem(\"userId\");\n  \n      const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n      });\n  \n      const data = await response.json();\n  \n      // Initialize liked state for each blog post\n      const blogsWithLiked = data.map((blog) => {\n        const likedByUser = blog.liked_by.includes(parseInt(userId));\n        return { ...blog, liked: likedByUser };\n      });\n  \n      setBlogs(blogsWithLiked);\n      setCountLikes(blogsWithLiked[0].likes);\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to fetch blog posts.\");\n    }\n  };\n      fetchBlogs();\n  }, []);\n  \n  // const handleLikeClick = (blogId) => {\n  //   const index = blogs.findIndex((blog) => blog.id === blogId);\n  //   const blogToUpdate = { ...blogs[index] };\n  \n  //   if (blogToUpdate.liked) {\n  //     // If the blog post is already liked, decrease the like count by 1\n  //     blogToUpdate.likes--;\n  //     setCountLikes(countLikes - 1);\n  //   } else {\n  //     // If the blog post is not liked, increase the like count by 1\n  //     blogToUpdate.likes++;\n  //     setCountLikes(countLikes + 1);\n  //   }\n  \n  //   // Toggle the liked state for the blog post\n  //   blogToUpdate.liked = !blogToUpdate.liked;\n  \n  //   // Update the state with the new liked state and like count\n  //   const newBlogs = [...blogs];\n  //   newBlogs[index] = blogToUpdate;\n  //   setBlogs(newBlogs);\n  \n  //   // Update the API with the new liked state and like count\n  //   fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //     method: \"PUT\",\n  //     headers: {\n  //       Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       liked: blogToUpdate.liked,\n  //       likes: blogToUpdate.likes,\n  //     }),\n  //   })\n  //     .then((response) => {\n  //       if (!response.ok) {\n  //         throw new Error('Failed to update like state.');\n  //       }\n  //       return response.json();\n  //     })\n  //     .then((data) => console.log(data))\n  //     .catch((error) => {\n  //       console.error(error);\n  //       setError(\"Failed to update like state.\");\n  //     });\n  // };\n  const handleLikeClick = (blogId) => {\n    const index = blogs.findIndex((blog) => blog.id === blogId);\n    const blogToUpdate = { ...blogs[index] };\n  \n    if (blogToUpdate.liked) {\n      // If the blog post is already liked, do nothing\n      return;\n    }\n  \n    if (blogToUpdate.likes <= countLikes) {\n      // If the blog post is not liked, increase the like count by 1\n      blogToUpdate.likes++;\n    } else {\n      // If the blog post is already liked, decrease the like count by 1\n      blogToUpdate.likes--;\n    }\n  \n    // Toggle the liked state for the blog post\n    blogToUpdate.liked = true;\n  \n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[index] = blogToUpdate;\n    setBlogs(newBlogs);\n  \n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        liked_by: [...blogToUpdate.liked_by, parseInt(localStorage.getItem(\"userId\"))],\n        likes: blogToUpdate.likes,\n      }),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to update like state.');\n        }\n        return response.json();\n      })\n      .then((data) => console.log(data))\n      .catch((error) => {\n        console.error(error);\n        setError(\"Failed to update like state.\");\n      });\n  };\n    \n  \n  return (\n    <div>\n      {error && <p>{error}</p>}\n      {blogs.map((blog) => (\n        <div key={blog.id}>\n          <h2>{blog.title}</h2>\n          <p>{blog.content}</p>\n          <span>{blog.likes}</span>\n          <IconButton onClick={() => handleLikeClick(blog.id)}>\n            {blog.liked ? <FavoriteIcon color=\"error\" /> : <FavoriteIcon />}\n          </IconButton>\n        \n          <IconButton>\n            <ShareIcon />\n          </IconButton>\n        </div>\n      ))}\n\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}