{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n\n// function Comments () {\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           const blogLikes = data.map((blog) => {\n//             return {\n//               id: blog.id,\n//               likes: blog.likes,\n//               liked_state: blog.liked_state,\n//               title: blog.title,\n//               image: blog.image,\n//               content: blog.content,\n//               authorName: blog.authorName,\n//               created_at: blog.created_at,\n//               updated_at: blog.updated_at,\n//             };\n//           });\n\n//           // Store the mapped data in a variable\n//           const mappedData = blogLikes;\n\n//           setBlogs(mappedData);\n//           setLikes(mappedData.map((blog) => blog.likes));\n//           setLiked(mappedData.map((blog) => blog.liked_state));\n\n//           console.log(mappedData);\n//           setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n\n//           // Call the fetchComments function and pass the mapped data\n//           fetchComments(mappedData);\n//         } else {\n//           console.error(\"Failed to fetch likes\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     const fetchComments = async (mappedData) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//           method: \"GET\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           console.log(\"comments are \", data);\n//           setComments(data);\n\n//           // Use the mapped data and comments data together\n//           // Combine the mapped data and comments data as needed\n//           const combinedData = {\n//             mappedData: mappedData,\n//             commentsData: data,\n//           };\n\n//           // Process the combined data as needed\n//           console.log(\"Combined data:\", combinedData);\n//         } else {\n//           console.error(\"Failed to fetch comments\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error:\", error);\n//       }\n//     };\n\n//     fetchLikes();\n//   }, []);\n\n//   return (\n//   <div>\n//   {combinedData.mappedData.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>Likes: {blog.likes}</p>\n//       {/* Render other properties of the blog as needed */}\n//     </div>\n//   ))}\n//   {combinedData.commentsData.map((comment) => (\n//     <div key={comment.id}>\n//       <h3>{comment.title}</h3>\n//       <p>{comment.comment_content}</p>\n//       {/* Render other properties of the comment as needed */}\n//     </div>\n//   ))}\n// </div>\n// );\n\n// };\n\n// export default Comments;\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comments() {\n  _s();\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    fetchComments();\n  }, []);\n  const fetchComments = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api/blog/comments/', {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"comments are \", data);\n        setComments(data);\n      } else {\n        console.error('Failed to fetch comments');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"comments: \", comment.comment_content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"commented_by: \", comment.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState([]);\n//   const [combinedData, setCombinedData] = useState([])\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const likesResponse = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//       });\n//       const commentsResponse = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//         method: \"GET\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//       });\n\n//       if (likesResponse.ok && commentsResponse.ok) {\n//         const likesData = await likesResponse.json();\n//         const commentsData = await commentsResponse.json();\n\n//         const mappedData = likesData.map((blog) => ({\n//           id: blog.id,\n//           likes: blog.likes,\n//           liked_state: blog.liked_state,\n//           title: blog.title,\n//           image: blog.image,\n//           content: blog.content,\n//           authorName: blog.authorName,\n//           created_at: blog.created_at,\n//           updated_at: blog.updated_at,\n//         }));\n\n//         const combinedData = mappedData.map((blog) => {\n//           const comment = commentsData.find((c) => c.blogId === blog.id);\n//           return {\n//             ...blog,\n//             comment: comment ? comment.comment_content : null,\n//           };\n//         });\n\n//         setCombinedData(\"combined data --->\", combinedData);\n//         setBlogs(mappedData);\n//         setLikes(mappedData.map((blog) => blog.likes));\n//         setLiked(mappedData.map((blog) => blog.liked_state));\n//         setComments(commentsData);\n//       } else {\n//         console.error(\"Failed to fetch data\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {combinedData.map((blog) => (\n//         <div key={blog.id}>\n//           <h3>{blog.title}</h3>\n//           <p>Likes: {blog.likes}</p>\n//           <p>Comment: {blog.comment}</p>   {blog.comment && <p>Comment: {blog.comment}</p>}\n//           {/* Render other properties of the blog as needed */}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n_s(Comments, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Comments","_s","comments","setComments","fetchComments","response","fetch","method","headers","Authorization","localStorage","getItem","ok","data","json","console","log","error","children","map","comment","comment_content","fileName","_jsxFileName","lineNumber","columnNumber","author","id","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// function Comments () {\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         if (response.ok) {\n//           const data = await response.json();\n//           const blogLikes = data.map((blog) => {\n//             return {\n//               id: blog.id,\n//               likes: blog.likes,\n//               liked_state: blog.liked_state,\n//               title: blog.title,\n//               image: blog.image,\n//               content: blog.content,\n//               authorName: blog.authorName,\n//               created_at: blog.created_at,\n//               updated_at: blog.updated_at,\n//             };\n//           });\n  \n//           // Store the mapped data in a variable\n//           const mappedData = blogLikes;\n  \n//           setBlogs(mappedData);\n//           setLikes(mappedData.map((blog) => blog.likes));\n//           setLiked(mappedData.map((blog) => blog.liked_state));\n  \n//           console.log(mappedData);\n//           setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n  \n//           // Call the fetchComments function and pass the mapped data\n//           fetchComments(mappedData);\n//         } else {\n//           console.error(\"Failed to fetch likes\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n  \n//     const fetchComments = async (mappedData) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//           method: \"GET\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         if (response.ok) {\n//           const data = await response.json();\n//           console.log(\"comments are \", data);\n//           setComments(data);\n  \n//           // Use the mapped data and comments data together\n//           // Combine the mapped data and comments data as needed\n//           const combinedData = {\n//             mappedData: mappedData,\n//             commentsData: data,\n//           };\n  \n//           // Process the combined data as needed\n//           console.log(\"Combined data:\", combinedData);\n//         } else {\n//           console.error(\"Failed to fetch comments\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error:\", error);\n//       }\n//     };\n  \n//     fetchLikes();\n//   }, []);\n  \n\n//   return (\n//   <div>\n//   {combinedData.mappedData.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>Likes: {blog.likes}</p>\n//       {/* Render other properties of the blog as needed */}\n//     </div>\n//   ))}\n//   {combinedData.commentsData.map((comment) => (\n//     <div key={comment.id}>\n//       <h3>{comment.title}</h3>\n//       <p>{comment.comment_content}</p>\n//       {/* Render other properties of the comment as needed */}\n//     </div>\n//   ))}\n// </div>\n// );\n\n// };\n\n// export default Comments;\n\nimport { useState, useEffect } from \"react\";\n\nexport default function Comments() {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n\n  const fetchComments = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api/blog/comments/', {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n    \n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"comments are \", data);\n        setComments(data);\n      } else {\n        console.error('Failed to fetch comments');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      {comments.map((comment) => (\n        <div key={comment.id}>\n   \n          <p>comments: {comment.comment_content}</p>\n          <p>commented_by: {comment.author}</p>\n        </div>\n      ))}\n    </div>\n  );\n      }\n\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState([]);\n//   const [combinedData, setCombinedData] = useState([])\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     try {\n//       const likesResponse = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//       });\n//       const commentsResponse = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//         method: \"GET\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//       });\n  \n//       if (likesResponse.ok && commentsResponse.ok) {\n//         const likesData = await likesResponse.json();\n//         const commentsData = await commentsResponse.json();\n  \n//         const mappedData = likesData.map((blog) => ({\n//           id: blog.id,\n//           likes: blog.likes,\n//           liked_state: blog.liked_state,\n//           title: blog.title,\n//           image: blog.image,\n//           content: blog.content,\n//           authorName: blog.authorName,\n//           created_at: blog.created_at,\n//           updated_at: blog.updated_at,\n//         }));\n  \n//         const combinedData = mappedData.map((blog) => {\n//           const comment = commentsData.find((c) => c.blogId === blog.id);\n//           return {\n//             ...blog,\n//             comment: comment ? comment.comment_content : null,\n//           };\n//         });\n  \n//         setCombinedData(\"combined data --->\", combinedData);\n//         setBlogs(mappedData);\n//         setLikes(mappedData.map((blog) => blog.likes));\n//         setLiked(mappedData.map((blog) => blog.liked_state));\n//         setComments(commentsData);\n//       } else {\n//         console.error(\"Failed to fetch data\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//     }\n//   };\n  \n\n//   return (\n//     <div>\n//       {combinedData.map((blog) => (\n//         <div key={blog.id}>\n//           <h3>{blog.title}</h3>\n//           <p>Likes: {blog.likes}</p>\n//           <p>Comment: {blog.comment}</p>   {blog.comment && <p>Comment: {blog.comment}</p>}\n//           {/* Render other properties of the blog as needed */}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}