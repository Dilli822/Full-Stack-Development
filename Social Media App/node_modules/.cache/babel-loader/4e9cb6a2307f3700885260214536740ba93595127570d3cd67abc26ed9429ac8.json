{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/update.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react'\n\n// // export default function UpdateBlog() {\n// //   const [blogs, setBlogs] = useState([])\n// //   const [loading, setLoading] = useState(true)\n\n// //   const [selectedBlogId, setSelectedBlogId] = useState('')\n// //   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n// //   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n// //   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n// //   useEffect(() => {\n// //     fetch('http://localhost:8000/api/blog/', {\n// //       headers: {\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       }\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       setBlogs(data)\n// //       setLoading(false)\n// //     })\n// //     .catch(error => console.error(error))\n// //   }, [])\n\n// //   const handleUpdate = () => {\n// //     const updatedBlog = {\n// //       id: selectedBlogId,\n// //       title: updatedBlogTitle || blogs.find(blog => blog.id === selectedBlogId).title,\n// //       content: updatedBlogContent || blogs.find(blog => blog.id === selectedBlogId).content,\n// //       authorName: updatedBlogAuthorName || blogs.find(blog => blog.id === selectedBlogId).authorName\n// //     }\n\n// //     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n// //       method: 'PUT',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       },\n// //       body: JSON.stringify(updatedBlog)\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       const index = blogs.findIndex(blog => blog.id === data.id)\n// //       const newBlogs = [...blogs]\n// //       newBlogs[index] = data\n// //       setBlogs(newBlogs)\n// //       setSelectedBlogId('')\n// //       setUpdatedBlogTitle('')\n// //       setUpdatedBlogContent('')\n// //       setUpdatedBlogAuthorName('')\n// //     })\n// //     .catch(error => console.error(error))\n// //   }\n\n// //   if (loading) {\n// //     return <p>Loading...</p>\n// //   }\n\n// //   return (\n// //     <div>\n// //       <h1>Blog List</h1>\n// //       <ul>\n// //         {blogs.map(blog => (\n// //           <li key={blog.id}>\n// //             <h2>{blog.title}</h2>\n// //             <p>{blog.content}</p>\n// //             <p>Author: {blog.authorName}</p>\n// //             <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n// //           </li>\n// //         ))}\n// //       </ul>\n// //       {selectedBlogId && (\n// //   <div>\n// //     <h2>Edit Blog</h2>\n// //     {blogs.map(blog => {\n// //       if (blog.id === selectedBlogId) {\n// //         return (\n// //           <div key={blog.id}>\n// //             <label>\n// //               Title:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogTitle || blog.title}\n// //                 onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Content:\n// //               <textarea\n// //                 value={updatedBlogContent || blog.content}\n// //                 onChange={(event) => setUpdatedBlogContent(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Author Name:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogAuthorName || blog.authorName}\n// //                 onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //           </div>\n// //         );\n// //       } else {\n// //         return null;\n// //       }\n// //     })}\n// //     <button onClick={handleUpdate}>Save Changes</button>\n// //     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n// //   </div>\n// // )}\n\n// // </div>\n// // )}\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const UpdateBlog = () => {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const result = await axios.get('http://localhost:8000/api/blog/', {\n//         headers: {\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       });\n//       setBlogs(result.data);\n//     };\n//     fetchData();\n//   }, []);\n\n//   // const handleUpdate = () => {\n//   //   const updatedBlog = {\n//   //     id: selectedBlogId,\n//   //     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//   //     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//   //     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   //   }\n\n//   //   fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//   //     method: 'PUT',\n//   //     headers: {\n//   //       'Content-Type': 'application/json',\n//   //       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //     },\n//   //     body: JSON.stringify(updatedBlog)\n//   //   })\n//   //   .then(response => response.json())\n//   //   .then(data => {\n//   //     const index = blogs.findIndex(blog => blog.id === data.id)\n//   //     const newBlogs = [...blogs]\n//   //     newBlogs[index] = data\n//   //     setBlogs(newBlogs)\n//   //     setSelectedBlogId('')\n//   //     setUpdatedBlogTitle(undefined)\n//   //     setUpdatedBlogContent(undefined)\n//   //     setUpdatedBlogAuthorName(undefined)\n//   //   })\n//   //   .catch(error => console.error(error))\n//   // }\n\n//   // const handleDelete = (id) => {\n//   //   if (window.confirm('Are you sure you want to delete this post?')) {\n//   //     fetch(`http://localhost:8000/api/blog/${id}/`, {\n//   //       method: 'DELETE',\n//   //       headers: {\n//   //         'Content-Type': 'application/json',\n//   //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //       }\n//   //     })\n//   //     .then(response => {\n//   //       if (response.ok) {\n//   //         setBlogs(blogs.filter(blog => blog.id !== id))\n//   //       } else {\n//   //         throw new Error('Delete failed')\n//   //       }\n//   //     })\n//   //     .catch(error => {\n//   //       console.error(error)\n//   //     })\n//   //   }\n//   // }\n\n//   return (\n//     <div>\n//       {/* <ul>\n//         {blogs.map(blog => (\n//           <li key={blog.id}>\n//             <div>\n//               <h2>{blog.title}</h2>\n//               <p>{blog.content}</p>\n//               <p>Author: {blog.authorName}</p>\n//               <button onClick={() => setSelectedBlogId(blog.id)}>Update Blog</button>\n//               <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul> */}\n\n//       {/* {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n\n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )} */}\n//       </div>\n//         );\n// }\n// export default UpdateBlog;\n\n// import React, { useState, useEffect } from 'react'\n// function Update() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//   const [newBlogImage, setNewBlogImage] = useState(null);\n//   const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n//   const [imageUrl, setImageUrl] = useState(null);\n\n// const handleUpdate = () => {\n//   const updatedBlog = {\n//     id: selectedBlogId,\n//     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   }\n\n//   const formData = new FormData();\n//   formData.append('title', updatedBlog.title);\n//   formData.append('content', updatedBlog.content);\n//   formData.append('authorName', updatedBlog.authorName);\n//   formData.append('image', updatedBlogImage);\n\n//   fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n//     method: 'PUT',\n//     headers: {\n//       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//     },\n//     body: formData\n//   })\n//   .then(response => response.json())\n//   .then(data => {\n//     const index = blogs.findIndex(blog => blog.id === data.id)\n//     const newBlogs = [...blogs]\n//     newBlogs[index] = data\n//     setBlogs(newBlogs)\n//     setSelectedBlogId('')\n//     setUpdatedBlogTitle(undefined)\n//     setUpdatedBlogContent(undefined)\n//     setUpdatedBlogAuthorName(undefined)\n//     setUpdatedBlogImage(null)\n//   })\n//   .catch(error => console.error(error))\n// }\n\n// return(\n//   <div>\n//           {/* <UpdateBlog/> */}\n//           {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n\n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <label htmlFor=\"updatedBlogImage\">Image:</label>\n//             <input type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={event => setUpdatedBlogImage(event.target.files[0])} />\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )}\n\n//   </div>\n// )\n\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Update() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [selectedBlogId, setSelectedBlogId] = useState('');\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n  const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  const [created_at, setCreatedAt] = useState(\"\");\n  const [newBlogImage, setNewBlogImage] = useState(null);\n  const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  useEffect(() => {\n    // Fetch blogs data and update state\n    fetch('http://localhost:8000/api/blog/', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    }).then(response => response.json()).then(data => setBlogs(data)).catch(error => console.error(error));\n  }, []);\n  const handleUpdate = () => {\n    const updatedBlog = {\n      id: selectedBlogId,\n      title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n      content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n      authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n    };\n    const formData = new FormData();\n    formData.append('title', updatedBlog.title);\n    formData.append('content', updatedBlog.content);\n    formData.append('authorName', updatedBlog.authorName);\n\n    // Check if user has uploaded a new image, if not, use the previously saved image\n    if (updatedBlogImage === null) {\n      formData.append('image', blogs.find(blog => blog.id === selectedBlogId).image);\n    } else {\n      formData.append('image', updatedBlogImage);\n    }\n    fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      body: formData\n    }).then(response => response.json()).then(data => {\n      const index = blogs.findIndex(blog => blog.id === data.id);\n      const newBlogs = [...blogs];\n      newBlogs[index] = data;\n      setBlogs(newBlogs);\n      setSelectedBlogId('');\n      setUpdatedBlogTitle(undefined);\n      setUpdatedBlogContent(undefined);\n      setUpdatedBlogAuthorName(undefined);\n      setUpdatedBlogImage(null);\n      setImageUrl(null);\n    }).catch(error => console.error(error));\n  };\n\n  // Check if there is a previously saved image for the record and prepopulate the image upload field\n  useEffect(() => {\n    if (selectedBlogId !== '') {\n      setImageUrl(blogs.find(blog => blog.id === selectedBlogId).image);\n    }\n  }, [selectedBlogId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [selectedBlogId !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Update Blog \\\"\", blogs.find(blog => blog.id === selectedBlogId).title, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"blog-title\",\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"blog-title\",\n          value: updatedBlogTitle !== undefined ? updatedBlogTitle : blogs.find(blog => blog.id === selectedBlogId).title,\n          onChange: e => setUpdatedBlogTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"blog-content\",\n          children: \"Content:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"blog-content\",\n          value: updatedBlogContent !== undefined ? updatedBlogContent : blogs.find(blog => blog.id === selectedBlogId).content,\n          onChange: e => setUpdatedBlogContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"blog-author-name\",\n          children: \"Author Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"blog-author-name\",\n          value: updatedBlogAuthorName !== undefined ? updatedBlogAuthorName : blogs.find(blog => blog.id === selectedBlogId).authorName,\n          onChange: e => setUpdatedBlogAuthorName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"blog-image\",\n          children: \"Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 8\n        }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          alt: \"Blog\",\n          width: \"100\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"blog-image\",\n          accept: \"image/*\",\n          onChange: e => setUpdatedBlogImage(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBlogId(''),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blog List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 1\n    }, this), blogs.sort((a, b) => b.id - a.id).map(blog => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8000${blog.image}`,\n        style: {\n          width: \"450px\",\n          maxWidth: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", blog.authorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Published Date: \", blog.created_at]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Updated Date: \", blog.updated_at]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 5\n      }, this), created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Blog Created at Standard: \", created_at]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBlogId(blog.id),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDelete(blog.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 5\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 3\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n}\n_s(Update, \"4SI+xFvIVI/wJOWZOHnUKfgsQAg=\");\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Update","_s","blogs","setBlogs","selectedBlogId","setSelectedBlogId","updatedBlogTitle","setUpdatedBlogTitle","undefined","updatedBlogContent","setUpdatedBlogContent","updatedBlogAuthorName","setUpdatedBlogAuthorName","created_at","setCreatedAt","newBlogImage","setNewBlogImage","updatedBlogImage","setUpdatedBlogImage","imageUrl","setImageUrl","fetch","method","headers","localStorage","getItem","then","response","json","data","catch","error","console","handleUpdate","updatedBlog","id","title","find","blog","content","authorName","formData","FormData","append","image","body","index","findIndex","newBlogs","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","value","onChange","e","target","src","alt","width","height","accept","files","onClick","sort","a","b","map","style","maxWidth","updated_at","handleDelete","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/update.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react'\n\n// // export default function UpdateBlog() {\n// //   const [blogs, setBlogs] = useState([])\n// //   const [loading, setLoading] = useState(true)\n\n// //   const [selectedBlogId, setSelectedBlogId] = useState('')\n// //   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n// //   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n// //   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n// //   useEffect(() => {\n// //     fetch('http://localhost:8000/api/blog/', {\n// //       headers: {\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       }\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       setBlogs(data)\n// //       setLoading(false)\n// //     })\n// //     .catch(error => console.error(error))\n// //   }, [])\n\n// //   const handleUpdate = () => {\n// //     const updatedBlog = {\n// //       id: selectedBlogId,\n// //       title: updatedBlogTitle || blogs.find(blog => blog.id === selectedBlogId).title,\n// //       content: updatedBlogContent || blogs.find(blog => blog.id === selectedBlogId).content,\n// //       authorName: updatedBlogAuthorName || blogs.find(blog => blog.id === selectedBlogId).authorName\n// //     }\n  \n// //     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n// //       method: 'PUT',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       },\n// //       body: JSON.stringify(updatedBlog)\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       const index = blogs.findIndex(blog => blog.id === data.id)\n// //       const newBlogs = [...blogs]\n// //       newBlogs[index] = data\n// //       setBlogs(newBlogs)\n// //       setSelectedBlogId('')\n// //       setUpdatedBlogTitle('')\n// //       setUpdatedBlogContent('')\n// //       setUpdatedBlogAuthorName('')\n// //     })\n// //     .catch(error => console.error(error))\n// //   }\n\n// //   if (loading) {\n// //     return <p>Loading...</p>\n// //   }\n\n// //   return (\n// //     <div>\n// //       <h1>Blog List</h1>\n// //       <ul>\n// //         {blogs.map(blog => (\n// //           <li key={blog.id}>\n// //             <h2>{blog.title}</h2>\n// //             <p>{blog.content}</p>\n// //             <p>Author: {blog.authorName}</p>\n// //             <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n// //           </li>\n// //         ))}\n// //       </ul>\n// //       {selectedBlogId && (\n// //   <div>\n// //     <h2>Edit Blog</h2>\n// //     {blogs.map(blog => {\n// //       if (blog.id === selectedBlogId) {\n// //         return (\n// //           <div key={blog.id}>\n// //             <label>\n// //               Title:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogTitle || blog.title}\n// //                 onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Content:\n// //               <textarea\n// //                 value={updatedBlogContent || blog.content}\n// //                 onChange={(event) => setUpdatedBlogContent(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Author Name:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogAuthorName || blog.authorName}\n// //                 onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //           </div>\n// //         );\n// //       } else {\n// //         return null;\n// //       }\n// //     })}\n// //     <button onClick={handleUpdate}>Save Changes</button>\n// //     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n// //   </div>\n// // )}\n\n// // </div>\n// // )}\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const UpdateBlog = () => {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const result = await axios.get('http://localhost:8000/api/blog/', {\n//         headers: {\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       });\n//       setBlogs(result.data);\n//     };\n//     fetchData();\n//   }, []);\n\n//   // const handleUpdate = () => {\n//   //   const updatedBlog = {\n//   //     id: selectedBlogId,\n//   //     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//   //     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//   //     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   //   }\n        \n//   //   fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//   //     method: 'PUT',\n//   //     headers: {\n//   //       'Content-Type': 'application/json',\n//   //       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //     },\n//   //     body: JSON.stringify(updatedBlog)\n//   //   })\n//   //   .then(response => response.json())\n//   //   .then(data => {\n//   //     const index = blogs.findIndex(blog => blog.id === data.id)\n//   //     const newBlogs = [...blogs]\n//   //     newBlogs[index] = data\n//   //     setBlogs(newBlogs)\n//   //     setSelectedBlogId('')\n//   //     setUpdatedBlogTitle(undefined)\n//   //     setUpdatedBlogContent(undefined)\n//   //     setUpdatedBlogAuthorName(undefined)\n//   //   })\n//   //   .catch(error => console.error(error))\n//   // }\n\n//   // const handleDelete = (id) => {\n//   //   if (window.confirm('Are you sure you want to delete this post?')) {\n//   //     fetch(`http://localhost:8000/api/blog/${id}/`, {\n//   //       method: 'DELETE',\n//   //       headers: {\n//   //         'Content-Type': 'application/json',\n//   //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //       }\n//   //     })\n//   //     .then(response => {\n//   //       if (response.ok) {\n//   //         setBlogs(blogs.filter(blog => blog.id !== id))\n//   //       } else {\n//   //         throw new Error('Delete failed')\n//   //       }\n//   //     })\n//   //     .catch(error => {\n//   //       console.error(error)\n//   //     })\n//   //   }\n//   // }\n\n//   return (\n//     <div>\n//       {/* <ul>\n//         {blogs.map(blog => (\n//           <li key={blog.id}>\n//             <div>\n//               <h2>{blog.title}</h2>\n//               <p>{blog.content}</p>\n//               <p>Author: {blog.authorName}</p>\n//               <button onClick={() => setSelectedBlogId(blog.id)}>Update Blog</button>\n//               <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul> */}\n\n//       {/* {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n          \n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )} */}\n//       </div>\n//         );\n// }\n// export default UpdateBlog;\n\n\n\n// import React, { useState, useEffect } from 'react'\n// function Update() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  \n//   const [newBlogImage, setNewBlogImage] = useState(null);\n//   const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n//   const [imageUrl, setImageUrl] = useState(null);\n\n// const handleUpdate = () => {\n//   const updatedBlog = {\n//     id: selectedBlogId,\n//     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   }\n\n//   const formData = new FormData();\n//   formData.append('title', updatedBlog.title);\n//   formData.append('content', updatedBlog.content);\n//   formData.append('authorName', updatedBlog.authorName);\n//   formData.append('image', updatedBlogImage);\n\n//   fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n//     method: 'PUT',\n//     headers: {\n//       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//     },\n//     body: formData\n//   })\n//   .then(response => response.json())\n//   .then(data => {\n//     const index = blogs.findIndex(blog => blog.id === data.id)\n//     const newBlogs = [...blogs]\n//     newBlogs[index] = data\n//     setBlogs(newBlogs)\n//     setSelectedBlogId('')\n//     setUpdatedBlogTitle(undefined)\n//     setUpdatedBlogContent(undefined)\n//     setUpdatedBlogAuthorName(undefined)\n//     setUpdatedBlogImage(null)\n//   })\n//   .catch(error => console.error(error))\n// }\n\n\n// return(\n//   <div>\n//           {/* <UpdateBlog/> */}\n//           {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n          \n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <label htmlFor=\"updatedBlogImage\">Image:</label>\n//             <input type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={event => setUpdatedBlogImage(event.target.files[0])} />\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )}\n\n//   </div>\n// )\n\n// }\n\n\nimport React, { useState, useEffect } from 'react';\n\nfunction Update() {\n  const [blogs, setBlogs] = useState([]);\n  const [selectedBlogId, setSelectedBlogId] = useState('');\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n  const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  const [created_at, setCreatedAt] = useState(\"\");\n  const [newBlogImage, setNewBlogImage] = useState(null);\n  const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n\n  useEffect(() => {\n    // Fetch blogs data and update state\n    fetch('http://localhost:8000/api/blog/', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      }\n    })\n      .then(response => response.json())\n      .then(data => setBlogs(data))\n      .catch(error => console.error(error))\n  }, [])\n\n  const handleUpdate = () => {\n    const updatedBlog = {\n      id: selectedBlogId,\n      title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n      content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n      authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n    }\n    const formData = new FormData();\n    formData.append('title', updatedBlog.title);\n    formData.append('content', updatedBlog.content);\n    formData.append('authorName', updatedBlog.authorName);\n\n    // Check if user has uploaded a new image, if not, use the previously saved image\n    if (updatedBlogImage === null) {\n      formData.append('image', blogs.find(blog => blog.id === selectedBlogId).image);\n    } else {\n      formData.append('image', updatedBlogImage);\n    }\n\n    fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      body: formData\n    })\n      .then(response => response.json())\n      .then(data => {\n        const index = blogs.findIndex(blog => blog.id === data.id)\n        const newBlogs = [...blogs]\n        newBlogs[index] = data\n        setBlogs(newBlogs)\n        setSelectedBlogId('')\n        setUpdatedBlogTitle(undefined)\n        setUpdatedBlogContent(undefined)\n        setUpdatedBlogAuthorName(undefined)\n        setUpdatedBlogImage(null)\n        setImageUrl(null)\n      })\n      .catch(error => console.error(error))\n  }\n\n  // Check if there is a previously saved image for the record and prepopulate the image upload field\n  useEffect(() => {\n    if (selectedBlogId !== '') {\n      setImageUrl(blogs.find(blog => blog.id === selectedBlogId).image)\n    }\n  }, [selectedBlogId])\n\n  return (\n    <div>\n\n      {selectedBlogId !== '' && (\n        <div>\n         <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n\n         <div>\n           <label htmlFor=\"blog-title\">Title:</label>\n           <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle !== undefined ? updatedBlogTitle : blogs.find(blog => blog.id === selectedBlogId).title} onChange={(e) => setUpdatedBlogTitle(e.target.value)} />\n\n           </div>\n\n           <div>\n       <label htmlFor=\"blog-content\">Content:</label>\n       <textarea id=\"blog-content\" value={updatedBlogContent !== undefined ? updatedBlogContent : blogs.find(blog => blog.id === selectedBlogId).content} onChange={(e) => setUpdatedBlogContent(e.target.value)}></textarea>\n     </div>\n\n     <div>\n       <label htmlFor=\"blog-author-name\">Author Name:</label>\n       <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName !== undefined ? updatedBlogAuthorName : blogs.find(blog => blog.id === selectedBlogId).authorName} onChange={(e) => setUpdatedBlogAuthorName(e.target.value)} />\n     </div>\n\n     <div>\n       <label htmlFor=\"blog-image\">Image:</label>\n       {imageUrl && <img src={imageUrl} alt=\"Blog\" width=\"100\" height=\"100\" />}\n       <input type=\"file\" id=\"blog-image\" accept=\"image/*\" onChange={(e) => setUpdatedBlogImage(e.target.files[0])} />\n     </div>\n\n     <button onClick={handleUpdate}>Update</button>\n     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n     \n</div>\n      )}\n\n    \n    \n  \n<h1>Blog List</h1>\n\n{blogs.sort((a,b) => b.id - a.id).map(blog => (\n  <li key={blog.id}>\n    <h2>{blog.title}</h2>\n    <img src={`http://localhost:8000${blog.image}`} style={{ width: \"450px\", maxWidth: \"100%\"}}/>\n\n    <p>{blog.content}</p>\n    <p>Author: {blog.authorName}</p>\n    <p>Published Date: {blog.created_at}</p>\n    <p>Updated Date: {blog.updated_at}</p>\n    {created_at && <p>Blog Created at Standard: {created_at}</p>}\n    <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n    <button onClick={() => handleDelete(blog.id)}>Delete</button>\n  </li>\n))}\n</div>\n  )\n}\n\nexport default Update;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAACY,SAAS,CAAC;EACnE,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAACY,SAAS,CAAC;EACvE,MAAM,CAACG,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGhB,QAAQ,CAACY,SAAS,CAAC;EAC7E,MAAM,CAACK,UAAU,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACAwB,KAAK,CAAC,iCAAiC,EAAE;MACvCC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;MACjE;IACF,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI1B,QAAQ,CAAC0B,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAE/B,cAAc;MAClBgC,KAAK,EAAE9B,gBAAgB,KAAKE,SAAS,GAAGN,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACgC,KAAK,GAAG9B,gBAAgB;MAC/GiC,OAAO,EAAE9B,kBAAkB,KAAKD,SAAS,GAAGN,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACmC,OAAO,GAAG9B,kBAAkB;MACvH+B,UAAU,EAAE7B,qBAAqB,KAAKH,SAAS,GAAGN,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACoC,UAAU,GAAG7B;IAChH,CAAC;IACD,MAAM8B,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAET,WAAW,CAACE,KAAK,CAAC;IAC3CK,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAET,WAAW,CAACK,OAAO,CAAC;IAC/CE,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAET,WAAW,CAACM,UAAU,CAAC;;IAErD;IACA,IAAIvB,gBAAgB,KAAK,IAAI,EAAE;MAC7BwB,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEzC,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACwC,KAAK,CAAC;IAChF,CAAC,MAAM;MACLH,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE1B,gBAAgB,CAAC;IAC5C;IAEAI,KAAK,CAAE,yCAAwCa,WAAW,CAACC,EAAG,GAAE,EAAE;MAChEb,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;MACjE,CAAC;MACDoB,IAAI,EAAEJ;IACR,CAAC,CAAC,CACCf,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ,MAAMiB,KAAK,GAAG5C,KAAK,CAAC6C,SAAS,CAACT,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKN,IAAI,CAACM,EAAE,CAAC;MAC1D,MAAMa,QAAQ,GAAG,CAAC,GAAG9C,KAAK,CAAC;MAC3B8C,QAAQ,CAACF,KAAK,CAAC,GAAGjB,IAAI;MACtB1B,QAAQ,CAAC6C,QAAQ,CAAC;MAClB3C,iBAAiB,CAAC,EAAE,CAAC;MACrBE,mBAAmB,CAACC,SAAS,CAAC;MAC9BE,qBAAqB,CAACF,SAAS,CAAC;MAChCI,wBAAwB,CAACJ,SAAS,CAAC;MACnCU,mBAAmB,CAAC,IAAI,CAAC;MACzBE,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC,CACDU,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACzC,CAAC;;EAED;EACAlC,SAAS,CAAC,MAAM;IACd,IAAIO,cAAc,KAAK,EAAE,EAAE;MACzBgB,WAAW,CAAClB,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACwC,KAAK,CAAC;IACnE;EACF,CAAC,EAAE,CAACxC,cAAc,CAAC,CAAC;EAEpB,oBACEL,OAAA;IAAAkD,QAAA,GAEG7C,cAAc,KAAK,EAAE,iBACpBL,OAAA;MAAAkD,QAAA,gBACClD,OAAA;QAAAkD,QAAA,GAAI,gBAAa,EAAC/C,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACgC,KAAK,EAAC,IAAC;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAE7EtD,OAAA;QAAAkD,QAAA,gBACElD,OAAA;UAAOuD,OAAO,EAAC,YAAY;UAAAL,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,eAC1CtD,OAAA;UAAOwD,IAAI,EAAC,MAAM;UAACpB,EAAE,EAAC,YAAY;UAACqB,KAAK,EAAElD,gBAAgB,KAAKE,SAAS,GAAGF,gBAAgB,GAAGJ,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACgC,KAAM;UAACqB,QAAQ,EAAGC,CAAC,IAAKnD,mBAAmB,CAACmD,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAEtM,eAENtD,OAAA;QAAAkD,QAAA,gBACJlD,OAAA;UAAOuD,OAAO,EAAC,cAAc;UAAAL,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,eAC9CtD,OAAA;UAAUoC,EAAE,EAAC,cAAc;UAACqB,KAAK,EAAE/C,kBAAkB,KAAKD,SAAS,GAAGC,kBAAkB,GAAGP,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACmC,OAAQ;UAACkB,QAAQ,EAAGC,CAAC,IAAKhD,qBAAqB,CAACgD,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAY;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClN,eAENtD,OAAA;QAAAkD,QAAA,gBACElD,OAAA;UAAOuD,OAAO,EAAC,kBAAkB;UAAAL,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,eACtDtD,OAAA;UAAOwD,IAAI,EAAC,MAAM;UAACpB,EAAE,EAAC,kBAAkB;UAACqB,KAAK,EAAE7C,qBAAqB,KAAKH,SAAS,GAAGG,qBAAqB,GAAGT,KAAK,CAACmC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAK/B,cAAc,CAAC,CAACoC,UAAW;UAACiB,QAAQ,EAAGC,CAAC,IAAK9C,wBAAwB,CAAC8C,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClO,eAENtD,OAAA;QAAAkD,QAAA,gBACElD,OAAA;UAAOuD,OAAO,EAAC,YAAY;UAAAL,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAQ,EACzClC,QAAQ,iBAAIpB,OAAA;UAAK6D,GAAG,EAAEzC,QAAS;UAAC0C,GAAG,EAAC,MAAM;UAACC,KAAK,EAAC,KAAK;UAACC,MAAM,EAAC;QAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eACvEtD,OAAA;UAAOwD,IAAI,EAAC,MAAM;UAACpB,EAAE,EAAC,YAAY;UAAC6B,MAAM,EAAC,SAAS;UAACP,QAAQ,EAAGC,CAAC,IAAKxC,mBAAmB,CAACwC,CAAC,CAACC,MAAM,CAACM,KAAK,CAAC,CAAC,CAAC;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3G,eAENtD,OAAA;QAAQmE,OAAO,EAAEjC,YAAa;QAAAgB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC9CtD,OAAA;QAAQmE,OAAO,EAAEA,CAAA,KAAM7D,iBAAiB,CAAC,EAAE,CAAE;QAAA4C,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAG3D,eAKPtD,OAAA;MAAAkD,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAEjBnD,KAAK,CAACiE,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKA,CAAC,CAAClC,EAAE,GAAGiC,CAAC,CAACjC,EAAE,CAAC,CAACmC,GAAG,CAAChC,IAAI,iBACxCvC,OAAA;MAAAkD,QAAA,gBACElD,OAAA;QAAAkD,QAAA,EAAKX,IAAI,CAACF;MAAK;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACrBtD,OAAA;QAAK6D,GAAG,EAAG,wBAAuBtB,IAAI,CAACM,KAAM,EAAE;QAAC2B,KAAK,EAAE;UAAET,KAAK,EAAE,OAAO;UAAEU,QAAQ,EAAE;QAAM;MAAE;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,eAE7FtD,OAAA;QAAAkD,QAAA,EAAIX,IAAI,CAACC;MAAO;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACrBtD,OAAA;QAAAkD,QAAA,GAAG,UAAQ,EAACX,IAAI,CAACE,UAAU;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAChCtD,OAAA;QAAAkD,QAAA,GAAG,kBAAgB,EAACX,IAAI,CAACzB,UAAU;MAAA;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACxCtD,OAAA;QAAAkD,QAAA,GAAG,gBAAc,EAACX,IAAI,CAACmC,UAAU;MAAA;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,EACrCxC,UAAU,iBAAId,OAAA;QAAAkD,QAAA,GAAG,4BAA0B,EAACpC,UAAU;MAAA;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC5DtD,OAAA;QAAQmE,OAAO,EAAEA,CAAA,KAAM7D,iBAAiB,CAACiC,IAAI,CAACH,EAAE,CAAE;QAAAc,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAChEtD,OAAA;QAAQmE,OAAO,EAAEA,CAAA,KAAMQ,YAAY,CAACpC,IAAI,CAACH,EAAE,CAAE;QAAAc,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA,GAVtDf,IAAI,CAACH,EAAE;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAYjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEN;AAACpD,EAAA,CAjIQD,MAAM;AAAA2E,EAAA,GAAN3E,MAAM;AAmIf,eAAeA,MAAM;AAAC,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}