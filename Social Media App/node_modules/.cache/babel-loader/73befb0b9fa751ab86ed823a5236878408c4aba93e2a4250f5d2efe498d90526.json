{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Likes(_ref) {\n  _s();\n  let {\n    postId\n  } = _ref;\n  const [likes, setLikes] = useState(0);\n  const [liked, setLiked] = useState();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [apiLikes, setApiLikes] = useState(0);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setApiLikes(blogsWithLiked.likes);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  http:\n  //localhost:8000/api/blog/likes/\n\n  // Render the like button with the current likes and handle the click event\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"NPDMq8iGPd6B9RuUo/S6/esRMbc=\");\n_c = Likes;\nexport default Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_ref","_s","postId","likes","setLikes","liked","setLiked","blogs","setBlogs","error","setError","apiLikes","setApiLikes","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","console","http","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n\n\n\n\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\nfunction Likes({ postId }) {\n  const [likes, setLikes] = useState(0);\n  const [liked, setLiked] = useState();\n  \n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [apiLikes, setApiLikes] = useState(0);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        setApiLikes(blogsWithLiked.likes);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n\n  http://localhost:8000/api/blog/likes/\n\n\n  // Render the like button with the current likes and handle the click event\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nexport default Likes;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,KAAKA,CAAAC,IAAA,EAAa;EAAAC,EAAA;EAAA,IAAZ;IAAEC;EAAO,CAAC,GAAAF,IAAA;EACvB,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,EAAE;EAEpC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMoB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;UACnEC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UAC/D;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;;QAElC;QACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,GAAG,CAAEC,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEnB,KAAK,EAAE;QAAM,CAAC,CAAC,CAAC;QAEtEG,QAAQ,CAACc,cAAc,CAAC;QACxBV,WAAW,CAACU,cAAc,CAACnB,KAAK,CAAC;MACnC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdgB,OAAO,CAAChB,KAAK,CAACA,KAAK,CAAC;QACpBC,QAAQ,CAAC,6BAA6B,CAAC;MACzC;IACF,CAAC;IAEDG,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAENa,IAAI;EAAC;;EAGL;EACA,oBACE5B,OAAA;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEM;AAEV;AAAC7B,EAAA,CA1CQF,KAAK;AAAAgC,EAAA,GAALhC,KAAK;AA4Cd,eAAeA,KAAK;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}