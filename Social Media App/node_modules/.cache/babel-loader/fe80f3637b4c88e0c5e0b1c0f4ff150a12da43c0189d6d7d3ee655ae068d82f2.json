{"ast":null,"code":"// // import React, { useState, useEffect } from 'react'\n\n// // export default function UpdateBlog() {\n// //   const [blogs, setBlogs] = useState([])\n// //   const [loading, setLoading] = useState(true)\n\n// //   const [selectedBlogId, setSelectedBlogId] = useState('')\n// //   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n// //   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n// //   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n// //   useEffect(() => {\n// //     fetch('http://localhost:8000/api/blog/', {\n// //       headers: {\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       }\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       setBlogs(data)\n// //       setLoading(false)\n// //     })\n// //     .catch(error => console.error(error))\n// //   }, [])\n\n// //   const handleUpdate = () => {\n// //     const updatedBlog = {\n// //       id: selectedBlogId,\n// //       title: updatedBlogTitle || blogs.find(blog => blog.id === selectedBlogId).title,\n// //       content: updatedBlogContent || blogs.find(blog => blog.id === selectedBlogId).content,\n// //       authorName: updatedBlogAuthorName || blogs.find(blog => blog.id === selectedBlogId).authorName\n// //     }\n\n// //     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n// //       method: 'PUT',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       },\n// //       body: JSON.stringify(updatedBlog)\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       const index = blogs.findIndex(blog => blog.id === data.id)\n// //       const newBlogs = [...blogs]\n// //       newBlogs[index] = data\n// //       setBlogs(newBlogs)\n// //       setSelectedBlogId('')\n// //       setUpdatedBlogTitle('')\n// //       setUpdatedBlogContent('')\n// //       setUpdatedBlogAuthorName('')\n// //     })\n// //     .catch(error => console.error(error))\n// //   }\n\n// //   if (loading) {\n// //     return <p>Loading...</p>\n// //   }\n\n// //   return (\n// //     <div>\n// //       <h1>Blog List</h1>\n// //       <ul>\n// //         {blogs.map(blog => (\n// //           <li key={blog.id}>\n// //             <h2>{blog.title}</h2>\n// //             <p>{blog.content}</p>\n// //             <p>Author: {blog.authorName}</p>\n// //             <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n// //           </li>\n// //         ))}\n// //       </ul>\n// //       {selectedBlogId && (\n// //   <div>\n// //     <h2>Edit Blog</h2>\n// //     {blogs.map(blog => {\n// //       if (blog.id === selectedBlogId) {\n// //         return (\n// //           <div key={blog.id}>\n// //             <label>\n// //               Title:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogTitle || blog.title}\n// //                 onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Content:\n// //               <textarea\n// //                 value={updatedBlogContent || blog.content}\n// //                 onChange={(event) => setUpdatedBlogContent(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Author Name:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogAuthorName || blog.authorName}\n// //                 onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //           </div>\n// //         );\n// //       } else {\n// //         return null;\n// //       }\n// //     })}\n// //     <button onClick={handleUpdate}>Save Changes</button>\n// //     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n// //   </div>\n// // )}\n\n// // </div>\n// // )}\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const UpdateBlog = () => {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const result = await axios.get('http://localhost:8000/api/blog/', {\n//         headers: {\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       });\n//       setBlogs(result.data);\n//     };\n//     fetchData();\n//   }, []);\n\n//   // const handleUpdate = () => {\n//   //   const updatedBlog = {\n//   //     id: selectedBlogId,\n//   //     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//   //     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//   //     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   //   }\n\n//   //   fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//   //     method: 'PUT',\n//   //     headers: {\n//   //       'Content-Type': 'application/json',\n//   //       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //     },\n//   //     body: JSON.stringify(updatedBlog)\n//   //   })\n//   //   .then(response => response.json())\n//   //   .then(data => {\n//   //     const index = blogs.findIndex(blog => blog.id === data.id)\n//   //     const newBlogs = [...blogs]\n//   //     newBlogs[index] = data\n//   //     setBlogs(newBlogs)\n//   //     setSelectedBlogId('')\n//   //     setUpdatedBlogTitle(undefined)\n//   //     setUpdatedBlogContent(undefined)\n//   //     setUpdatedBlogAuthorName(undefined)\n//   //   })\n//   //   .catch(error => console.error(error))\n//   // }\n\n//   // const handleDelete = (id) => {\n//   //   if (window.confirm('Are you sure you want to delete this post?')) {\n//   //     fetch(`http://localhost:8000/api/blog/${id}/`, {\n//   //       method: 'DELETE',\n//   //       headers: {\n//   //         'Content-Type': 'application/json',\n//   //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //       }\n//   //     })\n//   //     .then(response => {\n//   //       if (response.ok) {\n//   //         setBlogs(blogs.filter(blog => blog.id !== id))\n//   //       } else {\n//   //         throw new Error('Delete failed')\n//   //       }\n//   //     })\n//   //     .catch(error => {\n//   //       console.error(error)\n//   //     })\n//   //   }\n//   // }\n\n//   return (\n//     <div>\n//       {/* <ul>\n//         {blogs.map(blog => (\n//           <li key={blog.id}>\n//             <div>\n//               <h2>{blog.title}</h2>\n//               <p>{blog.content}</p>\n//               <p>Author: {blog.authorName}</p>\n//               <button onClick={() => setSelectedBlogId(blog.id)}>Update Blog</button>\n//               <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul> */}\n\n//       {/* {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n\n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )} */}\n//       </div>\n//         );\n// }\n// export default UpdateBlog;\n\n// import React, { useState, useEffect } from 'react'\n// function Update() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//   const [newBlogImage, setNewBlogImage] = useState(null);\n//   const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n//   const [imageUrl, setImageUrl] = useState(null);\n\n// const handleUpdate = () => {\n//   const updatedBlog = {\n//     id: selectedBlogId,\n//     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   }\n\n//   const formData = new FormData();\n//   formData.append('title', updatedBlog.title);\n//   formData.append('content', updatedBlog.content);\n//   formData.append('authorName', updatedBlog.authorName);\n//   formData.append('image', updatedBlogImage);\n\n//   fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n//     method: 'PUT',\n//     headers: {\n//       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//     },\n//     body: formData\n//   })\n//   .then(response => response.json())\n//   .then(data => {\n//     const index = blogs.findIndex(blog => blog.id === data.id)\n//     const newBlogs = [...blogs]\n//     newBlogs[index] = data\n//     setBlogs(newBlogs)\n//     setSelectedBlogId('')\n//     setUpdatedBlogTitle(undefined)\n//     setUpdatedBlogContent(undefined)\n//     setUpdatedBlogAuthorName(undefined)\n//     setUpdatedBlogImage(null)\n//   })\n//   .catch(error => console.error(error))\n// }\n\n// return(\n//   <div>\n//           {/* <UpdateBlog/> */}\n//           {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n\n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <label htmlFor=\"updatedBlogImage\">Image:</label>\n//             <input type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={event => setUpdatedBlogImage(event.target.files[0])} />\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )}\n\n//   </div>\n// )\n\n// }","map":{"version":3,"names":[],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/update.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react'\n\n// // export default function UpdateBlog() {\n// //   const [blogs, setBlogs] = useState([])\n// //   const [loading, setLoading] = useState(true)\n\n// //   const [selectedBlogId, setSelectedBlogId] = useState('')\n// //   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n// //   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n// //   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n// //   useEffect(() => {\n// //     fetch('http://localhost:8000/api/blog/', {\n// //       headers: {\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       }\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       setBlogs(data)\n// //       setLoading(false)\n// //     })\n// //     .catch(error => console.error(error))\n// //   }, [])\n\n// //   const handleUpdate = () => {\n// //     const updatedBlog = {\n// //       id: selectedBlogId,\n// //       title: updatedBlogTitle || blogs.find(blog => blog.id === selectedBlogId).title,\n// //       content: updatedBlogContent || blogs.find(blog => blog.id === selectedBlogId).content,\n// //       authorName: updatedBlogAuthorName || blogs.find(blog => blog.id === selectedBlogId).authorName\n// //     }\n  \n// //     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n// //       method: 'PUT',\n// //       headers: {\n// //         'Content-Type': 'application/json',\n// //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n// //       },\n// //       body: JSON.stringify(updatedBlog)\n// //     })\n// //     .then(response => response.json())\n// //     .then(data => {\n// //       const index = blogs.findIndex(blog => blog.id === data.id)\n// //       const newBlogs = [...blogs]\n// //       newBlogs[index] = data\n// //       setBlogs(newBlogs)\n// //       setSelectedBlogId('')\n// //       setUpdatedBlogTitle('')\n// //       setUpdatedBlogContent('')\n// //       setUpdatedBlogAuthorName('')\n// //     })\n// //     .catch(error => console.error(error))\n// //   }\n\n// //   if (loading) {\n// //     return <p>Loading...</p>\n// //   }\n\n// //   return (\n// //     <div>\n// //       <h1>Blog List</h1>\n// //       <ul>\n// //         {blogs.map(blog => (\n// //           <li key={blog.id}>\n// //             <h2>{blog.title}</h2>\n// //             <p>{blog.content}</p>\n// //             <p>Author: {blog.authorName}</p>\n// //             <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n// //           </li>\n// //         ))}\n// //       </ul>\n// //       {selectedBlogId && (\n// //   <div>\n// //     <h2>Edit Blog</h2>\n// //     {blogs.map(blog => {\n// //       if (blog.id === selectedBlogId) {\n// //         return (\n// //           <div key={blog.id}>\n// //             <label>\n// //               Title:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogTitle || blog.title}\n// //                 onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Content:\n// //               <textarea\n// //                 value={updatedBlogContent || blog.content}\n// //                 onChange={(event) => setUpdatedBlogContent(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //             <label>\n// //               Author Name:\n// //               <input\n// //                 type=\"text\"\n// //                 value={updatedBlogAuthorName || blog.authorName}\n// //                 onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n// //               />\n// //             </label>\n// //             <br />\n// //           </div>\n// //         );\n// //       } else {\n// //         return null;\n// //       }\n// //     })}\n// //     <button onClick={handleUpdate}>Save Changes</button>\n// //     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n// //   </div>\n// // )}\n\n// // </div>\n// // )}\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const UpdateBlog = () => {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const result = await axios.get('http://localhost:8000/api/blog/', {\n//         headers: {\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       });\n//       setBlogs(result.data);\n//     };\n//     fetchData();\n//   }, []);\n\n//   // const handleUpdate = () => {\n//   //   const updatedBlog = {\n//   //     id: selectedBlogId,\n//   //     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//   //     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//   //     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   //   }\n        \n//   //   fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//   //     method: 'PUT',\n//   //     headers: {\n//   //       'Content-Type': 'application/json',\n//   //       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //     },\n//   //     body: JSON.stringify(updatedBlog)\n//   //   })\n//   //   .then(response => response.json())\n//   //   .then(data => {\n//   //     const index = blogs.findIndex(blog => blog.id === data.id)\n//   //     const newBlogs = [...blogs]\n//   //     newBlogs[index] = data\n//   //     setBlogs(newBlogs)\n//   //     setSelectedBlogId('')\n//   //     setUpdatedBlogTitle(undefined)\n//   //     setUpdatedBlogContent(undefined)\n//   //     setUpdatedBlogAuthorName(undefined)\n//   //   })\n//   //   .catch(error => console.error(error))\n//   // }\n\n//   // const handleDelete = (id) => {\n//   //   if (window.confirm('Are you sure you want to delete this post?')) {\n//   //     fetch(`http://localhost:8000/api/blog/${id}/`, {\n//   //       method: 'DELETE',\n//   //       headers: {\n//   //         'Content-Type': 'application/json',\n//   //         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//   //       }\n//   //     })\n//   //     .then(response => {\n//   //       if (response.ok) {\n//   //         setBlogs(blogs.filter(blog => blog.id !== id))\n//   //       } else {\n//   //         throw new Error('Delete failed')\n//   //       }\n//   //     })\n//   //     .catch(error => {\n//   //       console.error(error)\n//   //     })\n//   //   }\n//   // }\n\n//   return (\n//     <div>\n//       {/* <ul>\n//         {blogs.map(blog => (\n//           <li key={blog.id}>\n//             <div>\n//               <h2>{blog.title}</h2>\n//               <p>{blog.content}</p>\n//               <p>Author: {blog.authorName}</p>\n//               <button onClick={() => setSelectedBlogId(blog.id)}>Update Blog</button>\n//               <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//             </div>\n//           </li>\n//         ))}\n//       </ul> */}\n\n//       {/* {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n          \n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )} */}\n//       </div>\n//         );\n// }\n// export default UpdateBlog;\n\n\n\n// import React, { useState, useEffect } from 'react'\n// function Update() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState('');\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  \n//   const [newBlogImage, setNewBlogImage] = useState(null);\n//   const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n//   const [imageUrl, setImageUrl] = useState(null);\n\n// const handleUpdate = () => {\n//   const updatedBlog = {\n//     id: selectedBlogId,\n//     title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n//     content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n//     authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n//   }\n\n//   const formData = new FormData();\n//   formData.append('title', updatedBlog.title);\n//   formData.append('content', updatedBlog.content);\n//   formData.append('authorName', updatedBlog.authorName);\n//   formData.append('image', updatedBlogImage);\n\n//   fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n//     method: 'PUT',\n//     headers: {\n//       'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//     },\n//     body: formData\n//   })\n//   .then(response => response.json())\n//   .then(data => {\n//     const index = blogs.findIndex(blog => blog.id === data.id)\n//     const newBlogs = [...blogs]\n//     newBlogs[index] = data\n//     setBlogs(newBlogs)\n//     setSelectedBlogId('')\n//     setUpdatedBlogTitle(undefined)\n//     setUpdatedBlogContent(undefined)\n//     setUpdatedBlogAuthorName(undefined)\n//     setUpdatedBlogImage(null)\n//   })\n//   .catch(error => console.error(error))\n// }\n\n\n// return(\n//   <div>\n//           {/* <UpdateBlog/> */}\n//           {selectedBlogId !== '' && (\n//         <div>\n\n//           <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n          \n//           <div>\n//             <label htmlFor=\"blog-title\">Title:</label>\n//             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-content\">Content:</label>\n//             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n//           </div>\n\n//           <div>\n//             <label htmlFor=\"blog-author-name\">Author Name:</label>\n//             <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n//             </div>\n\n//             <label htmlFor=\"updatedBlogImage\">Image:</label>\n//             <input type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={event => setUpdatedBlogImage(event.target.files[0])} />\n\n//             <button onClick={handleUpdate}>Update Blog</button>\n\n//             </div>\n//             )}\n\n//   </div>\n// )\n\n// }"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}