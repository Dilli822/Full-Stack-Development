{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [liked, setLiked] = useState(false);\n  const [likes, setLikes] = useState(0);\n  const [authorId, setAuthorId] = useState(0);\n  const [countLikes, setCountLikes] = useState(0);\n  const [likedBy, setLikedBy] = useState(0);\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n\n        // Extract likes and author IDs into new arrays\n        const likes = blogsWithLiked.map(blog => blog.likes);\n        const authors = blogsWithLiked.map(blog => blog.author.id);\n        const likedby = blogsWithLiked.map(blog => blog.liked_by);\n        setCountLikes(likes);\n        setAuthorId(authors);\n        setLikedBy(likedby);\n        console.log(\"Likedby\", likedBy);\n\n        // Set likedBy to an empty array for now\n        setLikedBy([]);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  console.log(\"llikedby \", likedBy);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setLikedBy(blogsWithLiked.liked_by);\n        setCountLikes(blogsWithLiked);\n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = async blogId => {\n    try {\n      const blogToUpdate = blogs.find(blog => blog.id === blogId);\n      const newLikedState = !blogToUpdate.liked;\n      const newLikes = newLikedState ? blogToUpdate.likes + 1 : blogToUpdate.likes - 1;\n      const updatedBlogs = blogs.map(blog => blog.id === blogId ? {\n        ...blog,\n        liked: newLikedState,\n        likes: newLikes\n      } : blog);\n      setBlogs(updatedBlogs);\n\n      // Update liked_by state based on new liked state\n      const newLikedByState = newLikedState ? [...blogToUpdate.liked_by, authorId] : blogToUpdate.liked_by.filter(id => id !== authorId);\n      setLikedBy(newLikedByState);\n\n      // Update likes count\n      setCountLikes(newLikes);\n\n      // Call API to update like state\n      await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          liked: newLikedState,\n          likes: newLikes\n        })\n      });\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: handleLikeClick,\n      children: [/*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        color: liked ? \"error\" : \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: likes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"1dlzsxF5lhvGl8rMNNo99umP80A=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","jsxDEV","_jsxDEV","Likes","_s","liked","setLiked","likes","setLikes","authorId","setAuthorId","countLikes","setCountLikes","likedBy","setLikedBy","blogs","setBlogs","error","setError","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","authors","author","id","likedby","liked_by","console","log","handleLikeClick","blogId","blogToUpdate","find","newLikedState","newLikes","updatedBlogs","newLikedByState","filter","method","body","JSON","stringify","children","onClick","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\nexport default function Likes() {\n  const [liked, setLiked] = useState(false);\n  const [likes, setLikes] = useState(0);\n  \n  const [authorId,setAuthorId] = useState(0);\n  const [countLikes, setCountLikes] = useState(0);\n  const [likedBy,setLikedBy] = useState(0);\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n\n \n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n  \n        const data = await response.json();\n  \n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n  \n        setBlogs(blogsWithLiked);\n  \n        // Extract likes and author IDs into new arrays\n        const likes = blogsWithLiked.map((blog) => blog.likes);\n        const authors = blogsWithLiked.map((blog) => blog.author.id);\n        const likedby = blogsWithLiked.map((blog) => blog.liked_by);\n  \n        setCountLikes(likes);\n        setAuthorId(authors);\n        setLikedBy(likedby);\n        console.log(\"Likedby\", likedBy);\n  \n        // Set likedBy to an empty array for now\n        setLikedBy([]);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n  \n    fetchBlogs();\n  }, []);\n  \n\n  console.log(\"llikedby \", likedBy);\n\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        setLikedBy(blogsWithLiked.liked_by);\n        setCountLikes(blogsWithLiked);\n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n  \n  const handleLikeClick = async (blogId) => {\n    try {\n      const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n      const newLikedState = !blogToUpdate.liked;\n      const newLikes = newLikedState\n        ? blogToUpdate.likes + 1\n        : blogToUpdate.likes - 1;\n  \n      const updatedBlogs = blogs.map((blog) =>\n        blog.id === blogId\n          ? { ...blog, liked: newLikedState, likes: newLikes }\n          : blog\n      );\n      setBlogs(updatedBlogs);\n  \n      // Update liked_by state based on new liked state\n      const newLikedByState = newLikedState\n        ? [...blogToUpdate.liked_by, authorId]\n        : blogToUpdate.liked_by.filter((id) => id !== authorId);\n      setLikedBy(newLikedByState);\n  \n      // Update likes count\n      setCountLikes(newLikes);\n  \n      // Call API to update like state\n      await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          liked: newLikedState,\n          likes: newLikes,\n        }),\n      });\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    }\n  };\n  \n  \n\n  return (\n    <div>\n      <IconButton onClick={handleLikeClick}>\n        <FavoriteIcon color={liked ? \"error\" : \"inherit\"} />\n        <span>{likes}</span>\n      </IconButton>\n    </div>\n  );\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}