{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/drf-blog-api-master/django/frontend/src/dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogList() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  useEffect(() => {\n    const accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    // Make sure we have both access and refresh tokens\n    if (!accessToken || !refreshToken) {\n      console.error('Access or refresh token missing');\n      return;\n    }\n\n    // Use the access token to fetch blog data\n    fetch('/api/blog/', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else if (response.status === 401) {\n        // If access token is expired, use refresh token to get a new one\n        return fetch('/api/token/refresh/', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${refreshToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({})\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error('Failed to refresh token');\n          }\n        }).then(data => {\n          localStorage.setItem('accessToken', data.access);\n          return fetch('/api/blog/', {\n            headers: {\n              'Authorization': `Bearer ${data.access}`,\n              'Content-Type': 'application/json'\n            }\n          }).then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n              throw new Error('Failed to fetch blog data');\n            }\n          });\n        });\n      } else {\n        throw new Error('Failed to fetch blog data');\n      }\n    }).then(data => {\n      setBlogs(data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blog List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Author: \", blog.authorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(BlogList, \"RDzdeLKEs49XKHWpCIuOQAADm3U=\");\n_c = BlogList;\nexport default BlogList;\nvar _c;\n$RefreshReg$(_c, \"BlogList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BlogList","_s","blogs","setBlogs","accessToken","localStorage","getItem","refreshToken","console","error","fetch","headers","then","response","ok","json","status","method","body","JSON","stringify","Error","data","setItem","access","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","map","blog","title","content","authorName","id","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/drf-blog-api-master/django/frontend/src/dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction BlogList() {\n  const [blogs, setBlogs] = useState([]);\n\n  useEffect(() => {\n    const accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    // Make sure we have both access and refresh tokens\n    if (!accessToken || !refreshToken) {\n      console.error('Access or refresh token missing');\n      return;\n    }\n\n    // Use the access token to fetch blog data\n    fetch('/api/blog/', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      } else if (response.status === 401) {\n        // If access token is expired, use refresh token to get a new one\n        return fetch('/api/token/refresh/', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${refreshToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({})\n        })\n        .then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error('Failed to refresh token');\n          }\n        })\n        .then(data => {\n          localStorage.setItem('accessToken', data.access);\n          return fetch('/api/blog/', {\n            headers: {\n              'Authorization': `Bearer ${data.access}`,\n              'Content-Type': 'application/json'\n            }\n          })\n          .then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n              throw new Error('Failed to fetch blog data');\n            }\n          });\n        });\n      } else {\n        throw new Error('Failed to fetch blog data');\n      }\n    })\n    .then(data => {\n      setBlogs(data);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h1>Blog List</h1>\n      <ul>\n        {blogs.map(blog => (\n          <li key={blog.id}>\n            <h2>{blog.title}</h2>\n            <p>{blog.content}</p>\n            <p>Author: {blog.authorName}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default BlogList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}