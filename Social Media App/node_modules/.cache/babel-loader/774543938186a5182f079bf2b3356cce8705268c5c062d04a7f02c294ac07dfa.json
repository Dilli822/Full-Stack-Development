{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n\n// function Comments () {\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           const blogLikes = data.map((blog) => {\n//             return {\n//               id: blog.id,\n//               likes: blog.likes,\n//               liked_state: blog.liked_state,\n//               title: blog.title,\n//               image: blog.image,\n//               content: blog.content,\n//               authorName: blog.authorName,\n//               created_at: blog.created_at,\n//               updated_at: blog.updated_at,\n//             };\n//           });\n\n//           // Store the mapped data in a variable\n//           const mappedData = blogLikes;\n\n//           setBlogs(mappedData);\n//           setLikes(mappedData.map((blog) => blog.likes));\n//           setLiked(mappedData.map((blog) => blog.liked_state));\n\n//           console.log(mappedData);\n//           setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n\n//           // Call the fetchComments function and pass the mapped data\n//           fetchComments(mappedData);\n//         } else {\n//           console.error(\"Failed to fetch likes\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     const fetchComments = async (mappedData) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//           method: \"GET\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           console.log(\"comments are \", data);\n//           setComments(data);\n\n//           // Use the mapped data and comments data together\n//           // Combine the mapped data and comments data as needed\n//           const combinedData = {\n//             mappedData: mappedData,\n//             commentsData: data,\n//           };\n\n//           // Process the combined data as needed\n//           console.log(\"Combined data:\", combinedData);\n//         } else {\n//           console.error(\"Failed to fetch comments\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error:\", error);\n//       }\n//     };\n\n//     fetchLikes();\n//   }, []);\n\n//   return (\n//   <div>\n//   {combinedData.mappedData.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>Likes: {blog.likes}</p>\n//       {/* Render other properties of the blog as needed */}\n//     </div>\n//   ))}\n//   {combinedData.commentsData.map((comment) => (\n//     <div key={comment.id}>\n//       <h3>{comment.title}</h3>\n//       <p>{comment.comment_content}</p>\n//       {/* Render other properties of the comment as needed */}\n//     </div>\n//   ))}\n// </div>\n// );\n\n// };\n\n// export default Comments;\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comments() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [blogs, setBlogs] = useState([]);\n  const [likes, setLikes] = useState([]);\n  const [liked, setLiked] = useState([]);\n  const [shareUrls, setShareUrls] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const likesResponse = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n      });\n      const commentsResponse = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n      });\n      if (likesResponse.ok && commentsResponse.ok) {\n        const likesData = await likesResponse.json();\n        const commentsData = await commentsResponse.json();\n        const mappedData = likesData.map(blog => ({\n          id: blog.id,\n          likes: blog.likes,\n          liked_state: blog.liked_state,\n          title: blog.title,\n          image: blog.image,\n          content: blog.content,\n          authorName: blog.authorName,\n          created_at: blog.created_at,\n          updated_at: blog.updated_at\n        }));\n        const combinedData = mappedData.map(blog => {\n          const comment = commentsData.find(c => c.blogId === blog.id);\n          return {\n            ...blog,\n            comment: comment ? comment.comment : null\n          };\n        });\n        setCombinedData(combinedData);\n      } else {\n        console.error(\"Failed to fetch data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: combinedData.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", blog.likes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comment: \", blog.comment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n\n// useEffect(() => {\n//   fetchComments();\n// }, []);\n\n// const fetchComments = async () => {\n//   try {\n//     const response = await fetch('http://localhost:8000/api/blog/comments/', {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//       },\n\n//     });\n//     if (response.ok) {\n//       const data = await response.json();\n//       console.log(\"comments are \", data);\n//       setComments(data);\n//     } else {\n//       console.error('Failed to fetch comments');\n//     }\n//   } catch (error) {\n//     console.error('Error:', error);\n//   }\n// };\n\n// return (\n//   <div>\n//     {comments.map((comment) => (\n//       <div key={comment.id}>\n\n//         <p>comments: {comment.comment_content}</p>\n//         <p>commented_by: {comment.author}</p>\n//       </div>\n//     ))}\n//   </div>\n// );\n_s(Comments, \"bdsnjTN9HSc54+qRmq8Hm4Rxmwo=\");\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Comments","_s","comments","setComments","blogs","setBlogs","likes","setLikes","liked","setLiked","shareUrls","setShareUrls","combinedData","setCombinedData","fetchData","likesResponse","fetch","headers","Authorization","localStorage","getItem","commentsResponse","method","ok","likesData","json","commentsData","mappedData","map","blog","id","liked_state","title","image","content","authorName","created_at","updated_at","comment","find","c","blogId","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// function Comments () {\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         if (response.ok) {\n//           const data = await response.json();\n//           const blogLikes = data.map((blog) => {\n//             return {\n//               id: blog.id,\n//               likes: blog.likes,\n//               liked_state: blog.liked_state,\n//               title: blog.title,\n//               image: blog.image,\n//               content: blog.content,\n//               authorName: blog.authorName,\n//               created_at: blog.created_at,\n//               updated_at: blog.updated_at,\n//             };\n//           });\n  \n//           // Store the mapped data in a variable\n//           const mappedData = blogLikes;\n  \n//           setBlogs(mappedData);\n//           setLikes(mappedData.map((blog) => blog.likes));\n//           setLiked(mappedData.map((blog) => blog.liked_state));\n  \n//           console.log(mappedData);\n//           setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n  \n//           // Call the fetchComments function and pass the mapped data\n//           fetchComments(mappedData);\n//         } else {\n//           console.error(\"Failed to fetch likes\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n  \n//     const fetchComments = async (mappedData) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//           method: \"GET\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         if (response.ok) {\n//           const data = await response.json();\n//           console.log(\"comments are \", data);\n//           setComments(data);\n  \n//           // Use the mapped data and comments data together\n//           // Combine the mapped data and comments data as needed\n//           const combinedData = {\n//             mappedData: mappedData,\n//             commentsData: data,\n//           };\n  \n//           // Process the combined data as needed\n//           console.log(\"Combined data:\", combinedData);\n//         } else {\n//           console.error(\"Failed to fetch comments\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error:\", error);\n//       }\n//     };\n  \n//     fetchLikes();\n//   }, []);\n  \n\n//   return (\n//   <div>\n//   {combinedData.mappedData.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>Likes: {blog.likes}</p>\n//       {/* Render other properties of the blog as needed */}\n//     </div>\n//   ))}\n//   {combinedData.commentsData.map((comment) => (\n//     <div key={comment.id}>\n//       <h3>{comment.title}</h3>\n//       <p>{comment.comment_content}</p>\n//       {/* Render other properties of the comment as needed */}\n//     </div>\n//   ))}\n// </div>\n// );\n\n// };\n\n// export default Comments;\n\nimport { useState, useEffect } from \"react\";\n\nexport default function Comments() {\n  const [comments, setComments] = useState([]);\n  const [blogs, setBlogs] = useState([]);\n  const [likes, setLikes] = useState([]);\n  const [liked, setLiked] = useState([]);\n  const [shareUrls, setShareUrls] = useState([]);\n  const [combinedData, setCombinedData] = useState([])\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const likesResponse = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n      });\n      const commentsResponse = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n      });\n\n      if (likesResponse.ok && commentsResponse.ok) {\n        const likesData = await likesResponse.json();\n        const commentsData = await commentsResponse.json();\n\n        const mappedData = likesData.map((blog) => ({\n          id: blog.id,\n          likes: blog.likes,\n          liked_state: blog.liked_state,\n          title: blog.title,\n          image: blog.image,\n          content: blog.content,\n          authorName: blog.authorName,\n          created_at: blog.created_at,\n          updated_at: blog.updated_at,\n        }));\n\n        const combinedData = mappedData.map((blog) => {\n          const comment = commentsData.find((c) => c.blogId === blog.id);\n          return {\n            ...blog,\n            comment: comment ? comment.comment : null,\n          };\n        });\n\n        setCombinedData(combinedData);\n      } else {\n        console.error(\"Failed to fetch data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  return (\n    <div>\n      {combinedData.map((blog) => (\n        <div key={blog.id}>\n          <h3>{blog.title}</h3>\n          <p>Likes: {blog.likes}</p>\n          <p>Comment: {blog.comment}</p>\n          {/* Render other properties of the blog as needed */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n  // useEffect(() => {\n  //   fetchComments();\n  // }, []);\n\n  // const fetchComments = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:8000/api/blog/comments/', {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       },\n    \n  //     });\n  //     if (response.ok) {\n  //       const data = await response.json();\n  //       console.log(\"comments are \", data);\n  //       setComments(data);\n  //     } else {\n  //       console.error('Failed to fetch comments');\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //   }\n  // };\n\n  // return (\n  //   <div>\n  //     {comments.map((comment) => (\n  //       <div key={comment.id}>\n   \n  //         <p>comments: {comment.comment_content}</p>\n  //         <p>commented_by: {comment.author}</p>\n  //       </div>\n  //     ))}\n  //   </div>\n  // );"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpDC,SAAS,CAAC,MAAM;IACdiB,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACzEC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;QAC/D;MACF,CAAC,CAAC;MACF,MAAMC,gBAAgB,GAAG,MAAML,KAAK,CAAC,0CAA0C,EAAE;QAC/EM,MAAM,EAAE,KAAK;QACbL,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;QAC/D;MACF,CAAC,CAAC;MAEF,IAAIL,aAAa,CAACQ,EAAE,IAAIF,gBAAgB,CAACE,EAAE,EAAE;QAC3C,MAAMC,SAAS,GAAG,MAAMT,aAAa,CAACU,IAAI,EAAE;QAC5C,MAAMC,YAAY,GAAG,MAAML,gBAAgB,CAACI,IAAI,EAAE;QAElD,MAAME,UAAU,GAAGH,SAAS,CAACI,GAAG,CAAEC,IAAI,KAAM;UAC1CC,EAAE,EAAED,IAAI,CAACC,EAAE;UACXxB,KAAK,EAAEuB,IAAI,CAACvB,KAAK;UACjByB,WAAW,EAAEF,IAAI,CAACE,WAAW;UAC7BC,KAAK,EAAEH,IAAI,CAACG,KAAK;UACjBC,KAAK,EAAEJ,IAAI,CAACI,KAAK;UACjBC,OAAO,EAAEL,IAAI,CAACK,OAAO;UACrBC,UAAU,EAAEN,IAAI,CAACM,UAAU;UAC3BC,UAAU,EAAEP,IAAI,CAACO,UAAU;UAC3BC,UAAU,EAAER,IAAI,CAACQ;QACnB,CAAC,CAAC,CAAC;QAEH,MAAMzB,YAAY,GAAGe,UAAU,CAACC,GAAG,CAAEC,IAAI,IAAK;UAC5C,MAAMS,OAAO,GAAGZ,YAAY,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAKZ,IAAI,CAACC,EAAE,CAAC;UAC9D,OAAO;YACL,GAAGD,IAAI;YACPS,OAAO,EAAEA,OAAO,GAAGA,OAAO,CAACA,OAAO,GAAG;UACvC,CAAC;QACH,CAAC,CAAC;QAEFzB,eAAe,CAACD,YAAY,CAAC;MAC/B,CAAC,MAAM;QACL8B,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACvC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACE5C,OAAA;IAAA6C,QAAA,EACGhC,YAAY,CAACgB,GAAG,CAAEC,IAAI,iBACrB9B,OAAA;MAAA6C,QAAA,gBACE7C,OAAA;QAAA6C,QAAA,EAAKf,IAAI,CAACG;MAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACrBjD,OAAA;QAAA6C,QAAA,GAAG,SAAO,EAACf,IAAI,CAACvB,KAAK;MAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC1BjD,OAAA;QAAA6C,QAAA,GAAG,WAAS,EAACf,IAAI,CAACS,OAAO;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA,GAHtBnB,IAAI,CAACC,EAAE;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAMlB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;;AAEE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA/C,EAAA,CA7GsBD,QAAQ;AAAAiD,EAAA,GAARjD,QAAQ;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}