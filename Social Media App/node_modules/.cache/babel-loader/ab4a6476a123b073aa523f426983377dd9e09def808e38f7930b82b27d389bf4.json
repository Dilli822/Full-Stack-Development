{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [authorId, setAuthorId] = useState(0);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [likedBy, setLikedBy] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikedBy(blogsWithLiked.liked_by);\n//         setCountLikes(blogsWithLiked);\n//         setAuthorId(blogsWithLiked.author);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   console.log(\"likedBy \", likedBy);\n\n//   // const handleLikeClick = async (blogId) => {\n//   //   try {\n//   //     const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//   //     const newLikedState = !blogToUpdate.liked;\n//   //     const newLikes = newLikedState\n//   //       ? blogToUpdate.likes + 1\n//   //       : blogToUpdate.likes - 1;\n\n//   //     const updatedBlogs = blogs.map((blog) =>\n//   //       blog.id === blogId\n//   //         ? { ...blog, liked: newLikedState, likes: newLikes }\n//   //         : blog\n//   //     );\n//   //     setBlogs(updatedBlogs);\n\n//   //     // Update liked_by state based on new liked state\n//   //     const newLikedByState = newLikedState\n//   //       ? [...blogToUpdate.liked_by, authorId]\n//   //       : blogToUpdate.liked_by.filter((id) => id !== authorId);\n//   //     setLikedBy(newLikedByState);\n\n//   //     // Update likes count\n//   //     setCountLikes(newLikes);\n\n//   //     // Call API to update like state\n//   //     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//   //       method: \"PUT\",\n//   //       headers: {\n//   //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//   //         \"Content-Type\": \"application/json\",\n//   //       },\n//   //       body: JSON.stringify({\n//   //         liked: newLikedState,\n//   //         likes: newLikes,\n//   //       }),\n//   //     });\n//   //   } catch (error) {\n//   //     console.error(error);\n//   //     setError(\"Failed to update like state.\");\n//   //   }\n//   // };\n//   const handleLikeClick = async (blogId) => {\n//     try {\n//       const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//       const newLikedState = !blogToUpdate.liked;\n//       let newLikes = blogToUpdate.likes;\n//       let newLikedByState = [...blogToUpdate.liked_by];\n\n//       if (newLikedState) {\n//         newLikes += 1;\n//         newLikedByState.push(authorId);\n//       } else {\n//         newLikes -= 1;\n//         newLikedByState = newLikedByState.filter((id) => id !== authorId);\n//       }\n\n//       const updatedBlogs = blogs.map((blog) =>\n//         blog.id === blogId\n//           ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n//           : blog\n//       );\n//       setBlogs(updatedBlogs);\n\n//       // Update likes count\n//       setCountLikes(newLikes);\n\n//       // Call API to update like state\n//       await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           liked: newLikedState,\n//           likes: newLikes,\n//           liked_by: newLikedByState\n//         }),\n//       });\n//     } catch (error) {\n//       console.error(error);\n//       setError(\"Failed to update like state.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//             <span>{blog.likes}</span>\n//             <FavoriteIcon color={blog.liked_by.includes(blog.author) ? \"error\" : \"inherit\"} />\n\n//           </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [authorId, setAuthorId] = useState(0);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [likedBy, setLikedBy] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikedBy(blogsWithLiked.liked_by);\n//         setCountLikes(blogsWithLiked);\n//         setAuthorId(blogsWithLiked.author);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   console.log(\"likedBy \", likedBy);\n\n//   // const handleLikeClick = async (blogId) => {\n//   //   try {\n//   //     const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//   //     const newLikedState = !blogToUpdate.liked;\n//   //     const newLikes = newLikedState\n//   //       ? blogToUpdate.likes + 1\n//   //       : blogToUpdate.likes - 1;\n\n//   //     const updatedBlogs = blogs.map((blog) =>\n//   //       blog.id === blogId\n//   //         ? { ...blog, liked: newLikedState, likes: newLikes }\n//   //         : blog\n//   //     );\n//   //     setBlogs(updatedBlogs);\n\n//   //     // Update liked_by state based on new liked state\n//   //     const newLikedByState = newLikedState\n//   //       ? [...blogToUpdate.liked_by, authorId]\n//   //       : blogToUpdate.liked_by.filter((id) => id !== authorId);\n//   //     setLikedBy(newLikedByState);\n\n//   //     // Update likes count\n//   //     setCountLikes(newLikes);\n\n//   //     // Call API to update like state\n//   //     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//   //       method: \"PUT\",\n//   //       headers: {\n//   //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//   //         \"Content-Type\": \"application/json\",\n//   //       },\n//   //       body: JSON.stringify({\n//   //         liked: newLikedState,\n//   //         likes: newLikes,\n//   //       }),\n//   //     });\n//   //   } catch (error) {\n//   //     console.error(error);\n//   //     setError(\"Failed to update like state.\");\n//   //   }\n//   // };\n//   const handleLikeClick = async (blogId) => {\n//     try {\n//       const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//       const newLikedState = !blogToUpdate.liked;\n//       let newLikes = blogToUpdate.likes;\n//       let newLikedByState = [...blogToUpdate.liked_by];\n      \n//       if (newLikedState) {\n//         newLikes += 1;\n//         newLikedByState.push(authorId);\n//       } else {\n//         newLikes -= 1;\n//         newLikedByState = newLikedByState.filter((id) => id !== authorId);\n//       }\n      \n//       const updatedBlogs = blogs.map((blog) =>\n//         blog.id === blogId\n//           ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n//           : blog\n//       );\n//       setBlogs(updatedBlogs);\n  \n//       // Update likes count\n//       setCountLikes(newLikes);\n  \n//       // Call API to update like state\n//       await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           liked: newLikedState,\n//           likes: newLikes,\n//           liked_by: newLikedByState\n//         }),\n//       });\n//     } catch (error) {\n//       console.error(error);\n//       setError(\"Failed to update like state.\");\n//     }\n//   };\n  \n//   return (\n//     <div>\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//             <span>{blog.likes}</span>\n//             <FavoriteIcon color={blog.liked_by.includes(blog.author) ? \"error\" : \"inherit\"} />\n\n//           </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}