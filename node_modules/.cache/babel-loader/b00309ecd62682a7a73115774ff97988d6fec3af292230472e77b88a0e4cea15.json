{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\n// // import { useState, useEffect } from \"react\";\n// // import { IconButton } from \"@mui/material\";\n// // import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// // export default function Likes() {\n// //   const [liked, setLiked] = useState(false);\n// //   const [likes, setLikes] = useState(0);\n\n// //   const [blogs, setBlogs] = useState([]);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchBlogs = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //           headers: {\n// //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //           },\n// //         });\n\n// //         const data = await response.json();\n// //         setBlogs(data);\n// //         setLikes(data.likes);\n// //       } catch (error) {\n// //         console.error(error);\n// //         setError(\"Failed to fetch blog posts.\");\n// //       }\n// //     };\n\n// //     fetchBlogs();\n// //   }, []);\n\n// //   const handleLikeClick = async (blogId) => {\n// //     if (liked) {\n// //       // User has already liked the post, so remove like\n// //       setLiked(false);\n// //       setLikes((prevLikes) => prevLikes - 1);\n// //     } else {\n// //       // User has not liked the post, so add like\n// //       setLiked(true);\n// //       setLikes((prevLikes) => prevLikes + 1);\n// //     }\n\n// //     // Update the API with the new liked state and like count\n// //     try {\n// //       const response = await fetch(\n// //         `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify({\n// //             liked: liked,\n// //             likes: likes,\n// //           }),\n// //         }\n// //       );\n\n// //       const data = await response.json();\n// //       console.log(data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n\n// // {blogs.map((blog) => (\n// //         <div key={blog.id}>\n// //           <h2>{blog.title}</h2>\n// //           <p>{blog.content}</p>\n// //           <span>{blog.likes}</span>\n// //           <IconButton onClick={() => handleLikeClick(blog.id)}>\n// //   <FavoriteIcon color={liked ? \"error\" : \"inherit\"} />\n// // </IconButton>\n// //         </div>\n// //       ))}\n// //     </div>\n// //   );\n// // }\n\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = async (blogId) => {\n//     // Find the index of the blog post in the blogs state array\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n\n//     // Get the current liked and likes values for the blog post\n//     const { liked, likes } = blogs[index];\n\n//     // Update the liked and likes values for the blog post\n//     const updatedBlogs = [...blogs];\n//     updatedBlogs[index] = {\n//       ...blogs[index],\n//       liked: !liked,\n//       likes: liked ? likes - 1 : likes + 1,\n//     };\n//     setBlogs(updatedBlogs);\n\n//     // Update the API with the new liked state and like count\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             liked: !liked,\n//             likes: liked ? likes - 1 : likes + 1,\n//           }),\n//         }\n//       );\n\n//       const data = await response.json();\n//       console.log(data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//   <div>\n//   {error && <div>{error}</div>}\n//   {blogs.map((blog) => (\n//   <div key={blog.id}>\n//   <h2>{blog.title}</h2>\n//   <p>{blog.content}</p>\n//   <span>{blog.likes}</span>\n//   <IconButton onClick={() => handleLikeClick(blog.id)}>\n//   <FavoriteIcon color={blog.liked ? \"inherit\" : \"error\"} />\n//   </IconButton>\n//   </div>\n//   ))}\n//   </div>\n//   );\n// //   }\n// const handleLikeClick = async (blogId) => {\n//   // Find the index of the blog post in the blogs state array\n//   const index = blogs.findIndex((blog) => blog.id === blogId);\n\n//   // Get the current liked and likes values for the blog post\n//   const { liked, likes, liked_by } = blogs[index];\n\n//   // Check if the user has already liked the post\n//   const userLiked = liked_by.some(user => user.id === currentUser.id);\n\n//   // Update the liked and likes values for the blog post\n//   const updatedBlogs = [...blogs];\n//   if (userLiked) {\n//     // Remove the user's ID from the liked_by array and decrease the like count\n//     const newLikedBy = liked_by.filter(user => user.id !== currentUser.id);\n//     updatedBlogs[index] = {\n//       ...blogs[index],\n//       liked: false,\n//       likes: likes - 1,\n//       liked_by: newLikedBy,\n//     };\n//   } else {\n//     // Add the user's ID to the liked_by array and increase the like count\n//     const newLikedBy = [...liked_by, { id: currentUser.id, username: currentUser.username }];\n//     updatedBlogs[index] = {\n//       ...blogs[index],\n//       liked: true,\n//       likes: likes + 1,\n//       liked_by: newLikedBy,\n//     };\n//   }\n//   setBlogs(updatedBlogs);\n\n//   // Update the API with the new liked state and like count\n//   try {\n//     const response = await fetch(\n//       `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n//       {\n//         method: \"PUT\",\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           liked: !liked,\n//           likes: liked ? likes - 1 : likes + 1,\n//           liked_by: newLikedBy,\n//         }),\n//       }\n//     );\n\n//     const data = await response.json();\n//     console.log(data);\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// // Set the current user in state when they log in\n// const [currentUser, setCurrentUser] = useState(null);\n\n// // Check if the user is logged in on page load\n// useEffect(() => {\n//   const token = localStorage.getItem(\"accessToken\");\n//   if (token) {\n//     fetch(\"http://localhost:8000/api/auth/user/\", {\n//       headers: {\n//         Authorization: `Bearer ${token}`,\n//       },\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setCurrentUser(data);\n//       })\n//       .catch((err) => {\n//         console.error(err);\n//       });\n//   }\n// }, []);\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Likes = () => {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    // Fetch the blogs from the API\n    fetch(\"http://localhost:8000/api/blog/\").then(res => res.json()).then(data => {\n      setBlogs(data);\n    }).catch(err => {\n      console.error(err);\n    });\n\n    // Check if the user is logged in on page load\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      fetch(\"http://localhost:8000/api/auth/user/\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => res.json()).then(data => {\n        setCurrentUser(data);\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }, []);\n  const handleLikeClick = async blogId => {\n    // Find the index of the blog post in the blogs state array\n    const index = blogs.findIndex(blog => blog.id === blogId);\n\n    // Get the current liked and likes values for the blog post\n    const {\n      liked,\n      likes,\n      liked_by\n    } = blogs[index];\n\n    // Check if the user has already liked the post\n    const userLiked = liked_by.some(user => user.id === currentUser.id);\n\n    // Update the liked and likes values for the blog post\n    const updatedBlogs = [...blogs];\n    if (userLiked) {\n      // Remove the user's ID from the liked_by array and decrease the like count\n      const newLikedBy = liked_by.filter(user => user.id !== currentUser.id);\n      updatedBlogs[index] = {\n        ...blogs[index],\n        liked: false,\n        likes: likes - 1,\n        liked_by: newLikedBy\n      };\n    } else {\n      // Add the user's ID to the liked_by array and increase the like count\n      const newLikedBy = [...liked_by, {\n        id: currentUser.id,\n        username: currentUser.username\n      }];\n      updatedBlogs[index] = {\n        ...blogs[index],\n        liked: true,\n        likes: likes + 1,\n        liked_by: newLikedBy\n      };\n    }\n    setBlogs(updatedBlogs);\n\n    // Update the API with the new liked state and like count\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          liked: !liked,\n          likes: liked ? likes - 1 : likes + 1,\n          liked_by: newLikedBy\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Likes: \", blog.likes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 5\n      }, this), / Render the like button if the user is logged in */, currentUser && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLikeClick(blog.id),\n        children: blog.liked ? \"Unlike\" : \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 5\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 5\n  }, this);\n};\n_s(Likes, \"6Rq8CZJadjiT1GV9+QIsjt3Fpf8=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","currentUser","setCurrentUser","fetch","then","res","json","data","catch","err","console","error","token","localStorage","getItem","headers","Authorization","handleLikeClick","blogId","index","findIndex","blog","id","liked","likes","liked_by","userLiked","some","user","updatedBlogs","newLikedBy","filter","username","response","method","body","JSON","stringify","log","children","map","title","fileName","_jsxFileName","lineNumber","columnNumber","content","onClick","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// // import { useState, useEffect } from \"react\";\n// // import { IconButton } from \"@mui/material\";\n// // import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// // export default function Likes() {\n// //   const [liked, setLiked] = useState(false);\n// //   const [likes, setLikes] = useState(0);\n\n// //   const [blogs, setBlogs] = useState([]);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchBlogs = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //           headers: {\n// //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //           },\n// //         });\n\n// //         const data = await response.json();\n// //         setBlogs(data);\n// //         setLikes(data.likes);\n// //       } catch (error) {\n// //         console.error(error);\n// //         setError(\"Failed to fetch blog posts.\");\n// //       }\n// //     };\n\n// //     fetchBlogs();\n// //   }, []);\n\n// //   const handleLikeClick = async (blogId) => {\n// //     if (liked) {\n// //       // User has already liked the post, so remove like\n// //       setLiked(false);\n// //       setLikes((prevLikes) => prevLikes - 1);\n// //     } else {\n// //       // User has not liked the post, so add like\n// //       setLiked(true);\n// //       setLikes((prevLikes) => prevLikes + 1);\n// //     }\n  \n// //     // Update the API with the new liked state and like count\n// //     try {\n// //       const response = await fetch(\n// //         `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify({\n// //             liked: liked,\n// //             likes: likes,\n// //           }),\n// //         }\n// //       );\n  \n// //       const data = await response.json();\n// //       console.log(data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n  \n\n// //   return (\n// //     <div>\n\n// // {blogs.map((blog) => (\n// //         <div key={blog.id}>\n// //           <h2>{blog.title}</h2>\n// //           <p>{blog.content}</p>\n// //           <span>{blog.likes}</span>\n// //           <IconButton onClick={() => handleLikeClick(blog.id)}>\n// //   <FavoriteIcon color={liked ? \"error\" : \"inherit\"} />\n// // </IconButton>\n// //         </div>\n// //       ))}\n// //     </div>\n// //   );\n// // }\n\n\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = async (blogId) => {\n//     // Find the index of the blog post in the blogs state array\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n\n//     // Get the current liked and likes values for the blog post\n//     const { liked, likes } = blogs[index];\n\n//     // Update the liked and likes values for the blog post\n//     const updatedBlogs = [...blogs];\n//     updatedBlogs[index] = {\n//       ...blogs[index],\n//       liked: !liked,\n//       likes: liked ? likes - 1 : likes + 1,\n//     };\n//     setBlogs(updatedBlogs);\n\n//     // Update the API with the new liked state and like count\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             liked: !liked,\n//             likes: liked ? likes - 1 : likes + 1,\n//           }),\n//         }\n//       );\n\n//       const data = await response.json();\n//       console.log(data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//   <div>\n//   {error && <div>{error}</div>}\n//   {blogs.map((blog) => (\n//   <div key={blog.id}>\n//   <h2>{blog.title}</h2>\n//   <p>{blog.content}</p>\n//   <span>{blog.likes}</span>\n//   <IconButton onClick={() => handleLikeClick(blog.id)}>\n//   <FavoriteIcon color={blog.liked ? \"inherit\" : \"error\"} />\n//   </IconButton>\n//   </div>\n//   ))}\n//   </div>\n//   );\n// //   }\n// const handleLikeClick = async (blogId) => {\n//   // Find the index of the blog post in the blogs state array\n//   const index = blogs.findIndex((blog) => blog.id === blogId);\n\n//   // Get the current liked and likes values for the blog post\n//   const { liked, likes, liked_by } = blogs[index];\n\n//   // Check if the user has already liked the post\n//   const userLiked = liked_by.some(user => user.id === currentUser.id);\n\n//   // Update the liked and likes values for the blog post\n//   const updatedBlogs = [...blogs];\n//   if (userLiked) {\n//     // Remove the user's ID from the liked_by array and decrease the like count\n//     const newLikedBy = liked_by.filter(user => user.id !== currentUser.id);\n//     updatedBlogs[index] = {\n//       ...blogs[index],\n//       liked: false,\n//       likes: likes - 1,\n//       liked_by: newLikedBy,\n//     };\n//   } else {\n//     // Add the user's ID to the liked_by array and increase the like count\n//     const newLikedBy = [...liked_by, { id: currentUser.id, username: currentUser.username }];\n//     updatedBlogs[index] = {\n//       ...blogs[index],\n//       liked: true,\n//       likes: likes + 1,\n//       liked_by: newLikedBy,\n//     };\n//   }\n//   setBlogs(updatedBlogs);\n\n//   // Update the API with the new liked state and like count\n//   try {\n//     const response = await fetch(\n//       `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n//       {\n//         method: \"PUT\",\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           liked: !liked,\n//           likes: liked ? likes - 1 : likes + 1,\n//           liked_by: newLikedBy,\n//         }),\n//       }\n//     );\n\n//     const data = await response.json();\n//     console.log(data);\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// // Set the current user in state when they log in\n// const [currentUser, setCurrentUser] = useState(null);\n\n// // Check if the user is logged in on page load\n// useEffect(() => {\n//   const token = localStorage.getItem(\"accessToken\");\n//   if (token) {\n//     fetch(\"http://localhost:8000/api/auth/user/\", {\n//       headers: {\n//         Authorization: `Bearer ${token}`,\n//       },\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setCurrentUser(data);\n//       })\n//       .catch((err) => {\n//         console.error(err);\n//       });\n//   }\n// }, []);\n\n\n\nimport React, { useState, useEffect } from \"react\";\n\nconst Likes = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    // Fetch the blogs from the API\n    fetch(\"http://localhost:8000/api/blog/\")\n      .then((res) => res.json())\n      .then((data) => {\n        setBlogs(data);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n\n    // Check if the user is logged in on page load\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      fetch(\"http://localhost:8000/api/auth/user/\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setCurrentUser(data);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n  }, []);\n\n  const handleLikeClick = async (blogId) => {\n    // Find the index of the blog post in the blogs state array\n    const index = blogs.findIndex((blog) => blog.id === blogId);\n\n    // Get the current liked and likes values for the blog post\n    const { liked, likes, liked_by } = blogs[index];\n\n    // Check if the user has already liked the post\n    const userLiked = liked_by.some((user) => user.id === currentUser.id);\n\n    // Update the liked and likes values for the blog post\n    const updatedBlogs = [...blogs];\n    if (userLiked) {\n      // Remove the user's ID from the liked_by array and decrease the like count\n      const newLikedBy = liked_by.filter((user) => user.id !== currentUser.id);\n      updatedBlogs[index] = {\n        ...blogs[index],\n        liked: false,\n        likes: likes - 1,\n        liked_by: newLikedBy,\n      };\n    } else {\n      // Add the user's ID to the liked_by array and increase the like count\n      const newLikedBy = [\n        ...liked_by,\n        { id: currentUser.id, username: currentUser.username },\n      ];\n      updatedBlogs[index] = {\n        ...blogs[index],\n        liked: true,\n        likes: likes + 1,\n        liked_by: newLikedBy,\n      };\n    }\n    setBlogs(updatedBlogs);\n\n    // Update the API with the new liked state and like count\n    try {\n      const response = await fetch(\n        `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n        {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            liked: !liked,\n            likes: liked ? likes - 1 : likes + 1,\n            liked_by: newLikedBy,\n          }),\n        }\n      );\n\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return (\n    <div>\n    {/* Render the blogs */}\n    {blogs.map((blog) => (\n    <div key={blog.id}>\n    <h2>{blog.title}</h2>\n    <p>{blog.content}</p>\n    <p>Likes: {blog.likes}</p>\n    {/ Render the like button if the user is logged in */}\n    {currentUser && (\n    <button onClick={() => handleLikeClick(blog.id)}>\n    {blog.liked ? \"Unlike\" : \"Like\"}\n    </button>\n    )}\n    </div>\n    ))}\n    </div>\n    );\n    }"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}