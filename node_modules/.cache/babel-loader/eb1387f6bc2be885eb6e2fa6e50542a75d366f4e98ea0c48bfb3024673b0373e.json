{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [liked, setLiked] = useState(false);\n//   const [likes, setLikes] = useState(0);\n\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//         setLikes(data.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = async (blogId) => {\n//     if (liked) {\n//       // User has already liked the post, so remove like\n//       setLiked(false);\n//       setLikes((prevLikes) => prevLikes - 1);\n//     } else {\n//       // User has not liked the post, so add like\n//       setLiked(true);\n//       setLikes((prevLikes) => prevLikes + 1);\n//     }\n\n//     // Update the API with the new liked state and like count\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             liked: liked,\n//             likes: likes,\n//           }),\n//         }\n//       );\n\n//       const data = await response.json();\n//       console.log(data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div>\n\n// {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           <span>{blog.likes}</span>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n//   <FavoriteIcon color={liked ? \"error\" : \"inherit\"} />\n// </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n        setBlogs(data);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = async blogId => {\n    // Find the index of the blog post in the blogs state array\n    const index = blogs.findIndex(blog => blog.id === blogId);\n\n    // Get the current liked and likes values for the blog post\n    const {\n      liked,\n      likes\n    } = blogs[index];\n\n    // Update the liked and likes values for the blog post\n    const updatedBlogs = [...blogs];\n    updatedBlogs[index] = {\n      ...blogs[index],\n      liked: !liked,\n      likes: liked ? likes - 1 : likes + 1\n    };\n    setBlogs(updatedBlogs);\n\n    // Update the API with the new liked state and like count\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          liked: !liked,\n          likes: liked ? likes - 1 : likes + 1\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: blog.likes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => handleLikeClick(blog.id),\n        children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          color: blog.liked ? \"error\" : \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 3\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 3\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 3\n  }, this);\n}\n_s(Likes, \"HwLKShFMp+eoMZpLYWTM+wtnYvk=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","console","handleLikeClick","blogId","index","findIndex","blog","id","liked","likes","updatedBlogs","method","body","JSON","stringify","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","content","onClick","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [liked, setLiked] = useState(false);\n//   const [likes, setLikes] = useState(0);\n\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//         setLikes(data.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = async (blogId) => {\n//     if (liked) {\n//       // User has already liked the post, so remove like\n//       setLiked(false);\n//       setLikes((prevLikes) => prevLikes - 1);\n//     } else {\n//       // User has not liked the post, so add like\n//       setLiked(true);\n//       setLikes((prevLikes) => prevLikes + 1);\n//     }\n  \n//     // Update the API with the new liked state and like count\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             liked: liked,\n//             likes: likes,\n//           }),\n//         }\n//       );\n  \n//       const data = await response.json();\n//       console.log(data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n  \n\n//   return (\n//     <div>\n\n// {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           <span>{blog.likes}</span>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n//   <FavoriteIcon color={liked ? \"error\" : \"inherit\"} />\n// </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n        setBlogs(data);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n\n  const handleLikeClick = async (blogId) => {\n    // Find the index of the blog post in the blogs state array\n    const index = blogs.findIndex((blog) => blog.id === blogId);\n\n    // Get the current liked and likes values for the blog post\n    const { liked, likes } = blogs[index];\n\n    // Update the liked and likes values for the blog post\n    const updatedBlogs = [...blogs];\n    updatedBlogs[index] = {\n      ...blogs[index],\n      liked: !liked,\n      likes: liked ? likes - 1 : likes + 1,\n    };\n    setBlogs(updatedBlogs);\n\n    // Update the API with the new liked state and like count\n    try {\n      const response = await fetch(\n        `http://localhost:8000/api/blog/likes/update/${blogId}/`,\n        {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            liked: !liked,\n            likes: liked ? likes - 1 : likes + 1,\n          }),\n        }\n      );\n\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n  <div>\n  {error && <div>{error}</div>}\n  {blogs.map((blog) => (\n  <div key={blog.id}>\n  <h2>{blog.title}</h2>\n  <p>{blog.content}</p>\n  <span>{blog.likes}</span>\n  <IconButton onClick={() => handleLikeClick(blog.id)}>\n  <FavoriteIcon color={blog.liked ? \"error\" : \"inherit\"} />\n  </IconButton>\n  </div>\n  ))}\n  </div>\n  );\n  }"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;UACnEC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UAC/D;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;QAClCX,QAAQ,CAACU,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOT,KAAK,EAAE;QACdW,OAAO,CAACX,KAAK,CAACA,KAAK,CAAC;QACpBC,QAAQ,CAAC,6BAA6B,CAAC;MACzC;IACF,CAAC;IAEDC,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,eAAe,GAAG,MAAOC,MAAM,IAAK;IACxC;IACA,MAAMC,KAAK,GAAGhB,KAAK,CAACiB,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAAC;;IAE3D;IACA,MAAM;MAAEK,KAAK;MAAEC;IAAM,CAAC,GAAGrB,KAAK,CAACgB,KAAK,CAAC;;IAErC;IACA,MAAMM,YAAY,GAAG,CAAC,GAAGtB,KAAK,CAAC;IAC/BsB,YAAY,CAACN,KAAK,CAAC,GAAG;MACpB,GAAGhB,KAAK,CAACgB,KAAK,CAAC;MACfI,KAAK,EAAE,CAACA,KAAK;MACbC,KAAK,EAAED,KAAK,GAAGC,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG;IACrC,CAAC;IACDpB,QAAQ,CAACqB,YAAY,CAAC;;IAEtB;IACA,IAAI;MACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CACzB,+CAA8CS,MAAO,GAAE,EACxD;QACEQ,MAAM,EAAE,KAAK;QACbhB,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE,EAAC;UAC9D,cAAc,EAAE;QAClB,CAAC;QACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBN,KAAK,EAAE,CAACA,KAAK;UACbC,KAAK,EAAED,KAAK,GAAGC,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG;QACrC,CAAC;MACH,CAAC,CACF;MAED,MAAMV,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;MAClCC,OAAO,CAACc,GAAG,CAAChB,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACAL,OAAA;IAAA+B,QAAA,GACC1B,KAAK,iBAAIL,OAAA;MAAA+B,QAAA,EAAM1B;IAAK;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO,EAC3BhC,KAAK,CAACiC,GAAG,CAAEf,IAAI,iBAChBrB,OAAA;MAAA+B,QAAA,gBACA/B,OAAA;QAAA+B,QAAA,EAAKV,IAAI,CAACgB;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACrBnC,OAAA;QAAA+B,QAAA,EAAIV,IAAI,CAACiB;MAAO;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACrBnC,OAAA;QAAA+B,QAAA,EAAOV,IAAI,CAACG;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACzBnC,OAAA,CAACH,UAAU;QAAC0C,OAAO,EAAEA,CAAA,KAAMtB,eAAe,CAACI,IAAI,CAACC,EAAE,CAAE;QAAAS,QAAA,eACpD/B,OAAA,CAACF,YAAY;UAAC0C,KAAK,EAAEnB,IAAI,CAACE,KAAK,GAAG,OAAO,GAAG;QAAU;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC5C;IAAA,GANHd,IAAI,CAACC,EAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAQhB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEN;AAACjC,EAAA,CA/EqBD,KAAK;AAAAwC,EAAA,GAALxC,KAAK;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}