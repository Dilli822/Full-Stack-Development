{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [authorId, setAuthorId] = useState(0);\n  const [countLikes, setCountLikes] = useState(0);\n  const [likedBy, setLikedBy] = useState(0);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setLikedBy(blogsWithLiked.liked_by);\n        setCountLikes(blogsWithLiked);\n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  console.log(\"likedBy \", likedBy);\n\n  // const handleLikeClick = async (blogId) => {\n  //   try {\n  //     const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n  //     const newLikedState = !blogToUpdate.liked;\n  //     const newLikes = newLikedState\n  //       ? blogToUpdate.likes + 1\n  //       : blogToUpdate.likes - 1;\n\n  //     const updatedBlogs = blogs.map((blog) =>\n  //       blog.id === blogId\n  //         ? { ...blog, liked: newLikedState, likes: newLikes }\n  //         : blog\n  //     );\n  //     setBlogs(updatedBlogs);\n\n  //     // Update liked_by state based on new liked state\n  //     const newLikedByState = newLikedState\n  //       ? [...blogToUpdate.liked_by, authorId]\n  //       : blogToUpdate.liked_by.filter((id) => id !== authorId);\n  //     setLikedBy(newLikedByState);\n\n  //     // Update likes count\n  //     setCountLikes(newLikes);\n\n  //     // Call API to update like state\n  //     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //       method: \"PUT\",\n  //       headers: {\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({\n  //         liked: newLikedState,\n  //         likes: newLikes,\n  //       }),\n  //     });\n  //   } catch (error) {\n  //     console.error(error);\n  //     setError(\"Failed to update like state.\");\n  //   }\n  // };\n  // const handleLikeClick = async (blogId) => {\n  //   try {\n  //     const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n  //     const newLikedState = !blogToUpdate.liked;\n  //     let newLikes = blogToUpdate.likes;\n  //     let newLikedByState = [...blogToUpdate.liked_by];\n\n  //     if (newLikedState) {\n  //       newLikes += 1;\n  //       newLikedByState.push(authorId);\n  //     } else {\n  //       newLikes -= 1;\n  //       newLikedByState = newLikedByState.filter((id) => id !== authorId);\n  //     }\n\n  //     const updatedBlogs = blogs.map((blog) =>\n  //       blog.id === blogId\n  //         ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n  //         : blog\n  //     );\n  //     setBlogs(updatedBlogs);\n\n  //     // Update likes count\n  //     setCountLikes(newLikes);\n\n  //     // Call API to update like state\n  //     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //       method: \"PUT\",\n  //       headers: {\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({\n  //         liked: newLikedState,\n  //         likes: newLikes,\n  //         liked_by: newLikedByState\n  //       }),\n  //     });\n  //   } catch (error) {\n  //     console.error(error);\n  //     setError(\"Failed to update like state.\");\n  //   }\n  // };\n\n  const handleLikeClick = async blogId => {\n    try {\n      const blogToUpdate = blogs.find(blog => blog.id === blogId);\n      const isLikedByUser = blogToUpdate.liked_by.includes(authorId);\n      const newLikedState = !isLikedByUser;\n      const newLikes = isLikedByUser ? blogToUpdate.likes - 1 : blogToUpdate.likes + 1;\n      const updatedBlogs = blogs.map(blog => blog.id === blogId ? {\n        ...blog,\n        liked: newLikedState,\n        likes: newLikes\n      } : blog);\n      setBlogs(updatedBlogs);\n\n      // Update liked_by state based on new liked state\n      const newLikedByState = newLikedState ? [...blogToUpdate.liked_by, authorId] : blogToUpdate.liked_by.filter(id => id !== authorId);\n      setLikedBy(newLikedByState);\n\n      // Update likes count\n      setCountLikes(newLikes);\n\n      // Call API to update like state\n      await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          liked: newLikedState,\n          likes: newLikes\n        })\n      });\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => handleLikeClick(blog.id),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: blog.likes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          color: blog.liked_by.includes(blog.author) ? \"error\" : \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)\n    }, blog.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"N3edkMVcLUYF0VOCVz1RVOJ0tJI=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","authorId","setAuthorId","countLikes","setCountLikes","likedBy","setLikedBy","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","liked","liked_by","author","console","log","handleLikeClick","blogId","blogToUpdate","find","id","isLikedByUser","includes","newLikedState","newLikes","likes","updatedBlogs","newLikedByState","filter","method","body","JSON","stringify","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [authorId, setAuthorId] = useState(0);\n  const [countLikes, setCountLikes] = useState(0);\n  const [likedBy, setLikedBy] = useState(0);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        setLikedBy(blogsWithLiked.liked_by);\n        setCountLikes(blogsWithLiked);\n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n\n  console.log(\"likedBy \", likedBy);\n\n  // const handleLikeClick = async (blogId) => {\n  //   try {\n  //     const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n  //     const newLikedState = !blogToUpdate.liked;\n  //     const newLikes = newLikedState\n  //       ? blogToUpdate.likes + 1\n  //       : blogToUpdate.likes - 1;\n\n  //     const updatedBlogs = blogs.map((blog) =>\n  //       blog.id === blogId\n  //         ? { ...blog, liked: newLikedState, likes: newLikes }\n  //         : blog\n  //     );\n  //     setBlogs(updatedBlogs);\n\n  //     // Update liked_by state based on new liked state\n  //     const newLikedByState = newLikedState\n  //       ? [...blogToUpdate.liked_by, authorId]\n  //       : blogToUpdate.liked_by.filter((id) => id !== authorId);\n  //     setLikedBy(newLikedByState);\n\n  //     // Update likes count\n  //     setCountLikes(newLikes);\n\n  //     // Call API to update like state\n  //     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //       method: \"PUT\",\n  //       headers: {\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({\n  //         liked: newLikedState,\n  //         likes: newLikes,\n  //       }),\n  //     });\n  //   } catch (error) {\n  //     console.error(error);\n  //     setError(\"Failed to update like state.\");\n  //   }\n  // };\n  // const handleLikeClick = async (blogId) => {\n  //   try {\n  //     const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n  //     const newLikedState = !blogToUpdate.liked;\n  //     let newLikes = blogToUpdate.likes;\n  //     let newLikedByState = [...blogToUpdate.liked_by];\n      \n  //     if (newLikedState) {\n  //       newLikes += 1;\n  //       newLikedByState.push(authorId);\n  //     } else {\n  //       newLikes -= 1;\n  //       newLikedByState = newLikedByState.filter((id) => id !== authorId);\n  //     }\n      \n  //     const updatedBlogs = blogs.map((blog) =>\n  //       blog.id === blogId\n  //         ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n  //         : blog\n  //     );\n  //     setBlogs(updatedBlogs);\n  \n  //     // Update likes count\n  //     setCountLikes(newLikes);\n  \n  //     // Call API to update like state\n  //     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n  //       method: \"PUT\",\n  //       headers: {\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify({\n  //         liked: newLikedState,\n  //         likes: newLikes,\n  //         liked_by: newLikedByState\n  //       }),\n  //     });\n  //   } catch (error) {\n  //     console.error(error);\n  //     setError(\"Failed to update like state.\");\n  //   }\n  // };\n\n  const handleLikeClick = async (blogId) => {\n    try {\n      const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n      const isLikedByUser = blogToUpdate.liked_by.includes(authorId);\n      const newLikedState = !isLikedByUser;\n      const newLikes = isLikedByUser ? blogToUpdate.likes - 1 : blogToUpdate.likes + 1;\n  \n      const updatedBlogs = blogs.map((blog) =>\n        blog.id === blogId\n          ? { ...blog, liked: newLikedState, likes: newLikes }\n          : blog\n      );\n      setBlogs(updatedBlogs);\n  \n      // Update liked_by state based on new liked state\n      const newLikedByState = newLikedState\n        ? [...blogToUpdate.liked_by, authorId]\n        : blogToUpdate.liked_by.filter((id) => id !== authorId);\n      setLikedBy(newLikedByState);\n  \n      // Update likes count\n      setCountLikes(newLikes);\n  \n      // Call API to update like state\n      await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          liked: newLikedState,\n          likes: newLikes,\n        }),\n      });\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    }\n  };\n  \n  \n  return (\n    <div>\n      {blogs.map((blog) => (\n        <div key={blog.id}>\n          <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n            <span>{blog.likes}</span>\n            <FavoriteIcon color={blog.liked_by.includes(blog.author) ? \"error\" : \"inherit\"} />\n\n          </IconButton>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}