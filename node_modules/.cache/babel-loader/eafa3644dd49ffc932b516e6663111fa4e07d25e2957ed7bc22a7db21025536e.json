{"ast":null,"code":"// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n\n// function Signup() {\n//     const [username, setUsername] = useState(\"\");\n//     const [email, setEmail] = useState(\"\");\n//     const [password, setPassword] = useState(\"\");\n//     const [confirmPassword, setConfirmPassword] = useState(\"\");\n//     const [passwordValidation, setPasswordValidation] = useState(\"\");\n//     const [emailValidation, setEmailValidation] = useState(\"\");\n//     const [confirmPwdMsg, setConfirmPwdMsg] = useState(\"\");\n//     const [register, setRegister] = useState(false);\n//     const [message, setMessage] = useState(\"\");\n//     const [apiError, setApiError] = useState(\"\");\n//     const [userErrorMessage,setUserErrorMessage] = useState(\"\");\n//     const [usernameExistsError, setUsernameExistsError] = useState(null);\n//     const [errorMsg, setErrorMsg] = useState(\"\");\n//     const [errorMessage, setErrorMessage] = useState('');\n//     const [emailExist,setEmailExist] = useState('');\n//     const navigate = useNavigate();\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         // added check for empty input fields\n//         if(!username || !password || !email || !confirmPassword) {setErrorMsg(\"Please Fill the Input!\")}\n\n//         const fetchdata = fetch(\"http://localhost:8000/api/register/\", {\n//             method: \"POST\",\n//             headers: { \"Content-Type\": \"application/json\" },\n//             body: JSON.stringify({ username, email, password }),\n//             }).then((response) => {\n//                 response.json().then((data) => {\n//                     console.log(data);\n//                     if (data.username) {\n//                       console.log(data.username);\n//                       setErrorMessage(data.username);\n//                     } else if (data.email) {\n//                       console.log(data.email);\n//                       setEmailExist(data.email);\n//                     }\n//                   }).catch(error => {\n//                     console.error(error);\n//             });\n\n//                 if (response.status == 201 || response.ok) {\n//                     setRegister(true);\n//                     setMessage(\"Successfully signed up! Please wait while you are redirected to the login page...\");\n//                     setTimeout(() => {\n//                         navigate(\"/login\");\n//                     }, 1500);\n//                 } else if (response.status === 409) {\n//                   // setUserErrorMessage(response.message);\n//                   setErrorMessage(\"USERNAME EXISTS\");\n//                   throw new Error('Username is already taken');\n//                 } else if(response.status == 400){\n//                     // setApiError(\"Bad request! An error occurred while signing up. Please try again.\");\n//                 }\n//                 else {\n//                   // console.log(response.JSON()); \n//                   setApiError(\"Something went wrong!\");\n//                 }\n//             })\n\n//             .catch((error) => {\n//                 console.error(error);\n//                 console.log(error.message);\n\n//             });\n//     };\n\n//     const handleUsernameChange = (event) => {\n\n//         setUsername(event.target.value);\n//     };\n\n//     const handleEmailChange = (event) => {\n//       const { value } = event.target;\n//       setEmail(value);\n\n//       // Email validation using regular expression\n//       const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n//       (!emailRegex.test(value)) ? setEmailValidation('Please enter a valid email address.') :  setEmailValidation('');\n//       setEmail(event.target.value);\n//     };\n\n//     const handlePasswordChange = (event) => {\n//         setPassword(event.target.value);\n//         const passwordRegex = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n//         event.target.value.length <= 8 && !passwordRegex.test(password) ? setPasswordValidation(\"Password must contain at least 8 characters including 1 uppercase, 1 lowercase, 1 digit and 1 special character\") : setPasswordValidation(\"\");\n//     };\n\n//     const handleConfirmPasswordChange = (event) => {\n//         setConfirmPassword(event.target.value);\n//         event.target.value !== password ? setConfirmPwdMsg(\"Passwords do not match\") : setConfirmPwdMsg(\"\");\n//     };\n\n//     return (\n//         <div>\n//             {register ? (\n//                 <div>\n//                     <h4>{message}</h4>\n//                 </div>\n//             ) : (\n//                 <form onSubmit={handleSubmit} style={{ }}>\n//                     <div>                   \n//                         {/* <label htmlFor=\"username\">Username:</label> */}\n//                         <div className=\"validationError\">\n//                         {/* {userErrorMessage} {usernameExistsError && <p>{usernameExistsError}</p>}  */}\n//                         {/* {errorMessage && <div className=\"validationError\">{errorMessage}</div>}  */}\n//                         {errorMsg}</div>\n//                         <input type=\"text\" id=\"username\" value={username} onChange={handleUsernameChange} placeholder=\"Enter Username\"/>\n//                     </div>\n//                     <div>\n\n//                         {/* <label htmlFor=\"email\">Email:</label> */}\n//                         <div className=\"validationError\">{emailValidation} {errorMsg} {emailExist}  </div>\n//                         <input type=\"email\" id=\"email\" value={email} onChange={handleEmailChange} placeholder=\"Enter Email\"/>\n//                     </div>\n//                     <div>\n//                         {/* <label htmlFor=\"password\">Password:</label> */}\n//                         <div className=\"validationError\">{passwordValidation && <span>{passwordValidation}</span>} {errorMsg} </div>\n//                         <input type=\"password\" id=\"password\" value={password} onChange={handlePasswordChange} placeholder=\"Enter Password\"/>\n//                     </div>\n//                     <div>\n//                         {/* <label htmlFor=\"password\">Confirm Password:</label> */}\n//                         <div className=\"validationError\">{confirmPwdMsg && <span>{confirmPwdMsg}</span>} {errorMsg} </div>\n//                         <input type=\"password\" id=\"confirmPassword\" value={confirmPassword} onChange={handleConfirmPasswordChange} placeholder=\"Enter Confirm Password\"/>\n//                     </div>\n//                     <br></br>\n\n//                     <div className=\"validationError\">{apiError && <h4>{apiError}</h4>}</div>\n\n//                     <div>\n//                         <button type=\"submit\">Signup</button>\n//                         <Link to=\"/login\"> <a>Already Have an Account? Login </a></Link>\n//                     </div>\n//                 </form>\n//             )}\n\n//         </div>\n//     );\n// }\n\n// export default Signup;","map":{"version":3,"names":[],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/signup.js"],"sourcesContent":["// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n\n// function Signup() {\n//     const [username, setUsername] = useState(\"\");\n//     const [email, setEmail] = useState(\"\");\n//     const [password, setPassword] = useState(\"\");\n//     const [confirmPassword, setConfirmPassword] = useState(\"\");\n//     const [passwordValidation, setPasswordValidation] = useState(\"\");\n//     const [emailValidation, setEmailValidation] = useState(\"\");\n//     const [confirmPwdMsg, setConfirmPwdMsg] = useState(\"\");\n//     const [register, setRegister] = useState(false);\n//     const [message, setMessage] = useState(\"\");\n//     const [apiError, setApiError] = useState(\"\");\n//     const [userErrorMessage,setUserErrorMessage] = useState(\"\");\n//     const [usernameExistsError, setUsernameExistsError] = useState(null);\n//     const [errorMsg, setErrorMsg] = useState(\"\");\n//     const [errorMessage, setErrorMessage] = useState('');\n//     const [emailExist,setEmailExist] = useState('');\n//     const navigate = useNavigate();\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         // added check for empty input fields\n//         if(!username || !password || !email || !confirmPassword) {setErrorMsg(\"Please Fill the Input!\")}\n          \n\n//         const fetchdata = fetch(\"http://localhost:8000/api/register/\", {\n//             method: \"POST\",\n//             headers: { \"Content-Type\": \"application/json\" },\n//             body: JSON.stringify({ username, email, password }),\n//             }).then((response) => {\n//                 response.json().then((data) => {\n//                     console.log(data);\n//                     if (data.username) {\n//                       console.log(data.username);\n//                       setErrorMessage(data.username);\n//                     } else if (data.email) {\n//                       console.log(data.email);\n//                       setEmailExist(data.email);\n//                     }\n//                   }).catch(error => {\n//                     console.error(error);\n//             });\n\n//                 if (response.status == 201 || response.ok) {\n//                     setRegister(true);\n//                     setMessage(\"Successfully signed up! Please wait while you are redirected to the login page...\");\n//                     setTimeout(() => {\n//                         navigate(\"/login\");\n//                     }, 1500);\n//                 } else if (response.status === 409) {\n//                   // setUserErrorMessage(response.message);\n//                   setErrorMessage(\"USERNAME EXISTS\");\n//                   throw new Error('Username is already taken');\n//                 } else if(response.status == 400){\n//                     // setApiError(\"Bad request! An error occurred while signing up. Please try again.\");\n//                 }\n//                 else {\n//                   // console.log(response.JSON()); \n//                   setApiError(\"Something went wrong!\");\n//                 }\n//             })\n     \n//             .catch((error) => {\n//                 console.error(error);\n//                 console.log(error.message);\n          \n                \n//             });\n//     };\n\n//     const handleUsernameChange = (event) => {\n\n//         setUsername(event.target.value);\n//     };\n\n//     const handleEmailChange = (event) => {\n//       const { value } = event.target;\n//       setEmail(value);\n\n//       // Email validation using regular expression\n//       const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n//       (!emailRegex.test(value)) ? setEmailValidation('Please enter a valid email address.') :  setEmailValidation('');\n//       setEmail(event.target.value);\n//     };\n\n//     const handlePasswordChange = (event) => {\n//         setPassword(event.target.value);\n//         const passwordRegex = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n//         event.target.value.length <= 8 && !passwordRegex.test(password) ? setPasswordValidation(\"Password must contain at least 8 characters including 1 uppercase, 1 lowercase, 1 digit and 1 special character\") : setPasswordValidation(\"\");\n//     };\n\n//     const handleConfirmPasswordChange = (event) => {\n//         setConfirmPassword(event.target.value);\n//         event.target.value !== password ? setConfirmPwdMsg(\"Passwords do not match\") : setConfirmPwdMsg(\"\");\n//     };\n\n//     return (\n//         <div>\n//             {register ? (\n//                 <div>\n//                     <h4>{message}</h4>\n//                 </div>\n//             ) : (\n//                 <form onSubmit={handleSubmit} style={{ }}>\n//                     <div>                   \n//                         {/* <label htmlFor=\"username\">Username:</label> */}\n//                         <div className=\"validationError\">\n//                         {/* {userErrorMessage} {usernameExistsError && <p>{usernameExistsError}</p>}  */}\n//                         {/* {errorMessage && <div className=\"validationError\">{errorMessage}</div>}  */}\n//                         {errorMsg}</div>\n//                         <input type=\"text\" id=\"username\" value={username} onChange={handleUsernameChange} placeholder=\"Enter Username\"/>\n//                     </div>\n//                     <div>\n                    \n//                         {/* <label htmlFor=\"email\">Email:</label> */}\n//                         <div className=\"validationError\">{emailValidation} {errorMsg} {emailExist}  </div>\n//                         <input type=\"email\" id=\"email\" value={email} onChange={handleEmailChange} placeholder=\"Enter Email\"/>\n//                     </div>\n//                     <div>\n//                         {/* <label htmlFor=\"password\">Password:</label> */}\n//                         <div className=\"validationError\">{passwordValidation && <span>{passwordValidation}</span>} {errorMsg} </div>\n//                         <input type=\"password\" id=\"password\" value={password} onChange={handlePasswordChange} placeholder=\"Enter Password\"/>\n//                     </div>\n//                     <div>\n//                         {/* <label htmlFor=\"password\">Confirm Password:</label> */}\n//                         <div className=\"validationError\">{confirmPwdMsg && <span>{confirmPwdMsg}</span>} {errorMsg} </div>\n//                         <input type=\"password\" id=\"confirmPassword\" value={confirmPassword} onChange={handleConfirmPasswordChange} placeholder=\"Enter Confirm Password\"/>\n//                     </div>\n//                     <br></br>\n\n//                     <div className=\"validationError\">{apiError && <h4>{apiError}</h4>}</div>\n                   \n//                     <div>\n//                         <button type=\"submit\">Signup</button>\n//                         <Link to=\"/login\"> <a>Already Have an Account? Login </a></Link>\n//                     </div>\n//                 </form>\n//             )}\n            \n//         </div>\n//     );\n// }\n\n// export default Signup;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}