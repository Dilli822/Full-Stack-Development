{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/drf-blog-api-master/django/frontend/src/blog.js\";\n// import React, { useState, useEffect } from 'react'\n\nimport UpdateBlog from \"./components/blogapp/update\";\n\n// function Blog() {\n//   const [blogs, setBlogs] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [newBlogTitle, setNewBlogTitle] = useState('')\n//   const [newBlogContent, setNewBlogContent] = useState('')\n//   const [newBlogAuthorName, setNewBlogAuthorName] = useState('')\n//   const [selectedBlogId, setSelectedBlogId] = useState('')\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n//   useEffect(() => {\n//     fetch('http://localhost:8000/api/blog/', {\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs(data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.error(error))\n//   }, [])\n\n//   const handleCreate = () => {\n//     const newBlog = {\n//       title: newBlogTitle,\n//       content: newBlogContent,\n//       authorName: newBlogAuthorName\n//     }\n\n//     fetch('http://localhost:8000/api/blog/', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(newBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs([...blogs, data])\n//       setNewBlogTitle('')\n//       setNewBlogContent('')\n//       setNewBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleUpdate = () => {\n//     const updatedBlog = {\n//       id: selectedBlogId,\n//       title: updatedBlogTitle,\n//       content: updatedBlogContent,\n//       authorName: updatedBlogAuthorName\n//     }\n\n//     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(updatedBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       const index = blogs.findIndex(blog => blog.id === data.id)\n//       const newBlogs = [...blogs]\n//       newBlogs[index] = data\n//       setBlogs(newBlogs)\n//       setSelectedBlogId('')\n//       setUpdatedBlogTitle('')\n//       setUpdatedBlogContent('')\n//       setUpdatedBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleDelete = (id) => {\n//     if (window.confirm('Are you sure you want to delete this post?')) {\n//       fetch(`http://localhost:8000/api/blog/${id}/`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       })\n//       .then(response => {\n//         if (response.ok) {\n//           setBlogs(blogs.filter(blog => blog.id !== id))\n//         } else {\n//           throw new Error('Delete failed')\n//         }\n//       })\n//       .catch(error => {\n//         console.error(error)\n//       })\n//     }\n//   }\n\n//   if (loading) {\n//     return <p>Loading...</p>\n//   }\n//   return (\n//     <div>\n//       <h1>Blog List</h1>\n//     <ul>\n//       {blogs.map(blog => (\n//         <li key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           <p>Author: {blog.authorName}</p>\n//           <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//           <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//         </li>\n//       ))}\n//     </ul>\n//     {selectedBlogId && (\n//       <div>\n//         <h2>Edit Blog</h2>\n//         {blogs.map(blog => {\n//           if (blog.id === selectedBlogId) {\n//             return (\n//               <div key={blog.id}>\n//                 <label>\n//                   Title:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogTitle || blog.title}\n//                     onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Content:\n//                   <textarea\n//                     value={updatedBlogContent || blog.content}\n//                     onChange={(event) => setUpdatedBlogContent(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Author Name:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogAuthorName || blog.authorName}\n//                     onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//               </div>\n//             );\n//           } else {\n//             return null;\n//           }\n//         })}\n//         <button onClick={handleUpdate}>Save Changes</button>\n//         <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n//       </div>\n//     )}\n//     <div>\n//     <h2>Create New Blog</h2>\n//     <label>\n//     Title:\n//     <input\n//     type=\"text\"\n//     value={newBlogTitle}\n//     onChange={(event) => setNewBlogTitle(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Content:\n//     <textarea\n//     value={newBlogContent}\n//     onChange={(event) => setNewBlogContent(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Author Name:\n//     <input\n//     type=\"text\"\n//     value={newBlogAuthorName}\n//     onChange={(event) => setNewBlogAuthorName(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <button onClick={handleCreate}>Create Blog</button>\n//     </div>\n//     </div>\n//     )\n//     }\n// export default Blog;\n\n// import React, { useState, useEffect } from 'react'\n\n// export default function Blog() {\n//   const [blogs, setBlogs] = useState([])\n//   const [loading, setLoading] = useState(true)\n\n//   const [selectedBlogId, setSelectedBlogId] = useState('')\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n//   useEffect(() => {\n//     fetch('http://localhost:8000/api/blog/', {\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs(data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.error(error))\n//   }, [])\n\n//   const handleUpdate = () => {\n//     const updatedBlog = {\n//       id: selectedBlogId,\n//       title: updatedBlogTitle === '' ? '' : updatedBlogTitle || blogs.find(blog => blog.id === selectedBlogId).title,\n//       content: updatedBlogContent === '' ? '' : updatedBlogContent || blogs.find(blog => blog.id === selectedBlogId).content,\n//       authorName: updatedBlogAuthorName === '' ? '' : updatedBlogAuthorName || blogs.find(blog => blog.id === selectedBlogId).authorName\n//     }\n//     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(updatedBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       const index = blogs.findIndex(blog => blog.id === data.id)\n//       const newBlogs = [...blogs]\n//       newBlogs[index] = data\n//       setBlogs(newBlogs)\n//       setSelectedBlogId('')\n//       setUpdatedBlogTitle('')\n//       setUpdatedBlogContent('')\n//       setUpdatedBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleDelete = (blogId) => {\n//     fetch(`http://localhost:8000/api/blog/${blogId}/`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(() => {\n//       const newBlogs = blogs.filter(blog => blog.id !== blogId)\n//       setBlogs(newBlogs)\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   if (loading) {\n//     return <p>Loading...</p>\n//   }\n\n//   return (\n//     <div>\n//       <h1>Blog List</h1>\n//       <ul>\n//         {blogs.map(blog => (\n//           <li key={blog.id}>\n//             <h2>{blog.title}</h2>\n//             <p>{blog.content}</p>\n//             <p>Author: {blog.authorName}</p>\n//             <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//             <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//       {selectedBlogId && (\n//   <div>\n//     <h2>Edit Blog</h2>\n//     {blogs.map(blog => {\n//       if (blog.id === selectedBlogId) {\n//         return (\n//           <div key={blog.id}>\n//             <label>\n//               Title:\n//               <input\n//                 type=\"text\"\n//                 value={updatedBlogTitle || blog.title}\n//                 onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n//               />\n//             </label>\n//             <br />\n//             <label>\n//               Content:\n//               <textarea\n//                 value={updatedBlogContent || blog.content}\n//                 onChange={(event) => setUpdatedBlogContent(event.target.value)}\n//               />\n//             </label>\n//             <br />\n//             <label>\n//               Author Name:\n//               <input\n//                 type=\"text\"\n//                 value={updatedBlogAuthorName || blog.authorName}\n//                 onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n//               />\n//             </label>\n//             <br />\n//           </div>\n//         );\n//       } else {\n//         return null;\n//       }\n//     })}\n//     <button onClick={handleUpdate}>Save Changes</button>\n//     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n//   </div>\n// )}\n\n// </div>\n// )}\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Blog() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 5\n  }, this);\n}\n_c = Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["UpdateBlog","jsxDEV","_jsxDEV","Blog","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/drf-blog-api-master/django/frontend/src/blog.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react'\n\nimport UpdateBlog from \"./components/blogapp/update\";\n\n// function Blog() {\n//   const [blogs, setBlogs] = useState([])\n//   const [loading, setLoading] = useState(true)\n//   const [newBlogTitle, setNewBlogTitle] = useState('')\n//   const [newBlogContent, setNewBlogContent] = useState('')\n//   const [newBlogAuthorName, setNewBlogAuthorName] = useState('')\n//   const [selectedBlogId, setSelectedBlogId] = useState('')\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n//   useEffect(() => {\n//     fetch('http://localhost:8000/api/blog/', {\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs(data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.error(error))\n//   }, [])\n\n//   const handleCreate = () => {\n//     const newBlog = {\n//       title: newBlogTitle,\n//       content: newBlogContent,\n//       authorName: newBlogAuthorName\n//     }\n\n//     fetch('http://localhost:8000/api/blog/', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(newBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs([...blogs, data])\n//       setNewBlogTitle('')\n//       setNewBlogContent('')\n//       setNewBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleUpdate = () => {\n//     const updatedBlog = {\n//       id: selectedBlogId,\n//       title: updatedBlogTitle,\n//       content: updatedBlogContent,\n//       authorName: updatedBlogAuthorName\n//     }\n\n//     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(updatedBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       const index = blogs.findIndex(blog => blog.id === data.id)\n//       const newBlogs = [...blogs]\n//       newBlogs[index] = data\n//       setBlogs(newBlogs)\n//       setSelectedBlogId('')\n//       setUpdatedBlogTitle('')\n//       setUpdatedBlogContent('')\n//       setUpdatedBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   const handleDelete = (id) => {\n//     if (window.confirm('Are you sure you want to delete this post?')) {\n//       fetch(`http://localhost:8000/api/blog/${id}/`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//         }\n//       })\n//       .then(response => {\n//         if (response.ok) {\n//           setBlogs(blogs.filter(blog => blog.id !== id))\n//         } else {\n//           throw new Error('Delete failed')\n//         }\n//       })\n//       .catch(error => {\n//         console.error(error)\n//       })\n//     }\n//   }\n\n//   if (loading) {\n//     return <p>Loading...</p>\n//   }\n//   return (\n//     <div>\n//       <h1>Blog List</h1>\n//     <ul>\n//       {blogs.map(blog => (\n//         <li key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           <p>Author: {blog.authorName}</p>\n//           <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//           <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//         </li>\n//       ))}\n//     </ul>\n//     {selectedBlogId && (\n//       <div>\n//         <h2>Edit Blog</h2>\n//         {blogs.map(blog => {\n//           if (blog.id === selectedBlogId) {\n//             return (\n//               <div key={blog.id}>\n//                 <label>\n//                   Title:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogTitle || blog.title}\n//                     onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Content:\n//                   <textarea\n//                     value={updatedBlogContent || blog.content}\n//                     onChange={(event) => setUpdatedBlogContent(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//                 <label>\n//                   Author Name:\n//                   <input\n//                     type=\"text\"\n//                     value={updatedBlogAuthorName || blog.authorName}\n//                     onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n//                   />\n//                 </label>\n//                 <br />\n//               </div>\n//             );\n//           } else {\n//             return null;\n//           }\n//         })}\n//         <button onClick={handleUpdate}>Save Changes</button>\n//         <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n//       </div>\n//     )}\n//     <div>\n//     <h2>Create New Blog</h2>\n//     <label>\n//     Title:\n//     <input\n//     type=\"text\"\n//     value={newBlogTitle}\n//     onChange={(event) => setNewBlogTitle(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Content:\n//     <textarea\n//     value={newBlogContent}\n//     onChange={(event) => setNewBlogContent(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <label>\n//     Author Name:\n//     <input\n//     type=\"text\"\n//     value={newBlogAuthorName}\n//     onChange={(event) => setNewBlogAuthorName(event.target.value)}\n//     />\n//     </label>\n//     <br />\n//     <button onClick={handleCreate}>Create Blog</button>\n//     </div>\n//     </div>\n//     )\n//     }\n// export default Blog;\n\n\n// import React, { useState, useEffect } from 'react'\n\n// export default function Blog() {\n//   const [blogs, setBlogs] = useState([])\n//   const [loading, setLoading] = useState(true)\n\n//   const [selectedBlogId, setSelectedBlogId] = useState('')\n//   const [updatedBlogTitle, setUpdatedBlogTitle] = useState('')\n//   const [updatedBlogContent, setUpdatedBlogContent] = useState('')\n//   const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState('')\n\n//   useEffect(() => {\n//     fetch('http://localhost:8000/api/blog/', {\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       setBlogs(data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.error(error))\n//   }, [])\n\n//   const handleUpdate = () => {\n//     const updatedBlog = {\n//       id: selectedBlogId,\n//       title: updatedBlogTitle === '' ? '' : updatedBlogTitle || blogs.find(blog => blog.id === selectedBlogId).title,\n//       content: updatedBlogContent === '' ? '' : updatedBlogContent || blogs.find(blog => blog.id === selectedBlogId).content,\n//       authorName: updatedBlogAuthorName === '' ? '' : updatedBlogAuthorName || blogs.find(blog => blog.id === selectedBlogId).authorName\n//     }\n//     fetch(`http://localhost:8000/api/blog/${updatedBlog.id}/`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       },\n//       body: JSON.stringify(updatedBlog)\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       const index = blogs.findIndex(blog => blog.id === data.id)\n//       const newBlogs = [...blogs]\n//       newBlogs[index] = data\n//       setBlogs(newBlogs)\n//       setSelectedBlogId('')\n//       setUpdatedBlogTitle('')\n//       setUpdatedBlogContent('')\n//       setUpdatedBlogAuthorName('')\n//     })\n//     .catch(error => console.error(error))\n//   }\n  \n\n//   const handleDelete = (blogId) => {\n//     fetch(`http://localhost:8000/api/blog/${blogId}/`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n//       }\n//     })\n//     .then(() => {\n//       const newBlogs = blogs.filter(blog => blog.id !== blogId)\n//       setBlogs(newBlogs)\n//     })\n//     .catch(error => console.error(error))\n//   }\n\n//   if (loading) {\n//     return <p>Loading...</p>\n//   }\n\n//   return (\n//     <div>\n//       <h1>Blog List</h1>\n//       <ul>\n//         {blogs.map(blog => (\n//           <li key={blog.id}>\n//             <h2>{blog.title}</h2>\n//             <p>{blog.content}</p>\n//             <p>Author: {blog.authorName}</p>\n//             <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//             <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//       {selectedBlogId && (\n//   <div>\n//     <h2>Edit Blog</h2>\n//     {blogs.map(blog => {\n//       if (blog.id === selectedBlogId) {\n//         return (\n//           <div key={blog.id}>\n//             <label>\n//               Title:\n//               <input\n//                 type=\"text\"\n//                 value={updatedBlogTitle || blog.title}\n//                 onChange={(event) => setUpdatedBlogTitle(event.target.value)}\n//               />\n//             </label>\n//             <br />\n//             <label>\n//               Content:\n//               <textarea\n//                 value={updatedBlogContent || blog.content}\n//                 onChange={(event) => setUpdatedBlogContent(event.target.value)}\n//               />\n//             </label>\n//             <br />\n//             <label>\n//               Author Name:\n//               <input\n//                 type=\"text\"\n//                 value={updatedBlogAuthorName || blog.authorName}\n//                 onChange={(event) => setUpdatedBlogAuthorName(event.target.value)}\n//               />\n//             </label>\n//             <br />\n//           </div>\n//         );\n//       } else {\n//         return null;\n//       }\n//     })}\n//     <button onClick={handleUpdate}>Save Changes</button>\n//     <button onClick={() => setSelectedBlogId('')}>Cancel</button>\n//   </div>\n// )}\n\n// </div>\n// )}\n\nexport default function Blog(){\n  return(\n    <div>\n      hello\n      {/* <UpdateBlog/> */}\n    </div>\n  )\n}"],"mappings":";AACA;;AAEA,OAAOA,UAAU,MAAM,6BAA6B;;AAEpeAAe,SAASC,IAAIA,CAAA,EAAE;EAC5B,oBACED,OAAA;IAAAE,QAAA,EAAK;EAEH;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEV;AAACC,EAAA,GAPuBN,IAAI;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}