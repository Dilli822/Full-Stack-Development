{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/blog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Blog() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [newBlogTitle, setNewBlogTitle] = useState('');\n  const [newBlogContent, setNewBlogContent] = useState('');\n  const [newBlogAuthorName, setNewBlogAuthorName] = useState('');\n  const [blogs, setBlogs] = useState([]);\n  const [selectedBlogId, setSelectedBlogId] = useState('');\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n  const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  const [newBlogImage, setNewBlogImage] = useState(null);\n  const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [created_at, setCreatedAt] = useState(\"\");\n  const accessToken = localStorage.getItem('accessToken');\n  const tokenParts = accessToken.split('.');\n\n  // Decode the access token payload\n  const payload = JSON.parse(atob(tokenParts[1]));\n\n  // Get the expiration time from the payload\n  const expirationTime = payload.exp;\n\n  // Calculate the remaining time in seconds until the token expires\n  const currentTime = Math.floor(Date.now() / 1000);\n  const remainingTime = expirationTime - currentTime;\n  console.log(`The access token will expire in ${remainingTime} seconds.`);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const accessToken = localStorage.getItem('accessToken');\n        const response = await fetch('http://localhost:8000/api/blog/list/', {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n        if (response.status === 401) {\n          const remainingTime = localStorage.getItem('expiresAt') - new Date().getTime();\n          if (remainingTime <= 0) {\n            // Access token has expired and refresh token has also expired or not available\n            throw new Error('Access token has expired and refresh token is not valid or not available.');\n          }\n          const refreshResponse = await fetch('http://localhost:8000/api/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              refresh: localStorage.getItem('refreshToken')\n            })\n          });\n          if (refreshResponse.ok) {\n            const tokens = await refreshResponse.json();\n            localStorage.setItem('accessToken', tokens.access);\n            localStorage.setItem('expiresAt', new Date().getTime() + tokens.expiresIn * 1000);\n            // Try fetching blogs again with the new access token\n            const newResponse = await fetch('http://localhost:8000/api/blog/list/', {\n              headers: {\n                'Authorization': `Bearer ${tokens.access}`\n              }\n            });\n            const data = await newResponse.json();\n            setBlogs(data);\n            setLoading(false);\n          } else {\n            throw new Error('Refresh token is invalid');\n          }\n        } else {\n          const data = await response.json();\n          setBlogs(data);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleCreate = () => {\n    const newBlog = {\n      title: newBlogTitle,\n      content: newBlogContent,\n      authorName: newBlogAuthorName,\n      image: newBlogImage // Add the image file to the new blog object\n    };\n\n    const formData = new FormData();\n    formData.append(\"title\", newBlog.title);\n    formData.append(\"content\", newBlog.content);\n    formData.append(\"authorName\", newBlog.authorName);\n    formData.append(\"image\", newBlog.image);\n    fetch(\"http://localhost:8000/api/blog/create/\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n      },\n      body: formData // Use the form data instead of JSON.stringify\n    }).then(response => response.json()).then(data => {\n      setBlogs([...blogs, data]);\n      setNewBlogTitle(\"\");\n      setNewBlogContent(\"\");\n      setNewBlogAuthorName(\"\");\n      setNewBlogImage(null); // Reset the image state after submitting the form\n    });\n  };\n\n  const handleDelete = id => {\n    if (window.confirm('Are you sure you want to delete this post?')) {\n      fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          setBlogs(blogs.filter(blog => blog.id !== id));\n        } else {\n          throw new Error('Delete failed');\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  };\n  const handleUpdate = () => {\n    const updatedBlog = {\n      id: selectedBlogId,\n      title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n      content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n      authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n    };\n    const formData = new FormData();\n    formData.append('title', updatedBlog.title);\n    formData.append('content', updatedBlog.content);\n    formData.append('authorName', updatedBlog.authorName);\n    formData.append('image', updatedBlogImage);\n    fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      body: formData\n    }).then(response => response.json()).then(data => {\n      const index = blogs.findIndex(blog => blog.id === data.id);\n      const newBlogs = [...blogs];\n      newBlogs[index] = data;\n      setBlogs(newBlogs);\n      setSelectedBlogId('');\n      setUpdatedBlogTitle(undefined);\n      setUpdatedBlogContent(undefined);\n      setUpdatedBlogAuthorName(undefined);\n      setUpdatedBlogImage(null);\n    }).catch(error => console.error(error));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Create New Blog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newBlogTitle,\n            onChange: event => setNewBlogTitle(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Content:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: newBlogContent,\n            onChange: event => setNewBlogContent(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Author Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newBlogAuthorName,\n            onChange: event => setNewBlogAuthorName(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"newBlogImage\",\n          children: \"Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"newBlogImage\",\n          name: \"newBlogImage\",\n          onChange: event => setNewBlogImage(event.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreate,\n          children: \"Create Blog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 1\n      }, this), selectedBlogId !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Update Blog \\\"\", blogs.find(blog => blog.id === selectedBlogId).title, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"blog-title\",\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"blog-title\",\n            value: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n            onChange: e => setUpdatedBlogTitle(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"blog-content\",\n            children: \"Content:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"blog-content\",\n            value: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n            onChange: e => setUpdatedBlogContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"blog-author-name\",\n            children: \"Author Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"blog-author-name\",\n            value: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName,\n            onChange: e => setUpdatedBlogAuthorName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"updatedBlogImage\",\n          children: \"Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"updatedBlogImage\",\n          name: \"updatedBlogImage\",\n          onChange: event => setUpdatedBlogImage(event.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdate,\n          children: \"Update Blog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blog List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 7\n      }, this), blogs.sort((a, b) => b.id - a.id).map(blog => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:8000${blog.image}`,\n          style: {\n            width: \"450px\",\n            maxWidth: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Author: \", blog.authorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Published Date: \", blog.created_at]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Updated Date: \", blog.updated_at]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Blog Created at Standard: \", created_at]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedBlogId(blog.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(blog.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(Blog, \"GLE9HURVfAq1L+knJ1vat98dWAo=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Blog","_s","loading","setLoading","newBlogTitle","setNewBlogTitle","newBlogContent","setNewBlogContent","newBlogAuthorName","setNewBlogAuthorName","blogs","setBlogs","selectedBlogId","setSelectedBlogId","updatedBlogTitle","setUpdatedBlogTitle","undefined","updatedBlogContent","setUpdatedBlogContent","updatedBlogAuthorName","setUpdatedBlogAuthorName","newBlogImage","setNewBlogImage","updatedBlogImage","setUpdatedBlogImage","imageUrl","setImageUrl","created_at","setCreatedAt","accessToken","localStorage","getItem","tokenParts","split","payload","JSON","parse","atob","expirationTime","exp","currentTime","Math","floor","Date","now","remainingTime","console","log","fetchBlogs","response","fetch","headers","status","getTime","Error","refreshResponse","method","body","stringify","refresh","ok","tokens","json","setItem","access","expiresIn","newResponse","data","error","handleCreate","newBlog","title","content","authorName","image","formData","FormData","append","Authorization","then","handleDelete","id","window","confirm","filter","blog","catch","handleUpdate","updatedBlog","find","index","findIndex","newBlogs","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","event","target","htmlFor","name","files","onClick","e","sort","a","b","map","src","style","width","maxWidth","updated_at","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/blog.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react'\nfunction Blog() {\n\n  const [loading, setLoading] = useState(true)\n  const [newBlogTitle, setNewBlogTitle] = useState('')\n  const [newBlogContent, setNewBlogContent] = useState('')\n  const [newBlogAuthorName, setNewBlogAuthorName] = useState('')\n\n\n  const [blogs, setBlogs] = useState([]);\n  const [selectedBlogId, setSelectedBlogId] = useState('');\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n  const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  \n  const [newBlogImage, setNewBlogImage] = useState(null);\n  const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n  const [imageUrl, setImageUrl] = useState(null);\n  \n  const [created_at, setCreatedAt] = useState(\"\");\n  const accessToken = localStorage.getItem('accessToken');\n  const tokenParts = accessToken.split('.');\n  \n  // Decode the access token payload\n  const payload = JSON.parse(atob(tokenParts[1]));\n  \n  // Get the expiration time from the payload\n  const expirationTime = payload.exp;\n  \n  // Calculate the remaining time in seconds until the token expires\n  const currentTime = Math.floor(Date.now() / 1000);\n  const remainingTime = expirationTime - currentTime;\n  \n  console.log(`The access token will expire in ${remainingTime} seconds.`);\n  \n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const accessToken = localStorage.getItem('accessToken');\n        const response = await fetch('http://localhost:8000/api/blog/list/', {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          }\n        });\n  \n        if (response.status === 401) {\n          const remainingTime = localStorage.getItem('expiresAt') - new Date().getTime();\n  \n          if (remainingTime <= 0) {\n            // Access token has expired and refresh token has also expired or not available\n            throw new Error('Access token has expired and refresh token is not valid or not available.');\n          }\n  \n          const refreshResponse = await fetch('http://localhost:8000/api/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              refresh: localStorage.getItem('refreshToken')\n            })\n          });\n  \n          if (refreshResponse.ok) {\n            const tokens = await refreshResponse.json();\n            localStorage.setItem('accessToken', tokens.access);\n            localStorage.setItem('expiresAt', new Date().getTime() + tokens.expiresIn * 1000);\n            // Try fetching blogs again with the new access token\n            const newResponse = await fetch('http://localhost:8000/api/blog/list/', {\n              headers: {\n                'Authorization': `Bearer ${tokens.access}`\n              }\n            });\n            const data = await newResponse.json();\n            setBlogs(data);\n            setLoading(false);\n          } else {\n            throw new Error('Refresh token is invalid');\n          }\n        } else {\n          const data = await response.json();\n          setBlogs(data);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n    fetchBlogs();\n  }, []);\n  \n\n  const handleCreate = () => {\n    const newBlog = {\n      title: newBlogTitle,\n      content: newBlogContent,\n      authorName: newBlogAuthorName,\n      image: newBlogImage // Add the image file to the new blog object\n    };\n\n    const formData = new FormData();\n    formData.append(\"title\", newBlog.title);\n    formData.append(\"content\", newBlog.content);\n    formData.append(\"authorName\", newBlog.authorName);\n    formData.append(\"image\", newBlog.image);\n\n    fetch(\"http://localhost:8000/api/blog/create/\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n      },\n      body: formData, // Use the form data instead of JSON.stringify\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setBlogs([...blogs, data]);\n        setNewBlogTitle(\"\");\n        setNewBlogContent(\"\");\n        setNewBlogAuthorName(\"\");\n        setNewBlogImage(null); // Reset the image state after submitting the form\n      })\n    }\n\n  const handleDelete = (id) => {\n    if (window.confirm('Are you sure you want to delete this post?')) {\n      fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        }\n      })\n      .then(response => {\n        if (response.ok) {\n          setBlogs(blogs.filter(blog => blog.id !== id))\n        } else {\n          throw new Error('Delete failed')\n        }\n      })\n      .catch(error => {\n        console.error(error)\n      })\n    }\n  }\n\n  const handleUpdate = () => {\n    const updatedBlog = {\n      id: selectedBlogId,\n      title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n      content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n      authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n    }\n  \n    const formData = new FormData();\n    formData.append('title', updatedBlog.title);\n    formData.append('content', updatedBlog.content);\n    formData.append('authorName', updatedBlog.authorName);\n    formData.append('image', updatedBlogImage);\n  \n    fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n      const index = blogs.findIndex(blog => blog.id === data.id)\n      const newBlogs = [...blogs]\n      newBlogs[index] = data\n      setBlogs(newBlogs)\n      setSelectedBlogId('')\n      setUpdatedBlogTitle(undefined)\n      setUpdatedBlogContent(undefined)\n      setUpdatedBlogAuthorName(undefined)\n      setUpdatedBlogImage(null)\n    })\n    .catch(error => console.error(error))\n  }\n  \n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n \n\n  return (\n    <div>\n<ul>\n<div>\n    <h2>Create New Blog</h2>\n    <label>\n    Title:\n    <input\n    type=\"text\"\n    value={newBlogTitle}\n    onChange={(event) => setNewBlogTitle(event.target.value)}\n    />\n    </label>\n    <br />\n    <label>\n    Content:\n    <textarea\n    value={newBlogContent}\n    onChange={(event) => setNewBlogContent(event.target.value)}\n    />\n    </label>\n    <br />\n    <label>\n    Author Name:\n    <input\n    type=\"text\"\n    value={newBlogAuthorName}\n    onChange={(event) => setNewBlogAuthorName(event.target.value)}\n    />\n    </label>\n\n    <label htmlFor=\"newBlogImage\">Image:</label>\n    <input type=\"file\" id=\"newBlogImage\" name=\"newBlogImage\" onChange={event => setNewBlogImage(event.target.files[0])} />\n\n\n    <br />\n    <button onClick={handleCreate}>Create Blog</button>\n    </div>\n\n      {/* <UpdateBlog/> */}\n      {selectedBlogId !== '' && (\n        <div>\n\n          <h2>Update Blog \"{blogs.find(blog => blog.id === selectedBlogId).title}\"</h2>\n          \n          <div>\n            <label htmlFor=\"blog-title\">Title:</label>\n            <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={e => setUpdatedBlogTitle(e.target.value)} />\n          </div>\n\n          <div>\n            <label htmlFor=\"blog-content\">Content:</label>\n            <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent} onChange={e => setUpdatedBlogContent(e.target.value)} />\n          </div>\n\n          <div>\n            <label htmlFor=\"blog-author-name\">Author Name:</label>\n            <input type=\"text\" id=\"blog-author-name\" value={updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName} onChange={e => setUpdatedBlogAuthorName(e.target.value)} />\n            </div>\n\n            <label htmlFor=\"updatedBlogImage\">Image:</label>\n            <input type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={event => setUpdatedBlogImage(event.target.files[0])} />\n\n            <button onClick={handleUpdate}>Update Blog</button>\n\n            </div>\n            )}\n\n\n      <h1>Blog List</h1>\n\n      {blogs.sort((a,b) => b.id - a.id).map(blog => (\n        <li key={blog.id}>\n          <h2>{blog.title}</h2>\n          <img src={`http://localhost:8000${blog.image}`} style={{ width: \"450px\", maxWidth: \"100%\"}}/>\n\n          <p>{blog.content}</p>\n          <p>Author: {blog.authorName}</p>\n          <p>Published Date: {blog.created_at}</p>\n          <p>Updated Date: {blog.updated_at}</p>\n          {created_at && <p>Blog Created at Standard: {created_at}</p>}\n          <button onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n          <button onClick={() => handleDelete(blog.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  \n    </div>\n    )\n    }\nexport default Blog;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}