{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n\n//   console.log(authorId);\n//   console.log(likedBy);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n\n//         setCountLikes(blogsWithLiked[0].likes);\n//         setLikedBy(blogsWithLiked.liked_by);\n\n//         setAuthorId(blogsWithLiked.author);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n// const handleLikeClick = (blogId) => {\n//   const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//   const updatedBlog = {\n//     ...blogToUpdate,\n//     likes: blogToUpdate.likes + (blogToUpdate.liked_by.includes(userId) ? -1 : 1),\n//     liked_by: blogToUpdate.liked_by.includes(userId)\n//       ? blogToUpdate.liked_by.filter((id) => id !== userId)\n//       : [...blogToUpdate.liked_by, userId],\n//   };\n//   fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//     method: \"PUT\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify(updatedBlog),\n//   })\n//     .then((response) => response.json())\n//     .then((data) => {\n//       const updatedBlogs = blogs.map((blog) =>\n//         blog.id === data.id ? data : blog\n//       );\n//       setBlogs(updatedBlogs);\n//     })\n//     .catch((error) => console.error(error));\n// };\n\n// return(\n//   <div>\n//     {blogs.map((blog) => (\n//   <div key={blog.id}>\n//     <h2>{blog.title}</h2>\n//     <p>{blog.content}</p>\n//     <span>{blog.likes}</span>\n//     <button onClick={() => handleLikeClick(blog.id)}>\n//       {blog.liked_by.includes(userId) ? \"Dislike\" : \"Like\"}\n//     </button>\n//   </div>\n// ))}\n\n//   </div>\n// )\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [userId, setUserId] = useState(null);\n  useEffect(() => {\n    // Fetch userId from API\n    fetch(\"http://localhost:8000/api/user/\").then(response => response.json()).then(data => {\n      setUserId(data.userId);\n    }).catch(error => console.log(error));\n  }, []);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked[0].likes);\n        setLikedBy(blogsWithLiked.liked_by);\n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = blogId => {\n    const blogToUpdate = blogs.find(blog => blog.id === blogId);\n    if (blogToUpdate.liked_by.includes(userId)) {\n      // User has already liked the blog, so remove like\n      blogToUpdate.liked_by = blogToUpdate.liked_by.filter(id => id !== userId);\n      blogToUpdate.likes -= 1;\n    } else {\n      // User has not liked the blog, so add like\n      blogToUpdate.liked_by.push(userId);\n      blogToUpdate.likes += 1;\n    }\n\n    // Update likes in API\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        likes: blogToUpdate.likes,\n        liked_by: blogToUpdate.liked_by\n      })\n    }).then(response => response.json()).then(data => {\n      setBlogs(prevBlogs => prevBlogs.map(blog => blog.id === data.id ? data : blog));\n    }).catch(error => console.log(error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: blog.likes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => handleLikeClick(blog.id),\n        children: blog.liked_by.includes(userId) ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"WGDuITeiXS1uVgboA7YGRQUCkKw=\");\n_c = Likes;\nexport default Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["IconButton","FavoriteIcon","ShareIcon","React","useState","useEffect","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","userId","setUserId","fetch","then","response","json","data","catch","error","console","log","fetchBlogs","headers","Authorization","localStorage","getItem","blogsWithLiked","map","blog","liked","setCountLikes","likes","setLikedBy","liked_by","setAuthorId","author","setError","handleLikeClick","blogId","blogToUpdate","find","id","includes","filter","push","method","body","JSON","stringify","prevBlogs","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","onClick","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n\n// export default function Likes() {\n\n\n//   console.log(authorId);\n//   console.log(likedBy);\n\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n        \n//         setCountLikes(blogsWithLiked[0].likes);\n//         setLikedBy(blogsWithLiked.liked_by);\n        \n//         setAuthorId(blogsWithLiked.author);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n  \n// const handleLikeClick = (blogId) => {\n//   const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//   const updatedBlog = {\n//     ...blogToUpdate,\n//     likes: blogToUpdate.likes + (blogToUpdate.liked_by.includes(userId) ? -1 : 1),\n//     liked_by: blogToUpdate.liked_by.includes(userId)\n//       ? blogToUpdate.liked_by.filter((id) => id !== userId)\n//       : [...blogToUpdate.liked_by, userId],\n//   };\n//   fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//     method: \"PUT\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify(updatedBlog),\n//   })\n//     .then((response) => response.json())\n//     .then((data) => {\n//       const updatedBlogs = blogs.map((blog) =>\n//         blog.id === data.id ? data : blog\n//       );\n//       setBlogs(updatedBlogs);\n//     })\n//     .catch((error) => console.error(error));\n// };\n\n// return(\n//   <div>\n//     {blogs.map((blog) => (\n//   <div key={blog.id}>\n//     <h2>{blog.title}</h2>\n//     <p>{blog.content}</p>\n//     <span>{blog.likes}</span>\n//     <button onClick={() => handleLikeClick(blog.id)}>\n//       {blog.liked_by.includes(userId) ? \"Dislike\" : \"Like\"}\n//     </button>\n//   </div>\n// ))}\n\n//   </div>\n// )\n// }\n\n\nimport React, { useState, useEffect } from \"react\";\n\nfunction Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [userId, setUserId] = useState(null);\n\n  useEffect(() => {\n    // Fetch userId from API\n    fetch(\"http://localhost:8000/api/user/\")\n      .then((response) => response.json())\n      .then((data) => {\n        setUserId(data.userId);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        \n        setCountLikes(blogsWithLiked[0].likes);\n        setLikedBy(blogsWithLiked.liked_by);\n        \n        setAuthorId(blogsWithLiked.author);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n\n  const handleLikeClick = (blogId) => {\n    const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n\n    if (blogToUpdate.liked_by.includes(userId)) {\n      // User has already liked the blog, so remove like\n      blogToUpdate.liked_by = blogToUpdate.liked_by.filter(\n        (id) => id !== userId\n      );\n      blogToUpdate.likes -= 1;\n    } else {\n      // User has not liked the blog, so add like\n      blogToUpdate.liked_by.push(userId);\n      blogToUpdate.likes += 1;\n    }\n\n    // Update likes in API\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        likes: blogToUpdate.likes,\n        liked_by: blogToUpdate.liked_by,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setBlogs((prevBlogs) =>\n          prevBlogs.map((blog) => (blog.id === data.id ? data : blog))\n        );\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div>\n      {blogs.map((blog) => (\n        <div key={blog.id}>\n          <h2>{blog.title}</h2>\n          <p>{blog.content}</p>\n          <span>{blog.likes}</span>\n          <IconButton onClick={() => handleLikeClick(blog.id)}>\n            {blog.liked_by.includes(userId) ? (\n              <FavoriteIcon color=\"error\" />\n            ) : (\n              <FavoriteIcon />\n            )}\n          </IconButton>\n          <IconButton>\n            <ShareIcon />\n          </IconButton>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Likes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}