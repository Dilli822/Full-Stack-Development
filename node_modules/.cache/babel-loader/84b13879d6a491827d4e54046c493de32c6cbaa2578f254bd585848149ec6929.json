{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\n// // import { useState, useEffect } from \"react\";\n// // import { IconButton } from \"@mui/material\";\n// // import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// // export default function Likes() {\n// //   const [blogs, setBlogs] = useState([]);\n// //   const [error, setError] = useState(null);\n// //   const [authorId, setAuthorId] = useState(0);\n// //   const [countLikes, setCountLikes] = useState(0);\n// //   const [likedBy, setLikedBy] = useState(0);\n\n// //   useEffect(() => {\n// //     const fetchBlogs = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //           headers: {\n// //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //           },\n// //         });\n\n// //         const data = await response.json();\n\n// //         // Initialize liked state for each blog post\n// //         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n// //         setBlogs(blogsWithLiked);\n// //         setLikedBy(blogsWithLiked.liked_by);\n// //         setCountLikes(blogsWithLiked);\n// //         setAuthorId(blogsWithLiked.author);\n// //       } catch (error) {\n// //         console.error(error);\n// //         setError(\"Failed to fetch blog posts.\");\n// //       }\n// //     };\n\n// //     fetchBlogs();\n// //   }, []);\n\n// //   console.log(\"likedBy \", likedBy);\n// //   const handleLikeClick = async (blogId) => {\n// //     try {\n// //       const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n// //       const newLikedState = !blogToUpdate.liked;\n// //       let newLikes = blogToUpdate.likes;\n// //       let newLikedByState = [...blogToUpdate.liked_by];\n\n// //       if (newLikedState) {\n// //         newLikes += 1;\n// //         newLikedByState.push(authorId);\n\n// //       } else {\n// //         newLikes -= 1;\n// //         newLikedByState = newLikedByState.filter((id) => id !== authorId);\n// //       }\n\n// //       const updatedBlogs = blogs.map((blog) =>\n// //         blog.id === blogId\n// //           ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n// //           : blog\n// //       );\n// //       setBlogs(updatedBlogs);\n\n// //       // Update likes count\n// //       setCountLikes(newLikes);\n\n// //       // Call API to update like state\n// //       await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n// //         method: \"PUT\",\n// //         headers: {\n// //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //         body: JSON.stringify({\n// //           liked: newLikedState,\n// //           likes: newLikes,\n// //           liked_by: newLikedByState\n// //         }),\n// //       });\n// //     } catch (error) {\n// //       console.error(error);\n// //       setError(\"Failed to update like state.\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       {blogs.map((blog) => (\n// //         <div key={blog.id}>\n\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [authorId, setAuthorId] = useState(0);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [liked, setLiked] = useState(false);\n//   const [likedBy, setLikedBy] = useState(false);\n//   const [blogId, setBlogId] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikedBy(blogsWithLiked.liked_by);\n//         setCountLikes(blogsWithLiked);\n//         setAuthorId(blogsWithLiked.author);\n//         setLiked(blogsWithLiked.liked);\n//         setBlogId(blogsWithLiked.id);\n\n//         const likedByArray = blogsWithLiked.map((blog) => blog.liked_by);\n//         const authorIdArray = blogsWithLiked.map((blog) => blog.author);\n//         const likedArray = blogsWithLiked.map((blog) => blog.liked);\n//         const idArray = blogsWithLiked.map((blog) => blog.id);\n//         setLikedBy(likedByArray);\n//         setAuthorId(authorIdArray);\n//         setLiked(likedArray);\n//         setBlogId(idArray);\n\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = async (blogId) => {\n//     try {\n//       const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//       let newLikes = blogToUpdate.likes;\n//       let newLikedByState = [...blogToUpdate.liked_by];\n//       let newLikedState = !blogToUpdate.liked;\n\n//       // check if the user has already liked this post\n\n//         if (newLikedState && newLikedByState.includes(authorId)) {\n//           newLikes += 1;\n//           newLikedByState = newLikedByState.filter((id) => id !== authorId);\n//           newLikedState = false;\n//         } \n//         // check if the user has not liked this post yet\n//         else if (newLikedState && !newLikedByState.includes(authorId)) {\n//           newLikes -= 1;\n//           newLikedByState.push(authorId);\n//         } \n//         // check if the user wants to undo their like\n//         else if (!newLikedState && newLikedByState.includes(authorId)) {\n//           newLikes += 1;\n//           newLikedByState = newLikedByState.filter((id) => id !== authorId);\n//         }\n\n//       const updatedBlogs = blogs.map((blog) =>\n//         blog.id === blogId\n//           ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n//           : blog\n//       );\n//       setBlogs(updatedBlogs);\n\n//       // Update likes count\n//       setCountLikes(newLikes);\n\n//       // Call API to update like state\n//       await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           liked: newLikedState,\n//           likes: newLikes,\n//           liked_by: newLikedByState\n//         }),\n//       });\n//     } catch (error) {\n//       console.error(error);\n//       setError(\"Failed to update like state.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//     {blogs.map((blog) => (\n//     <div key={blog.id}>\n//       {blog.title} <br></br> <h6>likes</h6>\n//       {blog.likes}\n//       {/* {blog.likes} <br></br>\n//       {blog.liked_by} */}\n\n//     </div>\n//     ))}\n\n// {likedBy.includes(authorId) ? <div> author has liked  <br></br>\n//         <IconButton onClick={() => handleLikeClick(blogId)}>\n\n//     {liked !== likedBy.includes(authorId) ? (\n//     <FavoriteIcon style={{ color: \"red\" }} />\n//     ) : (\n//     <FavoriteIcon style={{ color: \"blue\" }} />\n//     )}\n//     </IconButton>\n\n//       </div> : <div> \n//         <h4>author iddnot liked</h4>\n//       <IconButton onClick={() => handleLikeClick(blogId)}>\n//     {liked !== likedBy.includes(authorId) ? (\n//     <FavoriteIcon style={{ color: \"red\" }} />\n//     ) : (\n//     <FavoriteIcon style={{ color: \"blue\" }} />\n//     )}\n//     </IconButton>\n//     </div>}\n\n//     </div>\n//     );\n//     }\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [authorId, setAuthorId] = useState(0);\n  const [countLikes, setCountLikes] = useState(0);\n  const [liked, setLiked] = useState(false);\n  const [likedBy, setLikedBy] = useState([]);\n  const [blogId, setBlogId] = useState(0);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        const likedByArray = blogsWithLiked.map(blog => blog.liked_by);\n        const authorIdArray = blogsWithLiked.map(blog => blog.author);\n        const likedArray = blogsWithLiked.map(blog => blog.liked);\n        const idArray = blogsWithLiked.map(blog => blog.id);\n        setLikedBy(likedByArray);\n        setAuthorId(authorIdArray);\n        setLiked(likedArray);\n        setBlogId(idArray);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = async blogId => {\n    try {\n      const blogToUpdate = blogs.find(blog => blog.id === blogId);\n      let newLikes = blogToUpdate.likes;\n      let newLikedByState = [...blogToUpdate.liked_by];\n\n      // check if the user has already liked this post\n      if (newLikedByState.includes(authorId)) {\n        newLikedByState = newLikedByState.filter(id => id !== authorId);\n        newLikes -= 1;\n      }\n      // check\n      else {\n        newLikedByState.push(authorId);\n        newLikes += 1;\n      }\n      const updatedBlog = {\n        ...blogToUpdate,\n        likes: newLikes,\n        liked_by: newLikedByState\n      };\n      const response = await fetch(`http://localhost:8000/api/blog/${blogId}/update/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        },\n        body: JSON.stringify(updatedBlog)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update blog post.\");\n      }\n\n      // Update the state of the blogs array with the updated blog post\n      const updatedBlogs = blogs.map(blog => {\n        if (blog.id === blogId) {\n          return updatedBlog;\n        }\n        return blog;\n      });\n      setBlogs(updatedBlogs);\n\n      // Update the state of the countLikes, liked, and likedBy for the current blog post\n      setCountLikes(updatedBlog.likes);\n      setLiked(newLikedByState.includes(authorId));\n      setLikedBy(newLikedByState);\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to update like status.\");\n    }\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 10\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [blog.title, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 20\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"likes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 30\n        }, this), blog.likes, /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => handleLikeClick(blogId),\n          sx: {\n            color: liked ? \"red\" : \"gray\"\n          },\n          children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 1\n        }, this), countLikes]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 3\n  }, this);\n}\n_s(Likes, \"oFacRaVl0NXRSXNdaOg6GyYSafc=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","authorId","setAuthorId","countLikes","setCountLikes","liked","setLiked","likedBy","setLikedBy","blogId","setBlogId","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","likedByArray","liked_by","authorIdArray","author","likedArray","idArray","id","console","handleLikeClick","blogToUpdate","find","newLikes","likes","newLikedByState","includes","filter","push","updatedBlog","method","body","JSON","stringify","ok","Error","updatedBlogs","children","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","sx","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// // import { useState, useEffect } from \"react\";\n// // import { IconButton } from \"@mui/material\";\n// // import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// // export default function Likes() {\n// //   const [blogs, setBlogs] = useState([]);\n// //   const [error, setError] = useState(null);\n// //   const [authorId, setAuthorId] = useState(0);\n// //   const [countLikes, setCountLikes] = useState(0);\n// //   const [likedBy, setLikedBy] = useState(0);\n\n// //   useEffect(() => {\n// //     const fetchBlogs = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n// //           headers: {\n// //             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //           },\n// //         });\n\n// //         const data = await response.json();\n\n// //         // Initialize liked state for each blog post\n// //         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n// //         setBlogs(blogsWithLiked);\n// //         setLikedBy(blogsWithLiked.liked_by);\n// //         setCountLikes(blogsWithLiked);\n// //         setAuthorId(blogsWithLiked.author);\n// //       } catch (error) {\n// //         console.error(error);\n// //         setError(\"Failed to fetch blog posts.\");\n// //       }\n// //     };\n\n// //     fetchBlogs();\n// //   }, []);\n\n// //   console.log(\"likedBy \", likedBy);\n// //   const handleLikeClick = async (blogId) => {\n// //     try {\n// //       const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n// //       const newLikedState = !blogToUpdate.liked;\n// //       let newLikes = blogToUpdate.likes;\n// //       let newLikedByState = [...blogToUpdate.liked_by];\n      \n// //       if (newLikedState) {\n// //         newLikes += 1;\n// //         newLikedByState.push(authorId);\n       \n// //       } else {\n// //         newLikes -= 1;\n// //         newLikedByState = newLikedByState.filter((id) => id !== authorId);\n// //       }\n\n      \n// //       const updatedBlogs = blogs.map((blog) =>\n// //         blog.id === blogId\n// //           ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n// //           : blog\n// //       );\n// //       setBlogs(updatedBlogs);\n  \n// //       // Update likes count\n// //       setCountLikes(newLikes);\n  \n// //       // Call API to update like state\n// //       await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n// //         method: \"PUT\",\n// //         headers: {\n// //           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n// //           \"Content-Type\": \"application/json\",\n// //         },\n// //         body: JSON.stringify({\n// //           liked: newLikedState,\n// //           likes: newLikes,\n// //           liked_by: newLikedByState\n// //         }),\n// //       });\n// //     } catch (error) {\n// //       console.error(error);\n// //       setError(\"Failed to update like state.\");\n// //     }\n// //   };\n  \n// //   return (\n// //     <div>\n// //       {blogs.map((blog) => (\n// //         <div key={blog.id}>\n\n\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [authorId, setAuthorId] = useState(0);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [liked, setLiked] = useState(false);\n//   const [likedBy, setLikedBy] = useState(false);\n//   const [blogId, setBlogId] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikedBy(blogsWithLiked.liked_by);\n//         setCountLikes(blogsWithLiked);\n//         setAuthorId(blogsWithLiked.author);\n//         setLiked(blogsWithLiked.liked);\n//         setBlogId(blogsWithLiked.id);\n\n//         const likedByArray = blogsWithLiked.map((blog) => blog.liked_by);\n//         const authorIdArray = blogsWithLiked.map((blog) => blog.author);\n//         const likedArray = blogsWithLiked.map((blog) => blog.liked);\n//         const idArray = blogsWithLiked.map((blog) => blog.id);\n//         setLikedBy(likedByArray);\n//         setAuthorId(authorIdArray);\n//         setLiked(likedArray);\n//         setBlogId(idArray);\n\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = async (blogId) => {\n//     try {\n//       const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n//       let newLikes = blogToUpdate.likes;\n//       let newLikedByState = [...blogToUpdate.liked_by];\n//       let newLikedState = !blogToUpdate.liked;\n      \n//       // check if the user has already liked this post\n      \n//         if (newLikedState && newLikedByState.includes(authorId)) {\n//           newLikes += 1;\n//           newLikedByState = newLikedByState.filter((id) => id !== authorId);\n//           newLikedState = false;\n//         } \n//         // check if the user has not liked this post yet\n//         else if (newLikedState && !newLikedByState.includes(authorId)) {\n//           newLikes -= 1;\n//           newLikedByState.push(authorId);\n//         } \n//         // check if the user wants to undo their like\n//         else if (!newLikedState && newLikedByState.includes(authorId)) {\n//           newLikes += 1;\n//           newLikedByState = newLikedByState.filter((id) => id !== authorId);\n//         }\n   \n\n\n//       const updatedBlogs = blogs.map((blog) =>\n//         blog.id === blogId\n//           ? { ...blog, liked: newLikedState, likes: newLikes, liked_by: newLikedByState }\n//           : blog\n//       );\n//       setBlogs(updatedBlogs);\n  \n//       // Update likes count\n//       setCountLikes(newLikes);\n  \n//       // Call API to update like state\n//       await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           liked: newLikedState,\n//           likes: newLikes,\n//           liked_by: newLikedByState\n//         }),\n//       });\n//     } catch (error) {\n//       console.error(error);\n//       setError(\"Failed to update like state.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//     {blogs.map((blog) => (\n//     <div key={blog.id}>\n//       {blog.title} <br></br> <h6>likes</h6>\n//       {blog.likes}\n//       {/* {blog.likes} <br></br>\n//       {blog.liked_by} */}\n\n\n    \n\n   \n\n//     </div>\n//     ))}\n\n\n// {likedBy.includes(authorId) ? <div> author has liked  <br></br>\n//         <IconButton onClick={() => handleLikeClick(blogId)}>\n        \n//     {liked !== likedBy.includes(authorId) ? (\n//     <FavoriteIcon style={{ color: \"red\" }} />\n//     ) : (\n//     <FavoriteIcon style={{ color: \"blue\" }} />\n//     )}\n//     </IconButton>\n\n//       </div> : <div> \n//         <h4>author iddnot liked</h4>\n//       <IconButton onClick={() => handleLikeClick(blogId)}>\n//     {liked !== likedBy.includes(authorId) ? (\n//     <FavoriteIcon style={{ color: \"red\" }} />\n//     ) : (\n//     <FavoriteIcon style={{ color: \"blue\" }} />\n//     )}\n//     </IconButton>\n//     </div>}\n\n//     </div>\n//     );\n//     }\n\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [authorId, setAuthorId] = useState(0);\n  const [countLikes, setCountLikes] = useState(0);\n  const [liked, setLiked] = useState(false);\n  const [likedBy, setLikedBy] = useState([]);\n  const [blogId, setBlogId] = useState(0);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        const likedByArray = blogsWithLiked.map((blog) => blog.liked_by);\n        const authorIdArray = blogsWithLiked.map((blog) => blog.author);\n        const likedArray = blogsWithLiked.map((blog) => blog.liked);\n        const idArray = blogsWithLiked.map((blog) => blog.id);\n        setLikedBy(likedByArray);\n        setAuthorId(authorIdArray);\n        setLiked(likedArray);\n        setBlogId(idArray);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n\n  const handleLikeClick = async (blogId) => {\n    try {\n      const blogToUpdate = blogs.find((blog) => blog.id === blogId);\n      let newLikes = blogToUpdate.likes;\n      let newLikedByState = [...blogToUpdate.liked_by];\n      \n      // check if the user has already liked this post\n      if (newLikedByState.includes(authorId)) {\n        newLikedByState = newLikedByState.filter((id) => id !== authorId);\n        newLikes -= 1;\n      } \n      // check\n      else {\n        newLikedByState.push(authorId);\n        newLikes += 1;\n      }\n      const updatedBlog = {\n        ...blogToUpdate,\n        likes: newLikes,\n        liked_by: newLikedByState,\n      };\n      const response = await fetch(`http://localhost:8000/api/blog/${blogId}/update/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n        body: JSON.stringify(updatedBlog),\n      });\n    \n      if (!response.ok) {\n        throw new Error(\"Failed to update blog post.\");\n      }\n    \n      // Update the state of the blogs array with the updated blog post\n      const updatedBlogs = blogs.map((blog) => {\n        if (blog.id === blogId) {\n          return updatedBlog;\n        }\n        return blog;\n      });\n      setBlogs(updatedBlogs);\n    \n      // Update the state of the countLikes, liked, and likedBy for the current blog post\n      setCountLikes(updatedBlog.likes);\n      setLiked(newLikedByState.includes(authorId));\n      setLikedBy(newLikedByState);\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to update like status.\");\n    }\n  };\n\n  if (error) {\n  return <div>{error}</div>;\n  }\n  \n  return (\n  <div>\n\n\n     <div>\n     {blogs.map((blog) => (\n    <div key={blog.id}>\n      {blog.title} <br></br> <h6>likes</h6>\n      {blog.likes}\n      {/* {blog.likes} <br></br>\n      {blog.liked_by} */}\n\n\n    \n\n<IconButton\n  onClick={() => handleLikeClick(blogId)}\n  sx={{ color: liked ? \"red\" : \"gray\" }}\n  >\n  <FavoriteIcon />\n  </IconButton>\n  {countLikes}\n\n    </div>\n    ))}\n    </div>\n\n\n  </div>\n  );\n  }    "],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}