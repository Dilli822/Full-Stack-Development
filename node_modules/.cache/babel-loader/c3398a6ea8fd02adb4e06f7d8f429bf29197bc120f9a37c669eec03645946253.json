{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n\n// function Comments () {\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           const blogLikes = data.map((blog) => {\n//             return {\n//               id: blog.id,\n//               likes: blog.likes,\n//               liked_state: blog.liked_state,\n//               title: blog.title,\n//               image: blog.image,\n//               content: blog.content,\n//               authorName: blog.authorName,\n//               created_at: blog.created_at,\n//               updated_at: blog.updated_at,\n//             };\n//           });\n\n//           // Store the mapped data in a variable\n//           const mappedData = blogLikes;\n\n//           setBlogs(mappedData);\n//           setLikes(mappedData.map((blog) => blog.likes));\n//           setLiked(mappedData.map((blog) => blog.liked_state));\n\n//           console.log(mappedData);\n//           setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n\n//           // Call the fetchComments function and pass the mapped data\n//           fetchComments(mappedData);\n//         } else {\n//           console.error(\"Failed to fetch likes\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     const fetchComments = async (mappedData) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//           method: \"GET\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           console.log(\"comments are \", data);\n//           setComments(data);\n\n//           // Use the mapped data and comments data together\n//           // Combine the mapped data and comments data as needed\n//           const combinedData = {\n//             mappedData: mappedData,\n//             commentsData: data,\n//           };\n\n//           // Process the combined data as needed\n//           console.log(\"Combined data:\", combinedData);\n//         } else {\n//           console.error(\"Failed to fetch comments\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error:\", error);\n//       }\n//     };\n\n//     fetchLikes();\n//   }, []);\n\n//   return (\n//   <div>\n//   {combinedData.mappedData.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>Likes: {blog.likes}</p>\n//       {/* Render other properties of the blog as needed */}\n//     </div>\n//   ))}\n//   {combinedData.commentsData.map((comment) => (\n//     <div key={comment.id}>\n//       <h3>{comment.title}</h3>\n//       <p>{comment.comment_content}</p>\n//       {/* Render other properties of the comment as needed */}\n//     </div>\n//   ))}\n// </div>\n// );\n\n// };\n\n// export default Comments;\n\n// useEffect(() => {\n//   fetchComments();\n// }, []);\n\n// const fetchComments = async () => {\n//   try {\n//     const response = await fetch('http://localhost:8000/api/blog/comments/', {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//       },\n\n//     });\n//     if (response.ok) {\n//       const data = await response.json();\n//       console.log(\"comments are \", data);\n//       setComments(data);\n//     } else {\n//       console.error('Failed to fetch comments');\n//     }\n//   } catch (error) {\n//     console.error('Error:', error);\n//   }\n// };\n\n// return (\n//   <div>\n//     {comments.map((comment) => (\n//       <div key={comment.id}>\n\n//         <p>comments: {comment.comment_content}</p>\n//         <p>commented_by: {comment.author}</p>\n//       </div>\n//     ))}\n//   </div>\n// );","map":{"version":3,"names":[],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/comments.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// function Comments () {\n//   const [comments, setComments] = useState([]);\n//   const [blogs, setBlogs] = useState([]);\n//   const [likes, setLikes] = useState([]);\n//   const [liked, setLiked] = useState([]);\n//   const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//   useEffect(() => {\n//     const fetchLikes = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         if (response.ok) {\n//           const data = await response.json();\n//           const blogLikes = data.map((blog) => {\n//             return {\n//               id: blog.id,\n//               likes: blog.likes,\n//               liked_state: blog.liked_state,\n//               title: blog.title,\n//               image: blog.image,\n//               content: blog.content,\n//               authorName: blog.authorName,\n//               created_at: blog.created_at,\n//               updated_at: blog.updated_at,\n//             };\n//           });\n  \n//           // Store the mapped data in a variable\n//           const mappedData = blogLikes;\n  \n//           setBlogs(mappedData);\n//           setLikes(mappedData.map((blog) => blog.likes));\n//           setLiked(mappedData.map((blog) => blog.liked_state));\n  \n//           console.log(mappedData);\n//           setShareUrls(mappedData.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n  \n//           // Call the fetchComments function and pass the mapped data\n//           fetchComments(mappedData);\n//         } else {\n//           console.error(\"Failed to fetch likes\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n  \n//     const fetchComments = async (mappedData) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//           method: \"GET\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n  \n//         if (response.ok) {\n//           const data = await response.json();\n//           console.log(\"comments are \", data);\n//           setComments(data);\n  \n//           // Use the mapped data and comments data together\n//           // Combine the mapped data and comments data as needed\n//           const combinedData = {\n//             mappedData: mappedData,\n//             commentsData: data,\n//           };\n  \n//           // Process the combined data as needed\n//           console.log(\"Combined data:\", combinedData);\n//         } else {\n//           console.error(\"Failed to fetch comments\");\n//         }\n//       } catch (error) {\n//         console.error(\"Error:\", error);\n//       }\n//     };\n  \n//     fetchLikes();\n//   }, []);\n  \n\n//   return (\n//   <div>\n//   {combinedData.mappedData.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>Likes: {blog.likes}</p>\n//       {/* Render other properties of the blog as needed */}\n//     </div>\n//   ))}\n//   {combinedData.commentsData.map((comment) => (\n//     <div key={comment.id}>\n//       <h3>{comment.title}</h3>\n//       <p>{comment.comment_content}</p>\n//       {/* Render other properties of the comment as needed */}\n//     </div>\n//   ))}\n// </div>\n// );\n\n// };\n\n// export default Comments;\n\n\n  // useEffect(() => {\n  //   fetchComments();\n  // }, []);\n\n  // const fetchComments = async () => {\n  //   try {\n  //     const response = await fetch('http://localhost:8000/api/blog/comments/', {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n  //       },\n    \n  //     });\n  //     if (response.ok) {\n  //       const data = await response.json();\n  //       console.log(\"comments are \", data);\n  //       setComments(data);\n  //     } else {\n  //       console.error('Failed to fetch comments');\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //   }\n  // };\n\n  // return (\n  //   <div>\n  //     {comments.map((comment) => (\n  //       <div key={comment.id}>\n   \n  //         <p>comments: {comment.comment_content}</p>\n  //         <p>commented_by: {comment.author}</p>\n  //       </div>\n  //     ))}\n  //   </div>\n  // );"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}