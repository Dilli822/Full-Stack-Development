{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes({ postId }) {\n//   const [likes, setLikes] = useState(0);\n//   const [liked, setLiked] = useState();\n\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\" http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikes(blogsWithLiked.likes);\n//         setLiked(blogsWithLiked.liked);\n//         setAuthorId(blogsWithLiked.author_id);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   // Render the like button with the current likes and handle the click event\n//   return (\n//     <div>\n\n//     </div>\n//   );\n// }\n\n// export default Likes;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Likes(props) {\n  _s();\n  const [likedPost, setLikedPost] = useState(props.likedBlogs);\n  const handleLikeClick = id => {\n    const index = likedPost.findIndex(post => post.id === id);\n    const newLikedState = !likedPost[index].liked;\n    const newLikesCount = newLikedState ? likedPost[index].likes + 1 : likedPost[index].likes - 1;\n    const updatedPost = {\n      ...likedPost[index],\n      liked: newLikedState,\n      likes: newLikesCount\n    };\n    const updatedPosts = [...likedPost];\n    updatedPosts[index] = updatedPost;\n    setLikedPost(updatedPosts);\n    const data = {\n      author_id: updatedPost.author.id,\n      blog_name: updatedPost.title,\n      likes: updatedPost.likes,\n      liked: updatedPost.liked\n    };\n    fetch(`http://localhost:8000/api/blog/likes/update/${id}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    }).then(data => console.log(data)).catch(error => console.error(error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"hll6Ybg6nkjP5Lhpf6+Mv9JoCxQ=\");\n_c = Likes;\nexport default Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","props","_s","likedPost","setLikedPost","likedBlogs","handleLikeClick","id","index","findIndex","post","newLikedState","liked","newLikesCount","likes","updatedPost","updatedPosts","data","author_id","author","blog_name","title","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","then","response","ok","Error","statusText","json","console","log","catch","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setApiLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLike = async (blogId) => {\n//     // Find the blog post to update\n//     const blog = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikes = blog.liked ? blog.likes - 1 : blog.likes + 1;\n//     const newLiked = !blog.liked;\n\n\n\n\n\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((blog) => {\n//       if (blog.id === blogId) {\n//         return {\n//           ...blog,\n//           liked: newLiked,\n//           likes: newLikes,\n//         };\n//       }\n//       return blog;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: blog.author_id,\n//         likes: newLikes,\n//         liked: newLiked,\n//       }),\n//     });\n//   };\n\n//   const handleLiked = async (blogId) => {\n//     // Find the blog post to update\n//     const bloged = blogs.find((blog) => blog.id === blogId);\n\n//     // Calculate the new like count and liked state\n//     const newLikess = bloged.liked ? bloged.likes + 1 : bloged.likes - 1;\n//     const newLikedd = false;\n\n//     // Update the local state immediately\n//     const updatedBlogs = blogs.map((bloged) => {\n//       if (bloged.id === blogId) {\n//         return {\n//           ...bloged,\n//           liked: newLikedd,\n//           likes: newLikess,\n//         };\n//       }\n//       return bloged;\n//     });\n//     setBlogs(updatedBlogs);\n\n//     // Call API to update like state\n//     await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         author_id: bloged.author_id,\n//         likes: newLikess,\n//         liked: newLikedd,\n//       }),\n//     });\n//   };\n\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <p>liked by {blog.liked_by}</p>\n\n//             {blog.liked_by.includes(blog.author_id) || blog.like ? (\n//               <div>\n//                     <h4>you did like it</h4>\n//                 <IconButton onClick={() => handleLiked(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             ) : (\n//               <div>\n//                 <h4>you did not like it</h4>\n//                 <IconButton onClick={() => handleLike(blog.id)}>\n//                   <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//                 </IconButton>\n//                 <IconButton>\n//                   <ShareIcon />\n//                 </IconButton>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n//             }\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes({ postId }) {\n//   const [likes, setLikes] = useState(0);\n//   const [liked, setLiked] = useState();\n  \n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [apiLikes, setApiLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\" http://localhost:8000/api/blog/likes/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setLikes(blogsWithLiked.likes);\n//         setLiked(blogsWithLiked.liked);\n//         setAuthorId(blogsWithLiked.author_id);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n \n\n\n//   // Render the like button with the current likes and handle the click event\n//   return (\n//     <div>\n\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n\nfunction Likes(props) {\n  const [likedPost, setLikedPost] = useState(props.likedBlogs);\n\n  const handleLikeClick = (id) => {\n    const index = likedPost.findIndex((post) => post.id === id);\n    const newLikedState = !likedPost[index].liked;\n    const newLikesCount = newLikedState\n      ? likedPost[index].likes + 1\n      : likedPost[index].likes - 1;\n    const updatedPost = { ...likedPost[index], liked: newLikedState, likes: newLikesCount };\n    const updatedPosts = [...likedPost];\n    updatedPosts[index] = updatedPost;\n    setLikedPost(updatedPosts);\n\n    const data = {\n      author_id: updatedPost.author.id,\n      blog_name: updatedPost.title,\n      likes: updatedPost.likes,\n      liked: updatedPost.liked\n    }\n\n    fetch(`http://localhost:8000/api/blog/likes/update/${id}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data)\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    })\n    .then(data => console.log(data))\n    .catch(error => console.error(error));\n  };\n\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nexport default Likes;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAACQ,KAAK,CAACI,UAAU,CAAC;EAE5D,MAAMC,eAAe,GAAIC,EAAE,IAAK;IAC9B,MAAMC,KAAK,GAAGL,SAAS,CAACM,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC3D,MAAMI,aAAa,GAAG,CAACR,SAAS,CAACK,KAAK,CAAC,CAACI,KAAK;IAC7C,MAAMC,aAAa,GAAGF,aAAa,GAC/BR,SAAS,CAACK,KAAK,CAAC,CAACM,KAAK,GAAG,CAAC,GAC1BX,SAAS,CAACK,KAAK,CAAC,CAACM,KAAK,GAAG,CAAC;IAC9B,MAAMC,WAAW,GAAG;MAAE,GAAGZ,SAAS,CAACK,KAAK,CAAC;MAAEI,KAAK,EAAED,aAAa;MAAEG,KAAK,EAAED;IAAc,CAAC;IACvF,MAAMG,YAAY,GAAG,CAAC,GAAGb,SAAS,CAAC;IACnCa,YAAY,CAACR,KAAK,CAAC,GAAGO,WAAW;IACjCX,YAAY,CAACY,YAAY,CAAC;IAE1B,MAAMC,IAAI,GAAG;MACXC,SAAS,EAAEH,WAAW,CAACI,MAAM,CAACZ,EAAE;MAChCa,SAAS,EAAEL,WAAW,CAACM,KAAK;MAC5BP,KAAK,EAAEC,WAAW,CAACD,KAAK;MACxBF,KAAK,EAAEG,WAAW,CAACH;IACrB,CAAC;IAEDU,KAAK,CAAE,+CAA8Cf,EAAG,GAAE,EAAE;MAC1DgB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE,EAAC;QAC9D,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;IAC3B,CAAC,CAAC,CACDc,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACtC;MACA,OAAOH,QAAQ,CAACI,IAAI,EAAE;IACxB,CAAC,CAAC,CACDL,IAAI,CAACd,IAAI,IAAIoB,OAAO,CAACC,GAAG,CAACrB,IAAI,CAAC,CAAC,CAC/BsB,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC,CAAC;EACvC,CAAC;EAED,oBACEzC,OAAA;IAAA0C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEM;AAEV;AAAC1C,EAAA,CA5CQF,KAAK;AAAA6C,EAAA,GAAL7C,KAAK;AA8Cd,eAAeA,KAAK;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}