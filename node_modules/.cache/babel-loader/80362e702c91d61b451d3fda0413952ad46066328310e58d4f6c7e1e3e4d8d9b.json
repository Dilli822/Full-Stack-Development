{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport CommentIcon from \"@mui/icons-material/Comment\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Popover from \"@mui/material/Popover\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport { maxHeight } from \"@mui/system\";\n\n// const Likes = () => {\n//     const [blogs, setBlogs] = useState([]);\n//     const [likes, setLikes] = useState([]);\n//     const [liked, setLiked] = useState([]);\n//     const [comments, setComments] = useState([]);\n\n//     const [anchorEls, setAnchorEls] = useState(new Array(blogs.length).fill(null));\n//     const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//     const [copiedStates, setCopiedStates] = useState(new Array(blogs.length).fill(false));\n//     const [videoLoading, setVideoLoading] = useState(true);\n\n//     const [mainLoading, setMainLoading] = useState(false);\n\n//     const copyToClipboard = (text) => {\n//         navigator.clipboard.writeText(text);\n//         setCopiedStates(new Array(blogs.length).fill(false)); // Reset copiedStates to all false\n//         setCopiedStates(copiedStates.map((state, index) => (index === copiedStates.indexOf(true) ? true : state))); // Set only the currently copied share button's copied state to true\n//     };\n\n//     const cancelCopy = () => {\n//         setCopiedStates(new Array(blogs.length).fill(false));\n//     };\n\n//     useEffect(() => {\n//         const fetchLikes = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                     },\n//                 });\n\n//                 const data = await response.json();\n//                 const blogLikes = data.map((blog) => {\n//                     return {\n//                         id: blog.id,\n//                         likes: blog.likes,\n//                         liked_state: blog.liked_state,\n//                         title: blog.title,\n//                         image: blog.image,\n//                         content: blog.content,\n//                         authorName: blog.authorName,\n//                         created_at: blog.created_at,\n//                         updated_at: blog.updated_at,\n//                         total_comments: blog.total_comments,\n//                     };\n//                 });\n\n//                 setBlogs(blogLikes);\n//                 setLikes(blogLikes.map((blog) => blog.likes));\n//                 setLiked(blogLikes.map((blog) => blog.liked_state));\n//                 setMainLoading(false); \n//                 console.log(\"blog likes with totsl commenets \", blogLikes);\n//                 setShareUrls(blogLikes.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n//             } catch (error) {\n//                 setMainLoading(true); \n//                 console.error(error);\n//             }\n//         };\n\n//         fetchLikes();\n//     }, []);\n//     useEffect(() => {\n//         fetchComments();\n//     }, []);\n\n//     const fetchComments = async () => {\n//         try {\n//             const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//                 method: \"GET\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                 },\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 console.log(\"comments are \", data);\n//                 setComments(data);\n//             } else {\n//                 console.error(\"Failed to fetch comments\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error);\n//         }\n//     };\n//     const handleLike = async (blogId, currentLikedState, index) => {\n//         try {\n//             const response = await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//                 method: \"PUT\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                 },\n//                 body: JSON.stringify({ liked: !currentLikedState }),\n//             });\n\n//             if (response.ok) {\n//                 // update liked state for the current blog\n//                 const updatedBlogLikes = [...blogs];\n//                 updatedBlogLikes[index].liked_state = !currentLikedState;\n//                 if (currentLikedState) {\n//                     updatedBlogLikes[index].likes--;\n//                 } else {\n//                     updatedBlogLikes[index].likes++;\n//                 }\n//                 setBlogs(updatedBlogLikes);\n\n//                 // update total likes count\n//                 const updatedLikes = [...likes];\n//                 if (currentLikedState) {\n//                     updatedLikes[index]--;\n//                 } else {\n//                     updatedLikes[index]++;\n//                 }\n//                 setLikes(updatedLikes);\n\n//                 // update liked state\n//                 const updatedLiked = [...liked];\n//                 updatedLiked[index] = !currentLikedState;\n//                 setLiked(updatedLiked);\n//             } else {\n//                 console.error(\"Error updating like state\");\n//             }\n//         } catch (error) {\n//             console.error(error);\n//         }\n//     };\n\n//     function playVideo(videoId) {\n//     const video = document.getElementById(videoId);\n//     video.play();\n// }\n\n// function pauseVideo(videoId) {\n//     const video = document.getElementById(videoId);\n//     video.pause();\n// }\n\n//     useEffect(() => {\n//         const fetchBlogsAndComments = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:8000/api/blog-comments/\", {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                     },\n//                 });\n\n//                 if (response.ok) {\n//                     const data = await response.json();\n//                     setBlogs(data.blogs);\n//                     setComments(data.comments);\n//                 } else {\n//                     console.error(\"Failed to fetch blogs and comments\");\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchBlogsAndComments();\n//     }, []);\n\n//     function playVideo(videoId) {\n//         const video = document.getElementById(videoId);\n//         video.play();\n//     }\n\n//     function pauseVideo(videoId) {\n//         const video = document.getElementById(videoId);\n//         video.pause();\n//     }\n\n//     return (\n//         <div>\n//         <div>\n//           {mainLoading ? (\n//             <p>Loading...</p>\n//           ) : (\n//             blogs\n//               .sort((a, b) => b.id - a.id)\n//               .map((blog, index) => (\n//                 <div key={blog.id}>\n//                   <h2>{blog.title}</h2>\n//                   <h3>Blog Id: {blog.id}</h3>\n\n//                   <div style={{ width: \"100%\", height: \"100%\" }}>\n//                     <img\n//                       src={`http://localhost:8000${blog.image}`}\n//                       style={{ width: \"100%\", maxWidth: \"100%\" }}\n//                       alt=\"Blog Image\"\n//                     />\n//                   </div>\n//                   <br />\n\n//                   {blog.video ? (\n//                     <div>\n//                       <video\n//                         controls\n//                         style={{ maxWidth: \"100%\" }}\n//                         onLoad={() => console.log(\"Video loaded\")}\n//                         onError={() => console.log(\"Video loading error\")}\n//                       >\n//                         <source src={`http://localhost:8000${blog.video}`} type=\"video/mp4\" />\n//                         Your browser does not support the video tag.\n//                       </video>\n//                       {/* Add video loading state check here */}\n//                       {videoLoading && <p>Loading...</p>}\n//                     </div>\n//                   ) : (\n//                     <p>Loading...</p>\n//                   )}\n\n//                   <div></div>\n\n//                   <div style={{ height: \"200px\", overflow: \"hidden\" }}>\n//                     <p>{blog.content}</p>\n//                     <p>Author: {blog.authorName}</p>\n//                     <p>Published Date: {blog.created_at}</p>\n//                     <p>Updated Date: {blog.updated_at}</p>\n//                     <br />\n//                   </div>\n\n//                 </div>\n//               ))\n//           )}\n//         </div>\n//       </div>\n//     )\n// };\n\n// export default Likes;","map":{"version":3,"names":["React","useEffect","useState","IconButton","FavoriteIcon","ShareIcon","CommentIcon","BrowserRouter","Router","Switch","Route","Link","Popover","Typography","Button","maxHeight"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport CommentIcon from \"@mui/icons-material/Comment\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Popover from \"@mui/material/Popover\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport { maxHeight } from \"@mui/system\";\n\n// const Likes = () => {\n//     const [blogs, setBlogs] = useState([]);\n//     const [likes, setLikes] = useState([]);\n//     const [liked, setLiked] = useState([]);\n//     const [comments, setComments] = useState([]);\n\n//     const [anchorEls, setAnchorEls] = useState(new Array(blogs.length).fill(null));\n//     const [shareUrls, setShareUrls] = useState(new Array(blogs.length).fill(\"\"));\n//     const [copiedStates, setCopiedStates] = useState(new Array(blogs.length).fill(false));\n//     const [videoLoading, setVideoLoading] = useState(true);\n\n//     const [mainLoading, setMainLoading] = useState(false);\n\n//     const copyToClipboard = (text) => {\n//         navigator.clipboard.writeText(text);\n//         setCopiedStates(new Array(blogs.length).fill(false)); // Reset copiedStates to all false\n//         setCopiedStates(copiedStates.map((state, index) => (index === copiedStates.indexOf(true) ? true : state))); // Set only the currently copied share button's copied state to true\n//     };\n\n//     const cancelCopy = () => {\n//         setCopiedStates(new Array(blogs.length).fill(false));\n//     };\n\n//     useEffect(() => {\n//         const fetchLikes = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:8000/api/blog/likes/\", {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                     },\n//                 });\n\n//                 const data = await response.json();\n//                 const blogLikes = data.map((blog) => {\n//                     return {\n//                         id: blog.id,\n//                         likes: blog.likes,\n//                         liked_state: blog.liked_state,\n//                         title: blog.title,\n//                         image: blog.image,\n//                         content: blog.content,\n//                         authorName: blog.authorName,\n//                         created_at: blog.created_at,\n//                         updated_at: blog.updated_at,\n//                         total_comments: blog.total_comments,\n//                     };\n//                 });\n\n//                 setBlogs(blogLikes);\n//                 setLikes(blogLikes.map((blog) => blog.likes));\n//                 setLiked(blogLikes.map((blog) => blog.liked_state));\n//                 setMainLoading(false); \n//                 console.log(\"blog likes with totsl commenets \", blogLikes);\n//                 setShareUrls(blogLikes.map((blog) => `${window.location.origin}/blog/${blog.id}`));\n//             } catch (error) {\n//                 setMainLoading(true); \n//                 console.error(error);\n//             }\n//         };\n\n//         fetchLikes();\n//     }, []);\n//     useEffect(() => {\n//         fetchComments();\n//     }, []);\n\n//     const fetchComments = async () => {\n//         try {\n//             const response = await fetch(\"http://localhost:8000/api/blog/comments/\", {\n//                 method: \"GET\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                 },\n//             });\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 console.log(\"comments are \", data);\n//                 setComments(data);\n//             } else {\n//                 console.error(\"Failed to fetch comments\");\n//             }\n//         } catch (error) {\n//             console.error(\"Error:\", error);\n//         }\n//     };\n//     const handleLike = async (blogId, currentLikedState, index) => {\n//         try {\n//             const response = await fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//                 method: \"PUT\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                 },\n//                 body: JSON.stringify({ liked: !currentLikedState }),\n//             });\n\n//             if (response.ok) {\n//                 // update liked state for the current blog\n//                 const updatedBlogLikes = [...blogs];\n//                 updatedBlogLikes[index].liked_state = !currentLikedState;\n//                 if (currentLikedState) {\n//                     updatedBlogLikes[index].likes--;\n//                 } else {\n//                     updatedBlogLikes[index].likes++;\n//                 }\n//                 setBlogs(updatedBlogLikes);\n\n//                 // update total likes count\n//                 const updatedLikes = [...likes];\n//                 if (currentLikedState) {\n//                     updatedLikes[index]--;\n//                 } else {\n//                     updatedLikes[index]++;\n//                 }\n//                 setLikes(updatedLikes);\n\n//                 // update liked state\n//                 const updatedLiked = [...liked];\n//                 updatedLiked[index] = !currentLikedState;\n//                 setLiked(updatedLiked);\n//             } else {\n//                 console.error(\"Error updating like state\");\n//             }\n//         } catch (error) {\n//             console.error(error);\n//         }\n//     };\n\n//     function playVideo(videoId) {\n//     const video = document.getElementById(videoId);\n//     video.play();\n// }\n\n// function pauseVideo(videoId) {\n//     const video = document.getElementById(videoId);\n//     video.pause();\n// }\n\n\n//     useEffect(() => {\n//         const fetchBlogsAndComments = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:8000/api/blog-comments/\", {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                     },\n//                 });\n\n//                 if (response.ok) {\n//                     const data = await response.json();\n//                     setBlogs(data.blogs);\n//                     setComments(data.comments);\n//                 } else {\n//                     console.error(\"Failed to fetch blogs and comments\");\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchBlogsAndComments();\n//     }, []);\n\n\n//     function playVideo(videoId) {\n//         const video = document.getElementById(videoId);\n//         video.play();\n//     }\n    \n//     function pauseVideo(videoId) {\n//         const video = document.getElementById(videoId);\n//         video.pause();\n//     }\n    \n//     return (\n//         <div>\n//         <div>\n//           {mainLoading ? (\n//             <p>Loading...</p>\n//           ) : (\n//             blogs\n//               .sort((a, b) => b.id - a.id)\n//               .map((blog, index) => (\n//                 <div key={blog.id}>\n//                   <h2>{blog.title}</h2>\n//                   <h3>Blog Id: {blog.id}</h3>\n  \n//                   <div style={{ width: \"100%\", height: \"100%\" }}>\n//                     <img\n//                       src={`http://localhost:8000${blog.image}`}\n//                       style={{ width: \"100%\", maxWidth: \"100%\" }}\n//                       alt=\"Blog Image\"\n//                     />\n//                   </div>\n//                   <br />\n  \n//                   {blog.video ? (\n//                     <div>\n//                       <video\n//                         controls\n//                         style={{ maxWidth: \"100%\" }}\n//                         onLoad={() => console.log(\"Video loaded\")}\n//                         onError={() => console.log(\"Video loading error\")}\n//                       >\n//                         <source src={`http://localhost:8000${blog.video}`} type=\"video/mp4\" />\n//                         Your browser does not support the video tag.\n//                       </video>\n//                       {/* Add video loading state check here */}\n//                       {videoLoading && <p>Loading...</p>}\n//                     </div>\n//                   ) : (\n//                     <p>Loading...</p>\n//                   )}\n  \n//                   <div></div>\n  \n//                   <div style={{ height: \"200px\", overflow: \"hidden\" }}>\n//                     <p>{blog.content}</p>\n//                     <p>Author: {blog.authorName}</p>\n//                     <p>Published Date: {blog.created_at}</p>\n//                     <p>Updated Date: {blog.updated_at}</p>\n//                     <br />\n//                   </div>\n\n               \n//                 </div>\n//               ))\n//           )}\n//         </div>\n//       </div>\n//     )\n// };\n\n\n// export default Likes;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,WAAW,MAAM,6BAA6B;AACrD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,kBAAkB;AAC/E,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,SAAS,QAAQ,aAAa;;AAEv},"metadata":{},"sourceType":"module","externalDependencies":[]}