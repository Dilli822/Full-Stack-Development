{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState(null);\n//   const [liked, setLiked] = useState(false);\n//   const [likeCount, setLikeCount] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleBlogClick = (id) => {\n//     const blog = blogs.find((blog) => blog.id === id);\n//     setSelectedBlogId(id);\n//     setLiked(blog.liked);\n//     setLikeCount(blog.likes);\n//   };\n\n//   const handleLikeClick = async (blog) => {\n//     const { id, liked } = blog;\n//     const newLiked = !liked;\n//     const newLikes = liked ? blog.likes - 1 : blog.likes + 1;\n\n//     try {\n//       const response = await fetch(`http://localhost:8000/api/blog/likes/update/${id}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//         body: JSON.stringify({ liked: newLiked, likes: newLikes }),\n//       });\n\n//       const data = await response.json();\n//       const newBlogs = blogs.map((blog) => (blog.id === data.id ? data : blog));\n\n//       setBlogs(newBlogs);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//   {blogs.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>{blog.content}</p>\n//       <p>\n//         Author: {blog.author.first_name} {blog.author.last_name}\n//       </p>\n//       <p>Likes: {blog.likes}</p>\n//       <IconButton onClick={() => handleLikeClick(blog)}>\n//         <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//       </IconButton>\n//     </div>\n//   ))}\n// </div>\n\n//       {selectedBlogId && (\n//         <div className=\"likes\">\n//           <h3>\n//             {blogs.find((blog) => blog.id === selectedBlogId).title} - Likes:{\" \"}\n//             {likeCount}\n//           </h3>\n//           <IconButton\n//             onClick={() => {\n//               setLikeCount(likeCount + (liked ? -1 : 1));\n//               setLiked(!liked);\n//             }}\n//           >\n//             <FavoriteIcon color={liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//           <IconButton onClick={handleLikeClick}>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   return (\n//     <div className=\"blogs\">\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h3>{blog.title}</h3>\n//           <p>{blog.content}</p>\n//           <p>\n//             Author: {blog.author.first_name} {blog.author.last_name}\n//           </p>\n//           <p>Likes: {blog.likes}</p>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n//             <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [countLikes, setCountLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setCountLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = (blogId) => {\n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         liked: blogToUpdate.liked,\n//         likes: blogToUpdate.likes,\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <IconButton>\n//               <FavoriteIcon color= \"primary\" />\n//             </IconButton>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setCountLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = (blogId) => {\n//     // Find the blog post with the given id\n//     const blogIndex = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[blogIndex] };\n\n//     // If the blog post is already liked, decrease the like count by 1\n//     // Otherwise, increase the like count by 1\n//     if (blogToUpdate.liked ) {\n//       if (blogToUpdate.liked > countLikes) {\n//       blogToUpdate.likes--;\n//     }\n//     }\n\n//     else if(blogToUpdate.liked ){\n//       if (blogToUpdate.liked < countLikes) {\n//         blogToUpdate.likes++;\n//       }\n//     }\n\n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n\n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[blogIndex] = blogToUpdate;\n//     setBlogs(newBlogs);\n\n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         liked: blogToUpdate.liked,\n//         likes: blogToUpdate.likes,\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <IconButton onClick={() => handleLikeClick(blog.id)}>\n//               <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//             </IconButton>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [countLikes, setCountLikes] = useState(0);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked.likes);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = blogId => {\n    // Find the blog post with the given id\n    const blogIndex = blogs.findIndex(blog => blog.id === blogId);\n    const blogToUpdate = {\n      ...blogs[blogIndex]\n    };\n\n    // If the blog post is already liked, toggle the liked state\n    // Otherwise, set the liked state to true and increase the like count by 1\n    if (blogToUpdate.liked) {\n      blogToUpdate.liked = false;\n    } else {\n      blogToUpdate.liked = true;\n      blogToUpdate.likes++;\n    }\n\n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[blogIndex] = blogToUpdate;\n    setBlogs(newBlogs);\n\n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        liked: blogToUpdate.liked,\n        likes: blogToUpdate.likes\n      })\n    }).then(response => response.json()).then(data => console.log(data)).catch(error => {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blogs\",\n      children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Author: \", blog.author.first_name, \" \", blog.author.last_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Likes: \", blog.likes]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => handleLikeClick(blog.id),\n          children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n            color: blog.liked ? \"error\" : \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this)]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"6Nwdms8JbdqG619SoElgezRr9NY=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","countLikes","setCountLikes","error","setError","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","liked","likes","console","handleLikeClick","blogId","blogIndex","findIndex","id","blogToUpdate","newBlogs","method","body","JSON","stringify","then","log","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","content","author","first_name","last_name","onClick","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [selectedBlogId, setSelectedBlogId] = useState(null);\n//   const [liked, setLiked] = useState(false);\n//   const [likeCount, setLikeCount] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n//         setBlogs(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleBlogClick = (id) => {\n//     const blog = blogs.find((blog) => blog.id === id);\n//     setSelectedBlogId(id);\n//     setLiked(blog.liked);\n//     setLikeCount(blog.likes);\n//   };\n\n//   const handleLikeClick = async (blog) => {\n//     const { id, liked } = blog;\n//     const newLiked = !liked;\n//     const newLikes = liked ? blog.likes - 1 : blog.likes + 1;\n  \n//     try {\n//       const response = await fetch(`http://localhost:8000/api/blog/likes/update/${id}/`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//         body: JSON.stringify({ liked: newLiked, likes: newLikes }),\n//       });\n  \n//       const data = await response.json();\n//       const newBlogs = blogs.map((blog) => (blog.id === data.id ? data : blog));\n  \n//       setBlogs(newBlogs);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n  \n\n//   return (\n//     <div>\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//   {blogs.map((blog) => (\n//     <div key={blog.id}>\n//       <h3>{blog.title}</h3>\n//       <p>{blog.content}</p>\n//       <p>\n//         Author: {blog.author.first_name} {blog.author.last_name}\n//       </p>\n//       <p>Likes: {blog.likes}</p>\n//       <IconButton onClick={() => handleLikeClick(blog)}>\n//         <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//       </IconButton>\n//     </div>\n//   ))}\n// </div>\n\n//       {selectedBlogId && (\n//         <div className=\"likes\">\n//           <h3>\n//             {blogs.find((blog) => blog.id === selectedBlogId).title} - Likes:{\" \"}\n//             {likeCount}\n//           </h3>\n//           <IconButton\n//             onClick={() => {\n//               setLikeCount(likeCount + (liked ? -1 : 1));\n//               setLiked(!liked);\n//             }}\n//           >\n//             <FavoriteIcon color={liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//           <IconButton onClick={handleLikeClick}>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n\n\n// function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   return (\n//     <div className=\"blogs\">\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h3>{blog.title}</h3>\n//           <p>{blog.content}</p>\n//           <p>\n//             Author: {blog.author.first_name} {blog.author.last_name}\n//           </p>\n//           <p>Likes: {blog.likes}</p>\n//           <IconButton onClick={() => handleLikeClick(blog.id)}>\n//             <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//           </IconButton>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Likes;\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [countLikes, setCountLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setCountLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n  \n//   const handleLikeClick = (blogId) => {\n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         liked: blogToUpdate.liked,\n//         likes: blogToUpdate.likes,\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n  \n\n//   return (\n//     <div>\n//       {error && <p>{error}</p>}\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <IconButton>\n//               <FavoriteIcon color= \"primary\" />\n//             </IconButton>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setCountLikes(blogsWithLiked.likes);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = (blogId) => {\n//     // Find the blog post with the given id\n//     const blogIndex = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[blogIndex] };\n\n//     // If the blog post is already liked, decrease the like count by 1\n//     // Otherwise, increase the like count by 1\n//     if (blogToUpdate.liked ) {\n//       if (blogToUpdate.liked > countLikes) {\n//       blogToUpdate.likes--;\n//     }\n//     }\n\n//     else if(blogToUpdate.liked ){\n//       if (blogToUpdate.liked < countLikes) {\n//         blogToUpdate.likes++;\n//       }\n//     }\n\n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n\n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[blogIndex] = blogToUpdate;\n//     setBlogs(newBlogs);\n\n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         liked: blogToUpdate.liked,\n//         likes: blogToUpdate.likes,\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n\n//       <h2>Blogs</h2>\n//       <div className=\"blogs\">\n//         {blogs.map((blog) => (\n//           <div key={blog.id}>\n//             <h3>{blog.title}</h3>\n//             <p>{blog.content}</p>\n//             <p>\n//               Author: {blog.author.first_name} {blog.author.last_name}\n//             </p>\n//             <p>Likes: {blog.likes}</p>\n//             <IconButton onClick={() => handleLikeClick(blog.id)}>\n//               <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n//             </IconButton>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [countLikes, setCountLikes] = useState(0);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked.likes);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = (blogId) => {\n    // Find the blog post with the given id\n    const blogIndex = blogs.findIndex((blog) => blog.id === blogId);\n    const blogToUpdate = { ...blogs[blogIndex] };\n  \n    // If the blog post is already liked, toggle the liked state\n    // Otherwise, set the liked state to true and increase the like count by 1\n    if (blogToUpdate.liked) {\n      blogToUpdate.liked = false;\n    } else {\n      blogToUpdate.liked = true;\n      blogToUpdate.likes++;\n    }\n  \n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[blogIndex] = blogToUpdate;\n    setBlogs(newBlogs);\n  \n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        liked: blogToUpdate.liked,\n        likes: blogToUpdate.likes,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(data))\n      .catch((error) => {\n        console.error(error);\n        setError(\"Failed to update like state.\");\n      });\n  };\n  \n  \n  return (\n    <div>\n      {error && <p>{error}</p>}\n      <h2>Blogs</h2>\n      <div className=\"blogs\">\n        {blogs.map((blog) => (\n          <div key={blog.id}>\n            <h3>{blog.title}</h3>\n            <p>{blog.content}</p>\n            <p>\n              Author: {blog.author.first_name} {blog.author.last_name}\n            </p>\n            <p>Likes: {blog.likes}</p>\n            <IconButton onClick={() => handleLikeClick(blog.id)}>\n              <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n            </IconButton>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,SAAS,MAAM,2BAA2B;;AAGjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}