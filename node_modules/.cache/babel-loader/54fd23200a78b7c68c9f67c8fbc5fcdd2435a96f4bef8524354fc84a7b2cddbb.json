{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/blog-comment.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from 'react';\n\n// export default function Comments({ authToken, blogId, commentId }) {\n//   const [commentData, setCommentData] = useState(null);\n//   const [newComment, setNewComment] = useState('');\n\n//   useEffect(() => {\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'GET',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//       },\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   }, [authToken, blogId, commentId]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'PUT',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ comment: newComment }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   };\n\n//   if (!commentData) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <textarea\n//         value={newComment}\n//         onChange={(event) => setNewComment(event.target.value)}\n//       />\n//       <button type=\"submit\">Save</button>\n//     </form>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comments(props) {\n  _s();\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n        setComments(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchComments();\n  }, [props.blogId]);\n  const handleCreateComment = async commentData => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/${props.blogId}/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        },\n        body: JSON.stringify(commentData)\n      });\n      if (response.ok) {\n        const newComment = await response.json();\n        setComments([...comments, newComment]);\n      } else {\n        console.error(\"Error creating comment\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleUpdateComment = async (commentId, commentData) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/${commentId}/edit/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        },\n        body: JSON.stringify(commentData)\n      });\n      if (response.ok) {\n        const updatedComment = await response.json();\n        const updatedComments = comments.map(comment => {\n          if (comment.id === updatedComment.id) {\n            return updatedComment;\n          } else {\n            return comment;\n          }\n        });\n        setComments(updatedComments);\n      } else {\n        console.error(\"Error updating comment\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"author: \", comment.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"comment: \", comment.comment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n// }\n\n// function CommentForm(props) {\n//     const [formData, setFormData] = useState({ author: \"\", body: \"\" });\n\n//     const handleSubmit = (event) => {\n//       event.preventDefault();\n//       const requestOptions = {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//         body: JSON.stringify({\n//           author: formData.author,\n//           body: formData.body,\n//           blog: props.blogId,\n//         }),\n//       };\n\n//       fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/`, requestOptions)\n//         .then((response) => {\n//           if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//           }\n//           return response.json();\n//         })\n//         .then((data) => {\n//           props.onCommentSubmit(data);\n//           setFormData({ author: \"\", body: \"\" });\n//         })\n//         .catch((error) => {\n//           console.error(\"Error submitting comment:\", error);\n//         });\n//     };\n\n//     const handleInputChange = (event) => {\n//       setFormData({ ...formData, [event.target.name]: event.target.value });\n//     };\n\n//     return (\n//       <form onSubmit={handleSubmit}>\n//         <br></br>\n//         <div>\n//           <label htmlFor=\"author\">Author:</label>\n//           <input\n//             type=\"text\"\n//             id=\"author\"\n//             name=\"author\"\n//             value={formData.author}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"body\">Body:</label>\n//           <textarea\n//             id=\"body\"\n//             name=\"body\"\n//             value={formData.body}\n//             onChange={handleInputChange}\n//           ></textarea>\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     );\n//   }\n\n//   export default CommentForm;\n_s(Comments, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Comments","props","_s","comments","setComments","fetchComments","response","fetch","blogId","headers","Authorization","localStorage","getItem","data","json","error","console","handleCreateComment","commentData","method","body","JSON","stringify","ok","newComment","handleUpdateComment","commentId","updatedComment","updatedComments","map","comment","id","children","fileName","_jsxFileName","lineNumber","columnNumber","author","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/comments/blog-comment.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n\n// export default function Comments({ authToken, blogId, commentId }) {\n//   const [commentData, setCommentData] = useState(null);\n//   const [newComment, setNewComment] = useState('');\n\n//   useEffect(() => {\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'GET',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//       },\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   }, [authToken, blogId, commentId]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     fetch(`http://example.com/api/blog/${blogId}/comments/${commentId}/edit/`, {\n//       method: 'PUT',\n//       headers: {\n//         Authorization: `Token ${authToken}`,\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ comment: newComment }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setCommentData(data))\n//       .catch((error) => console.error(error));\n//   };\n\n//   if (!commentData) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <textarea\n//         value={newComment}\n//         onChange={(event) => setNewComment(event.target.value)}\n//       />\n//       <button type=\"submit\">Save</button>\n//     </form>\n//   );\n// }\n\nimport React, { useState, useEffect } from 'react';\n\nexport default function Comments(props) {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n        setComments(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchComments();\n  }, [props.blogId]);\n\n  const handleCreateComment = async (commentData) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/${props.blogId}/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n        body: JSON.stringify(commentData),\n      });\n\n      if (response.ok) {\n        const newComment = await response.json();\n        setComments([...comments, newComment]);\n      } else {\n        console.error(\"Error creating comment\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleUpdateComment = async (commentId, commentData) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/${commentId}/edit/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        },\n        body: JSON.stringify(commentData),\n      });\n\n      if (response.ok) {\n        const updatedComment = await response.json();\n        const updatedComments = comments.map((comment) => {\n          if (comment.id === updatedComment.id) {\n            return updatedComment;\n          } else {\n            return comment;\n          }\n        });\n        setComments(updatedComments);\n      } else {\n        console.error(\"Error updating comment\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n\n  return (\n    <div>\n      <h2>Comments</h2>\n      {comments.map((comment) => (\n        <div>\n          <h3>author: {comment.author}</h3>\n          <p>comment: {comment.comment}</p>\n       \n        </div>\n      ))}\n\n    </div>\n  );\n      }\n      \n// }\n\n// function CommentForm(props) {\n//     const [formData, setFormData] = useState({ author: \"\", body: \"\" });\n  \n//     const handleSubmit = (event) => {\n//       event.preventDefault();\n//       const requestOptions = {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         },\n//         body: JSON.stringify({\n//           author: formData.author,\n//           body: formData.body,\n//           blog: props.blogId,\n//         }),\n//       };\n  \n//       fetch(`http://localhost:8000/api/blog/${props.blogId}/comments/`, requestOptions)\n//         .then((response) => {\n//           if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//           }\n//           return response.json();\n//         })\n//         .then((data) => {\n//           props.onCommentSubmit(data);\n//           setFormData({ author: \"\", body: \"\" });\n//         })\n//         .catch((error) => {\n//           console.error(\"Error submitting comment:\", error);\n//         });\n//     };\n  \n//     const handleInputChange = (event) => {\n//       setFormData({ ...formData, [event.target.name]: event.target.value });\n//     };\n  \n//     return (\n//       <form onSubmit={handleSubmit}>\n//         <br></br>\n//         <div>\n//           <label htmlFor=\"author\">Author:</label>\n//           <input\n//             type=\"text\"\n//             id=\"author\"\n//             name=\"author\"\n//             value={formData.author}\n//             onChange={handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"body\">Body:</label>\n//           <textarea\n//             id=\"body\"\n//             name=\"body\"\n//             value={formData.body}\n//             onChange={handleInputChange}\n//           ></textarea>\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     );\n//   }\n  \n//   export default CommentForm;\n  "],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCN,KAAK,CAACO,MAAO,YAAW,EAAE;UACvFC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;UAC/D;QACF,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;QAClCV,WAAW,CAACS,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDV,aAAa,EAAE;EACjB,CAAC,EAAE,CAACJ,KAAK,CAACO,MAAM,CAAC,CAAC;EAElB,MAAMS,mBAAmB,GAAG,MAAOC,WAAW,IAAK;IACjD,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCN,KAAK,CAACO,MAAO,aAAYP,KAAK,CAACO,MAAO,GAAE,EAAE;QACvGW,MAAM,EAAE,MAAM;QACdV,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;QAC/D,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;MAClC,CAAC,CAAC;MAEF,IAAIZ,QAAQ,CAACiB,EAAE,EAAE;QACf,MAAMC,UAAU,GAAG,MAAMlB,QAAQ,CAACQ,IAAI,EAAE;QACxCV,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEqB,UAAU,CAAC,CAAC;MACxC,CAAC,MAAM;QACLR,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAC;MACzC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAMU,mBAAmB,GAAG,MAAAA,CAAOC,SAAS,EAAER,WAAW,KAAK;IAC5D,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCN,KAAK,CAACO,MAAO,aAAYkB,SAAU,QAAO,EAAE;QACzGP,MAAM,EAAE,KAAK;QACbV,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;QAC/D,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;MAClC,CAAC,CAAC;MAEF,IAAIZ,QAAQ,CAACiB,EAAE,EAAE;QACf,MAAMI,cAAc,GAAG,MAAMrB,QAAQ,CAACQ,IAAI,EAAE;QAC5C,MAAMc,eAAe,GAAGzB,QAAQ,CAAC0B,GAAG,CAAEC,OAAO,IAAK;UAChD,IAAIA,OAAO,CAACC,EAAE,KAAKJ,cAAc,CAACI,EAAE,EAAE;YACpC,OAAOJ,cAAc;UACvB,CAAC,MAAM;YACL,OAAOG,OAAO;UAChB;QACF,CAAC,CAAC;QACF1B,WAAW,CAACwB,eAAe,CAAC;MAC9B,CAAC,MAAM;QACLZ,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAC;MACzC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAID,oBACEhB,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAAiC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,EAChBjC,QAAQ,CAAC0B,GAAG,CAAEC,OAAO,iBACpB/B,OAAA;MAAAiC,QAAA,gBACEjC,OAAA;QAAAiC,QAAA,GAAI,UAAQ,EAACF,OAAO,CAACO,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACjCrC,OAAA;QAAAiC,QAAA,GAAG,WAAS,EAACF,OAAO,CAACA,OAAO;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAGpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEE;AAEJ;;AAEN;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAlC,EAAA,CA7JwBF,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}