{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [likedBy, setLikedBy] = useState(0);\n//   const [authorId, setAuthorId] = useState(null);\n\n//   console.log(authorId);\n//   console.log(likedBy);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n\n//         setCountLikes(blogsWithLiked[0].likes);\n//         setLikedBy(blogsWithLiked.liked_by);\n\n//         setAuthorId(blogsWithLiked.author);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = (blogId) => {\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[index] };\n\n//     if (blogToUpdate.liked || blogToUpdate.author == authorId) {\n//       // If the blog post is already liked or the author is not the current user,\n//       // don't decrease the like count\n//       if (blogToUpdate.likes > countLikes) {\n//         blogToUpdate.likes--;\n//         setCountLikes(countLikes - 1);\n//       }\n//     } else {\n//       // If the blog post is not liked and the author is the current user, increase the like count by 1\n//       blogToUpdate.likes++;\n//       setCountLikes(countLikes + 1);\n//     }\n\n//     // \n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n\n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[index] = blogToUpdate;\n//     setBlogs(newBlogs);\n\n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n\n//           liked: blogToUpdate.liked,\n//           likes: blogToUpdate.likes,\n\n//       }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to update like state.');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n\n//   return (\n//     <div>\n\n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           liked by : {blog.liked_by} <br></br>\n//           likes: <span>{blog.likes}</span>\n\n//           {/* {blog.liked_by == blog.author ? \n//             <div>\n//                         <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//                         <FavoriteIcon color=\"error\" />\n// </IconButton>\n\n//                </div>\n//             : <div>          <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//             <FavoriteIcon color=\"error\" />\n// </IconButton>\n// </div>} */}\n\n//  { blog.liked_by !== blog.author_id ? \n//  <div>  liked by author itself   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//  <FavoriteIcon color=\"error\" />\n// </IconButton>\n//  </div> : \n//  <div> author didnot like   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//  <FavoriteIcon color=\"primary\" />\n// </IconButton>\n// </div> }\n\n//           <IconButton>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       ))}\n\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import { IconButton } from \"@mui/material\";\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// import ShareIcon from '@mui/icons-material/Share';\n\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [countLikes, setCountLikes] = useState(0);\n//   const [likedBy, setLikedBy] = useState(0);\n//   const [authorId, setAuthorId] = useState(null);\n\n//   console.log(authorId);\n//   console.log(likedBy);\n\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n        \n//         setCountLikes(blogsWithLiked[0].likes);\n//         setLikedBy(blogsWithLiked.liked_by);\n        \n//         setAuthorId(blogsWithLiked.author);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n  \n//   const handleLikeClick = (blogId) => {\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[index] };\n  \n//     if (blogToUpdate.liked || blogToUpdate.author == authorId) {\n//       // If the blog post is already liked or the author is not the current user,\n//       // don't decrease the like count\n//       if (blogToUpdate.likes > countLikes) {\n//         blogToUpdate.likes--;\n//         setCountLikes(countLikes - 1);\n//       }\n//     } else {\n//       // If the blog post is not liked and the author is the current user, increase the like count by 1\n//       blogToUpdate.likes++;\n//       setCountLikes(countLikes + 1);\n//     }\n  \n//     // \n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n  \n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[index] = blogToUpdate;\n//     setBlogs(newBlogs);\n  \n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n    \n//           liked: blogToUpdate.liked,\n//           likes: blogToUpdate.likes,\n    \n\n//       }),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Failed to update like state.');\n//         }\n//         return response.json();\n//       })\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\n  \n//   return (\n//     <div>\n    \n//       {blogs.map((blog) => (\n//         <div key={blog.id}>\n//           <h2>{blog.title}</h2>\n//           <p>{blog.content}</p>\n//           liked by : {blog.liked_by} <br></br>\n//           likes: <span>{blog.likes}</span>\n          \n//           {/* {blog.liked_by == blog.author ? \n//             <div>\n//                         <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//                         <FavoriteIcon color=\"error\" />\n// </IconButton>\n\n//                </div>\n//             : <div>          <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//             <FavoriteIcon color=\"error\" />\n// </IconButton>\n// </div>} */}\n\n//  { blog.liked_by !== blog.author_id ? \n//  <div>  liked by author itself   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//  <FavoriteIcon color=\"error\" />\n// </IconButton>\n//  </div> : \n//  <div> author didnot like   <IconButton onClick={() => handleLikeClick(blog.id)}>\n\n//  <FavoriteIcon color=\"primary\" />\n// </IconButton>\n// </div> }\n\n//           <IconButton>\n//             <ShareIcon />\n//           </IconButton>\n//         </div>\n//       ))}\n\n//     </div>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}