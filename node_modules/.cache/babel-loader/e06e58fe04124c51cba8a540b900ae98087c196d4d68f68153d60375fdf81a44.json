{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/blog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport { Container } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n// import Update from \"./update\";\n// import Create from \"./create\";\n// import Logout from \"./logout\";\n// import ImageUploader from \"./storeImagetemporarily\";\n// import Login from \"./login\";\n// import { useNavigate } from 'react-router-dom';\n\n// function Blog() {\n//     const [loading, setLoading] = useState(true);\n//     const [newBlogTitle, setNewBlogTitle] = useState(\"\");\n//     const [newBlogContent, setNewBlogContent] = useState(\"\");\n//     const [newBlogAuthorName, setNewBlogAuthorName] = useState(\"\");\n\n//     const [blogs, setBlogs] = useState([]);\n//     const [selectedBlogId, setSelectedBlogId] = useState(\"\");\n//     const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//     const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//     const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//     const [newBlogImage, setNewBlogImage] = useState(null);\n//     const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n//     const [imageUrl, setImageUrl] = useState(null);\n\n//     const [created_at, setCreatedAt] = useState(\"\");\n//     const accessToken = localStorage.getItem(\"accessToken\");\n//     const tokenParts = accessToken.split(\".\");\n\n//     // Decode the access token payload\n//     const payload = JSON.parse(atob(tokenParts[1]));\n\n//     // Get the expiration time from the payload\n//     const expirationTime = payload.exp;\n\n//     // Calculate the remaining time in seconds until the token expires\n//     const currentTime = Math.floor(Date.now() / 1000);\n//     const remainingTime = expirationTime - currentTime;\n\n//     console.log(`The access token will expire in ${remainingTime} seconds.`);\n//     useEffect(() => {\n//         const fetchBlogs = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                     },\n//                 });\n\n//                 if (response.status === 401) {\n//                     console.log(\"token expired and expired time is\", remainingTime);\n\n//                     // Access token has expired, use refresh token to get a new access token\n//                     const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n//                         method: \"POST\",\n//                         headers: {\n//                             \"Content-Type\": \"application/json\",\n//                         },\n//                         body: JSON.stringify({\n//                             refresh: localStorage.getItem(\"refreshToken\"),\n//                         }),\n//                     });\n\n//                     if (refreshResponse.ok) {\n//                         const tokens = await refreshResponse.json();\n//                         localStorage.setItem(\"accessToken\", tokens.access);\n//                         // Try fetching blogs again with the new access token\n//                         const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//                             headers: {\n//                                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                             },\n//                         });\n//                         const data = await newResponse.json();\n//                         setBlogs(data);\n//                         setLoading(false);\n//                     } else {\n//                         throw new Error(\"Refresh token is invalid\");\n//                     }\n//                 } else {\n//                     const data = await response.json();\n//                     setBlogs(data);\n//                     setLoading(false);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchBlogs();\n//     }, []);\n\n//     const handleCreate = () => {\n//         const newBlog = {\n//             title: newBlogTitle,\n//             content: newBlogContent,\n//             authorName: newBlogAuthorName,\n//             image: newBlogImage, // Add the image file to the new blog object\n//         };\n\n//         const formData = new FormData();\n//         formData.append(\"title\", newBlog.title);\n//         formData.append(\"content\", newBlog.content);\n//         formData.append(\"authorName\", newBlog.authorName);\n//         if(newBlogImage != null){\n//             formData.append('image', newBlogImage);\n//         }\n\n//         fetch(\"http://localhost:8000/api/blog/create/\", {\n//             method: \"POST\",\n//             headers: {\n//                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             },\n//             body: formData, // Use the form data instead of JSON.stringify\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 setBlogs([...blogs, data]);\n//                 setNewBlogTitle(\"\");\n//                 setNewBlogContent(\"\");\n//                 setNewBlogAuthorName(\"\");\n//                 setNewBlogImage(null); // Reset the image state after submitting the form\n//             });\n//     };\n\n//     const handleDelete = (id) => {\n//         if (window.confirm(\"Are you sure you want to delete this post?\")) {\n//             fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n//                 method: \"DELETE\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                 },\n//             })\n//                 .then((response) => {\n//                     if (response.ok) {\n//                         setBlogs(blogs.filter((blog) => blog.id !== id));\n//                     } else {\n//                         throw new Error(\"Delete failed\");\n//                     }\n//                 })\n//                 .catch((error) => {\n//                     console.error(error);\n//                 });\n//         }\n//     };\n\n//     const handleUpdate = () => {\n//         const updatedBlog = {\n//             id: selectedBlogId,\n//             title: updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle,\n//             content: updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent,\n//             authorName: updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName,\n//         };\n\n//         const formData = new FormData();\n//         formData.append(\"title\", updatedBlog.title);\n//         formData.append(\"content\", updatedBlog.content);\n//         formData.append(\"authorName\", updatedBlog.authorName);\n//         if(updatedBlogImage != null){\n//             formData.append('image', updatedBlogImage);\n//         }\n\n//         fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n//             method: \"PUT\",\n//             headers: {\n//                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             },\n//             body: formData,\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 const index = blogs.findIndex((blog) => blog.id === data.id);\n//                 const newBlogs = [...blogs];\n//                 newBlogs[index] = data;\n//                 setBlogs(newBlogs);\n//                 setSelectedBlogId(\"\");\n//                 setUpdatedBlogTitle(undefined);\n//                 setUpdatedBlogContent(undefined);\n//                 setUpdatedBlogAuthorName(undefined);\n//                 setUpdatedBlogImage(null);\n//             })\n//             .catch((error) => console.error(error));\n//     };\n\n//   const navigate = useNavigate();\n\n//   const  handleLogout = () => {\n//     if (window.confirm(\"Are you sure you want to logout?\")) {\n//     // Remove access token and refresh token from local storage\n//     localStorage.removeItem('accessToken');\n//     localStorage.removeItem('refreshToken');\n\n//     // Navigate to the login page\n\n//     navigate('/login');\n//   } }\n\n//     if (loading) {\n//         return <span class=\"loader\"></span>\n//     }\n\n//     return (\n\n//         <div>\n\n//         <div style={{ display: \"flex\", justifyContent: \"space-around\" , flexWrap: \"wrap-reverse\" , width: \"100%\", padding: \"0 55px\", margin: \"0 35px\"}}>\n\n//         <div style={{ margin: \"0px\", width: \"50%\"}}>\n\n//             <div>\n\n//                 <h1>Blog List</h1>\n\n//                 {blogs\n//                     .sort((a, b) => b.id - a.id)\n//                     .map((blog) => (\n//                         <div key={blog.id}>\n//                             <h2>{blog.title}</h2>\n//                             <img src={`http://localhost:8000${blog.image}`} style={{ width: \"450px\", maxWidth: \"100%\" }} />\n\n//                             <p>{blog.content}</p>\n//                             <p>Author: {blog.authorName}</p>\n//                             <p>Published Date: {blog.created_at}</p>\n//                             <p>Updated Date: {blog.updated_at}</p>\n//                             {created_at && <p>Blog Created at Standard: {created_at}</p>}\n//                             <button className=\"update\" onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//                             <button className=\"delete\" onClick={() => handleDelete(blog.id)}>Delete</button>\n//                         </div>\n//                     ))}\n//             </div>\n//         </div>\n\n//         <div style={{margin: \"0px\" ,width: \"50%\"}}> \n\n//         <button onClick={handleLogout}>Logout</button>\n//         <div style={{ position: \"fixed\"}}>\n//         <h2>Create New Blog</h2>\n//                     <label>\n//                         Title: </label><br></br>\n//                         <input type=\"text\" value={newBlogTitle} onChange={(event) => setNewBlogTitle(event.target.value)} />\n\n//                     <br />\n//                     <label>\n//                         Content: </label> <br></br>\n//                         <textarea value={newBlogContent} onChange={(event) => setNewBlogContent(event.target.value)} />\n\n//                     <br />\n//                     <label>\n//                         Author Name:    </label>  <br></br>\n//                         <input type=\"text\" value={newBlogAuthorName} onChange={(event) => setNewBlogAuthorName(event.target.value)} />\n\n//                     <div>\n//                         <label htmlFor=\"newBlogImage\">Image:</label> \n//                         <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"newBlogImage\" name=\"newBlogImage\" onChange={(event) => setNewBlogImage(event.target.files[0])} />\n//                     </div>\n//                     <button  className=\"create\" onClick={handleCreate}>Create Blog</button>\n\n//                                     {/* <UpdateBlog/> */}\n//                 {selectedBlogId !== \"\" && (\n//                     <div style={{ width: \"auto\"}}>\n//                         <h2>Update Blog \"{blogs.find((blog) => blog.id === selectedBlogId).title}\"</h2>\n\n//                         <div>\n//                             <label htmlFor=\"blog-title\">Title:</label> <br></br>\n//                             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={(e) => setUpdatedBlogTitle(e.target.value)} />\n//                         </div>\n\n//                         <div>\n//                             <label htmlFor=\"blog-content\">Content:</label> <br></br>\n//                             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent} onChange={(e) => setUpdatedBlogContent(e.target.value)} />\n//                         </div>\n\n//                         <div>\n//                             <label htmlFor=\"blog-author-name\">Author Name:</label> <br></br>\n//                             <input\n//                                 type=\"text\"\n//                                 id=\"blog-author-name\"\n//                                 value={updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName}\n//                                 onChange={(e) => setUpdatedBlogAuthorName(e.target.value)}\n//                             />\n//                         </div>\n\n//                         <div>\n//                             <label htmlFor=\"updatedBlogImage\">Image:</label>\n//                             <img src={`http://localhost:8000${blogs.find((blog) => blog.id === selectedBlogId).image}`} style={{ width: \"50px\", maxWidth: \"100%\" }} />\n//                             <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={(event) => setUpdatedBlogImage(event.target.files[0])} />\n//                         </div>\n\n//                         <button className=\"update\"  onClick={handleUpdate}>Update Blog</button>\n//                         <button className=\"cancel\" onClick={() => setSelectedBlogId(\"\")}>Cancel</button>\n//                     </div>\n//                 )}\n\n//         </div>\n\n//         </div>\n//         </div>\n//         </div>\n//     );\n// }\n// export default Blog;\n\nimport { Button } from 'react-bootstrap';\nimport Typography from '@mui/material/Typography';\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\n// import Link from '@mui/material/Link';\nimport HomeIcon from '@mui/icons-material/Home';\nimport WhatshotIcon from '@mui/icons-material/Whatshot';\nimport GrainIcon from '@mui/icons-material/Grain';\nimport SignUp from './signup';\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { styled } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  };\n});\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    \"aria-labelledby\": `simple-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 3\n  }, this);\n}\n_c = TabPanel;\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired\n};\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\nfunction Blog() {\n  _s();\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const [loading, setLoading] = useState(true);\n  const [newBlogTitle, setNewBlogTitle] = useState(\"\");\n  const [newBlogContent, setNewBlogContent] = useState(\"\");\n  const [newBlogAuthorName, setNewBlogAuthorName] = useState(\"\");\n  const [blogs, setBlogs] = useState([]);\n  const [selectedBlogId, setSelectedBlogId] = useState(\"\");\n  const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n  const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n  const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n  const [newBlogImage, setNewBlogImage] = useState(null);\n  const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [created_at, setCreatedAt] = useState(\"\");\n  const accessToken = localStorage.getItem(\"accessToken\");\n  const tokenParts = accessToken.split(\".\");\n\n  // Decode the access token payload\n  const payload = JSON.parse(atob(tokenParts[1]));\n\n  // Get the expiration time from the payload\n  const expirationTime = payload.exp;\n\n  // Calculate the remaining time in seconds until the token expires\n  const currentTime = Math.floor(Date.now() / 1000);\n  const remainingTime = expirationTime - currentTime;\n  console.log(`The access token will expire in ${remainingTime} seconds.`);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        if (response.status === 401) {\n          console.log(\"token expired and expired time is\", remainingTime);\n\n          // Access token has expired, use refresh token to get a new access token\n          const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              refresh: localStorage.getItem(\"refreshToken\")\n            })\n          });\n          if (refreshResponse.ok) {\n            const tokens = await refreshResponse.json();\n            localStorage.setItem(\"accessToken\", tokens.access);\n            // Try fetching blogs again with the new access token\n            const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n              }\n            });\n            const data = await newResponse.json();\n            setBlogs(data);\n            console.log(data);\n            setLoading(false);\n          } else {\n            throw new Error(\"Refresh token is invalid\");\n          }\n        } else {\n          const data = await response.json();\n          setBlogs(data);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleCreate = () => {\n    const newBlog = {\n      title: newBlogTitle,\n      content: newBlogContent,\n      authorName: newBlogAuthorName,\n      image: newBlogImage // Add the image file to the new blog object\n    };\n\n    const formData = new FormData();\n    formData.append(\"title\", newBlog.title);\n    formData.append(\"content\", newBlog.content);\n    formData.append(\"authorName\", newBlog.authorName);\n    if (newBlogImage != null) {\n      formData.append('image', newBlogImage);\n    }\n    fetch(\"http://localhost:8000/api/blog/create/\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n      },\n      body: formData // Use the form data instead of JSON.stringify\n    }).then(response => response.json()).then(data => {\n      setBlogs([...blogs, data]);\n      setNewBlogTitle(\"\");\n      setNewBlogContent(\"\");\n      setNewBlogAuthorName(\"\");\n      setNewBlogImage(null); // Reset the image state after submitting the form\n    });\n  };\n\n  const handleDelete = id => {\n    if (window.confirm(\"Are you sure you want to delete this post?\")) {\n      fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          setBlogs(blogs.filter(blog => blog.id !== id));\n        } else {\n          throw new Error(\"Delete failed\");\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  };\n  const handleUpdate = () => {\n    const updatedBlog = {\n      id: selectedBlogId,\n      title: updatedBlogTitle === undefined ? blogs.find(blog => blog.id === selectedBlogId).title : updatedBlogTitle,\n      content: updatedBlogContent === undefined ? blogs.find(blog => blog.id === selectedBlogId).content : updatedBlogContent,\n      authorName: updatedBlogAuthorName === undefined ? blogs.find(blog => blog.id === selectedBlogId).authorName : updatedBlogAuthorName\n    };\n    const formData = new FormData();\n    formData.append(\"title\", updatedBlog.title);\n    formData.append(\"content\", updatedBlog.content);\n    formData.append(\"authorName\", updatedBlog.authorName);\n    if (updatedBlogImage != null) {\n      formData.append('image', updatedBlogImage);\n    }\n    fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n      },\n      body: formData\n    }).then(response => response.json()).then(data => {\n      const index = blogs.findIndex(blog => blog.id === data.id);\n      const newBlogs = [...blogs];\n      newBlogs[index] = data;\n      setBlogs(newBlogs);\n      setSelectedBlogId(\"\");\n      setUpdatedBlogTitle(undefined);\n      setUpdatedBlogContent(undefined);\n      setUpdatedBlogAuthorName(undefined);\n      setUpdatedBlogImage(null);\n    }).catch(error => console.error(error));\n  };\n  const navigate = useNavigate();\n  const handleLogout = () => {\n    if (window.confirm(\"Are you sure you want to logout?\")) {\n      // Remove access token and refresh token from local storage\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n\n      // Navigate to the login page\n\n      navigate('/login');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      class: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"sticky\",\n          top: \"0\",\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"15px\",\n            backgroundColor: \"#FFF\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-3\",\n              children: \"Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-6\",\n              children: /*#__PURE__*/_jsxDEV(Tabs, {\n                value: value,\n                onChange: handleChange,\n                \"aria-label\": \"basic tabs example\",\n                children: [/*#__PURE__*/_jsxDEV(Tab, {\n                  label: \"NewsFeed\",\n                  ...a11yProps(0)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 584,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                  label: \"Update/Edit\",\n                  ...a11yProps(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 585,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(Tab, {\n                  label: \"Create/Add New\",\n                  ...a11yProps(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 586,\n                  columnNumber: 11\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-3\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"15px\",\n            backgroundColor: \"#FFf\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-3\",\n              children: \"col\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-6\",\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  width: '100%'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    borderBottom: 1,\n                    borderColor: 'divider'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 7\n                }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n                  value: value,\n                  index: 0,\n                  children: blogs.sort((a, b) => b.id - a.id).map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                      children: blog.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 608,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: `http://localhost:8000${blog.image}`,\n                      style: {\n                        width: \"auto\",\n                        maxWidth: \"100%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 609,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: blog.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 611,\n                      columnNumber: 13\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Author: \", blog.authorName]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 612,\n                      columnNumber: 13\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Published Date: \", blog.created_at]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 613,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Updated Date: \", blog.updated_at]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 614,\n                      columnNumber: 13\n                    }, this), created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Blog Created at Standard: \", created_at]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 615,\n                      columnNumber: 28\n                    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 618,\n                      columnNumber: 13\n                    }, this)]\n                  }, blog.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 607,\n                    columnNumber: 8\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 7\n                }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n                  value: value,\n                  index: 1,\n                  children: [\"Update/Edit Blog\", /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: blogs.sort((a, b) => b.id - a.id).map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                        children: blog.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 631,\n                        columnNumber: 12\n                      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `http://localhost:8000${blog.image}`,\n                        style: {\n                          width: \"auto\",\n                          maxWidth: \"100%\"\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 632,\n                        columnNumber: 12\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: blog.content\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 634,\n                        columnNumber: 13\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Author: \", blog.authorName]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 635,\n                        columnNumber: 13\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Published Date: \", blog.created_at]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 636,\n                        columnNumber: 12\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Updated Date: \", blog.updated_at]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 637,\n                        columnNumber: 13\n                      }, this), created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Blog Created at Standard: \", created_at]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 638,\n                        columnNumber: 28\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"update\",\n                        onClick: () => setSelectedBlogId(blog.id),\n                        children: \"Edit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 639,\n                        columnNumber: 13\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"delete\",\n                        onClick: () => handleDelete(blog.id),\n                        children: \"Delete\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 640,\n                        columnNumber: 13\n                      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 641,\n                        columnNumber: 13\n                      }, this)]\n                    }, blog.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 630,\n                      columnNumber: 8\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 626,\n                    columnNumber: 8\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 623,\n                  columnNumber: 7\n                }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n                  value: value,\n                  index: 2,\n                  children: \"Create/Add New Blog\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 7\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"col-3\",\n              children: \"col\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 575,\n    columnNumber: 1\n  }, this);\n}\n_s(Blog, \"bU5Lvfgo/72KKYQ4U02rNTXrAEA=\", false, function () {\n  return [useNavigate];\n});\n_c2 = Blog;\nexport default Blog;\nvar _c, _c2;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Tabs","Tab","Box","Container","Button","Typography","Breadcrumbs","HomeIcon","WhatshotIcon","GrainIcon","SignUp","Link","useNavigate","Paper","Grid","styled","jsxDEV","_jsxDEV","Item","_ref","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","textAlign","color","text","secondary","TabPanel","props","children","value","index","other","role","hidden","id","sx","p","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","number","isRequired","a11yProps","Blog","_s","setValue","handleChange","event","newValue","loading","setLoading","newBlogTitle","setNewBlogTitle","newBlogContent","setNewBlogContent","newBlogAuthorName","setNewBlogAuthorName","blogs","setBlogs","selectedBlogId","setSelectedBlogId","updatedBlogTitle","setUpdatedBlogTitle","undefined","updatedBlogContent","setUpdatedBlogContent","updatedBlogAuthorName","setUpdatedBlogAuthorName","newBlogImage","setNewBlogImage","updatedBlogImage","setUpdatedBlogImage","imageUrl","setImageUrl","created_at","setCreatedAt","accessToken","localStorage","getItem","tokenParts","split","payload","JSON","parse","atob","expirationTime","exp","currentTime","Math","floor","Date","now","remainingTime","console","log","fetchBlogs","response","fetch","headers","Authorization","status","refreshResponse","method","body","stringify","refresh","ok","tokens","json","setItem","access","newResponse","data","Error","error","handleCreate","newBlog","title","content","authorName","image","formData","FormData","append","then","handleDelete","window","confirm","filter","blog","catch","handleUpdate","updatedBlog","find","findIndex","newBlogs","navigate","handleLogout","removeItem","class","maxWidth","style","position","top","width","onChange","label","borderBottom","borderColor","sort","a","b","map","src","updated_at","className","onClick","_c2","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/blogapp/blog.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport { Container } from \"@mui/material\";\n// import { Link } from \"react-router-dom\";\n// import Update from \"./update\";\n// import Create from \"./create\";\n// import Logout from \"./logout\";\n// import ImageUploader from \"./storeImagetemporarily\";\n// import Login from \"./login\";\n// import { useNavigate } from 'react-router-dom';\n\n// function Blog() {\n//     const [loading, setLoading] = useState(true);\n//     const [newBlogTitle, setNewBlogTitle] = useState(\"\");\n//     const [newBlogContent, setNewBlogContent] = useState(\"\");\n//     const [newBlogAuthorName, setNewBlogAuthorName] = useState(\"\");\n\n//     const [blogs, setBlogs] = useState([]);\n//     const [selectedBlogId, setSelectedBlogId] = useState(\"\");\n//     const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n//     const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n//     const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n//     const [newBlogImage, setNewBlogImage] = useState(null);\n//     const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n//     const [imageUrl, setImageUrl] = useState(null);\n\n//     const [created_at, setCreatedAt] = useState(\"\");\n//     const accessToken = localStorage.getItem(\"accessToken\");\n//     const tokenParts = accessToken.split(\".\");\n\n//     // Decode the access token payload\n//     const payload = JSON.parse(atob(tokenParts[1]));\n\n//     // Get the expiration time from the payload\n//     const expirationTime = payload.exp;\n\n//     // Calculate the remaining time in seconds until the token expires\n//     const currentTime = Math.floor(Date.now() / 1000);\n//     const remainingTime = expirationTime - currentTime;\n\n//     console.log(`The access token will expire in ${remainingTime} seconds.`);\n//     useEffect(() => {\n//         const fetchBlogs = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                     },\n//                 });\n\n//                 if (response.status === 401) {\n//                     console.log(\"token expired and expired time is\", remainingTime);\n\n//                     // Access token has expired, use refresh token to get a new access token\n//                     const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n//                         method: \"POST\",\n//                         headers: {\n//                             \"Content-Type\": \"application/json\",\n//                         },\n//                         body: JSON.stringify({\n//                             refresh: localStorage.getItem(\"refreshToken\"),\n//                         }),\n//                     });\n\n//                     if (refreshResponse.ok) {\n//                         const tokens = await refreshResponse.json();\n//                         localStorage.setItem(\"accessToken\", tokens.access);\n//                         // Try fetching blogs again with the new access token\n//                         const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//                             headers: {\n//                                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                             },\n//                         });\n//                         const data = await newResponse.json();\n//                         setBlogs(data);\n//                         setLoading(false);\n//                     } else {\n//                         throw new Error(\"Refresh token is invalid\");\n//                     }\n//                 } else {\n//                     const data = await response.json();\n//                     setBlogs(data);\n//                     setLoading(false);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchBlogs();\n//     }, []);\n\n//     const handleCreate = () => {\n//         const newBlog = {\n//             title: newBlogTitle,\n//             content: newBlogContent,\n//             authorName: newBlogAuthorName,\n//             image: newBlogImage, // Add the image file to the new blog object\n//         };\n\n//         const formData = new FormData();\n//         formData.append(\"title\", newBlog.title);\n//         formData.append(\"content\", newBlog.content);\n//         formData.append(\"authorName\", newBlog.authorName);\n//         if(newBlogImage != null){\n//             formData.append('image', newBlogImage);\n//         }\n\n//         fetch(\"http://localhost:8000/api/blog/create/\", {\n//             method: \"POST\",\n//             headers: {\n//                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             },\n//             body: formData, // Use the form data instead of JSON.stringify\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 setBlogs([...blogs, data]);\n//                 setNewBlogTitle(\"\");\n//                 setNewBlogContent(\"\");\n//                 setNewBlogAuthorName(\"\");\n//                 setNewBlogImage(null); // Reset the image state after submitting the form\n//             });\n//     };\n\n//     const handleDelete = (id) => {\n//         if (window.confirm(\"Are you sure you want to delete this post?\")) {\n//             fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n//                 method: \"DELETE\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//                 },\n//             })\n//                 .then((response) => {\n//                     if (response.ok) {\n//                         setBlogs(blogs.filter((blog) => blog.id !== id));\n//                     } else {\n//                         throw new Error(\"Delete failed\");\n//                     }\n//                 })\n//                 .catch((error) => {\n//                     console.error(error);\n//                 });\n//         }\n//     };\n\n//     const handleUpdate = () => {\n//         const updatedBlog = {\n//             id: selectedBlogId,\n//             title: updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle,\n//             content: updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent,\n//             authorName: updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName,\n//         };\n\n//         const formData = new FormData();\n//         formData.append(\"title\", updatedBlog.title);\n//         formData.append(\"content\", updatedBlog.content);\n//         formData.append(\"authorName\", updatedBlog.authorName);\n//         if(updatedBlogImage != null){\n//             formData.append('image', updatedBlogImage);\n//         }\n\n//         fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n//             method: \"PUT\",\n//             headers: {\n//                 Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//             },\n//             body: formData,\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 const index = blogs.findIndex((blog) => blog.id === data.id);\n//                 const newBlogs = [...blogs];\n//                 newBlogs[index] = data;\n//                 setBlogs(newBlogs);\n//                 setSelectedBlogId(\"\");\n//                 setUpdatedBlogTitle(undefined);\n//                 setUpdatedBlogContent(undefined);\n//                 setUpdatedBlogAuthorName(undefined);\n//                 setUpdatedBlogImage(null);\n//             })\n//             .catch((error) => console.error(error));\n//     };\n    \n//   const navigate = useNavigate();\n\n//   const  handleLogout = () => {\n//     if (window.confirm(\"Are you sure you want to logout?\")) {\n//     // Remove access token and refresh token from local storage\n//     localStorage.removeItem('accessToken');\n//     localStorage.removeItem('refreshToken');\n\n//     // Navigate to the login page\n  \n//     navigate('/login');\n//   } }\n\n//     if (loading) {\n//         return <span class=\"loader\"></span>\n//     }\n\n//     return (\n\n//         <div>\n\n\n//         <div style={{ display: \"flex\", justifyContent: \"space-around\" , flexWrap: \"wrap-reverse\" , width: \"100%\", padding: \"0 55px\", margin: \"0 35px\"}}>\n\n//         <div style={{ margin: \"0px\", width: \"50%\"}}>\n          \n            \n//             <div>\n\n\n\n//                 <h1>Blog List</h1>\n\n//                 {blogs\n//                     .sort((a, b) => b.id - a.id)\n//                     .map((blog) => (\n//                         <div key={blog.id}>\n//                             <h2>{blog.title}</h2>\n//                             <img src={`http://localhost:8000${blog.image}`} style={{ width: \"450px\", maxWidth: \"100%\" }} />\n\n//                             <p>{blog.content}</p>\n//                             <p>Author: {blog.authorName}</p>\n//                             <p>Published Date: {blog.created_at}</p>\n//                             <p>Updated Date: {blog.updated_at}</p>\n//                             {created_at && <p>Blog Created at Standard: {created_at}</p>}\n//                             <button className=\"update\" onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n//                             <button className=\"delete\" onClick={() => handleDelete(blog.id)}>Delete</button>\n//                         </div>\n//                     ))}\n//             </div>\n//         </div>\n\n//         <div style={{margin: \"0px\" ,width: \"50%\"}}> \n\n//         <button onClick={handleLogout}>Logout</button>\n//         <div style={{ position: \"fixed\"}}>\n//         <h2>Create New Blog</h2>\n//                     <label>\n//                         Title: </label><br></br>\n//                         <input type=\"text\" value={newBlogTitle} onChange={(event) => setNewBlogTitle(event.target.value)} />\n                   \n//                     <br />\n//                     <label>\n//                         Content: </label> <br></br>\n//                         <textarea value={newBlogContent} onChange={(event) => setNewBlogContent(event.target.value)} />\n                   \n//                     <br />\n//                     <label>\n//                         Author Name:    </label>  <br></br>\n//                         <input type=\"text\" value={newBlogAuthorName} onChange={(event) => setNewBlogAuthorName(event.target.value)} />\n                 \n\n//                     <div>\n//                         <label htmlFor=\"newBlogImage\">Image:</label> \n//                         <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"newBlogImage\" name=\"newBlogImage\" onChange={(event) => setNewBlogImage(event.target.files[0])} />\n//                     </div>\n//                     <button  className=\"create\" onClick={handleCreate}>Create Blog</button>\n\n\n//                                     {/* <UpdateBlog/> */}\n//                 {selectedBlogId !== \"\" && (\n//                     <div style={{ width: \"auto\"}}>\n//                         <h2>Update Blog \"{blogs.find((blog) => blog.id === selectedBlogId).title}\"</h2>\n\n//                         <div>\n//                             <label htmlFor=\"blog-title\">Title:</label> <br></br>\n//                             <input type=\"text\" id=\"blog-title\" value={updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle} onChange={(e) => setUpdatedBlogTitle(e.target.value)} />\n//                         </div>\n\n//                         <div>\n//                             <label htmlFor=\"blog-content\">Content:</label> <br></br>\n//                             <textarea id=\"blog-content\" value={updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent} onChange={(e) => setUpdatedBlogContent(e.target.value)} />\n//                         </div>\n\n//                         <div>\n//                             <label htmlFor=\"blog-author-name\">Author Name:</label> <br></br>\n//                             <input\n//                                 type=\"text\"\n//                                 id=\"blog-author-name\"\n//                                 value={updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName}\n//                                 onChange={(e) => setUpdatedBlogAuthorName(e.target.value)}\n//                             />\n//                         </div>\n\n//                         <div>\n//                             <label htmlFor=\"updatedBlogImage\">Image:</label>\n//                             <img src={`http://localhost:8000${blogs.find((blog) => blog.id === selectedBlogId).image}`} style={{ width: \"50px\", maxWidth: \"100%\" }} />\n//                             <input style={{backgroundColor: \"transparent\"}} type=\"file\" id=\"updatedBlogImage\" name=\"updatedBlogImage\" onChange={(event) => setUpdatedBlogImage(event.target.files[0])} />\n//                         </div>\n                    \n\n//                         <button className=\"update\"  onClick={handleUpdate}>Update Blog</button>\n//                         <button className=\"cancel\" onClick={() => setSelectedBlogId(\"\")}>Cancel</button>\n//                     </div>\n//                 )}\n\n               \n//         </div>\n        \n//         </div>\n//         </div>\n//         </div>\n//     );\n// }\n// export default Blog;\n\n\nimport { Button } from 'react-bootstrap';\nimport Typography from '@mui/material/Typography';\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\n// import Link from '@mui/material/Link';\nimport HomeIcon from '@mui/icons-material/Home';\nimport WhatshotIcon from '@mui/icons-material/Whatshot';\nimport GrainIcon from '@mui/icons-material/Grain';\nimport SignUp from './signup';\nimport {Link, useNavigate} from \"react-router-dom\";\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { styled } from '@mui/material/styles';\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n}));\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \nreturn (\n  <div\n    role=\"tabpanel\"\n    hidden={value !== index}\n    id={`simple-tabpanel-${index}`}\n    aria-labelledby={`simple-tab-${index}`}\n    {...other}\n  >\n    {value === index && (\n      <Box sx={{ p: 3 }}>\n        <Typography>{children}</Typography>\n      </Box>\n    )}\n  </div>\n);\n}\n\nTabPanel.propTypes = {\nchildren: PropTypes.node,\nindex: PropTypes.number.isRequired,\nvalue: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index) {\nreturn {\n  id: `simple-tab-${index}`,\n  'aria-controls': `simple-tabpanel-${index}`,\n};\n}\n\nfunction Blog() {\nconst [value, setValue] = React.useState(0);\n\nconst handleChange = (event, newValue) => {\n  setValue(newValue);\n};\n\n    const [loading, setLoading] = useState(true);\n    const [newBlogTitle, setNewBlogTitle] = useState(\"\");\n    const [newBlogContent, setNewBlogContent] = useState(\"\");\n    const [newBlogAuthorName, setNewBlogAuthorName] = useState(\"\");\n\n    const [blogs, setBlogs] = useState([]);\n    const [selectedBlogId, setSelectedBlogId] = useState(\"\");\n    const [updatedBlogTitle, setUpdatedBlogTitle] = useState(undefined);\n    const [updatedBlogContent, setUpdatedBlogContent] = useState(undefined);\n    const [updatedBlogAuthorName, setUpdatedBlogAuthorName] = useState(undefined);\n\n    const [newBlogImage, setNewBlogImage] = useState(null);\n    const [updatedBlogImage, setUpdatedBlogImage] = useState(null);\n\n    const [imageUrl, setImageUrl] = useState(null);\n\n    const [created_at, setCreatedAt] = useState(\"\");\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const tokenParts = accessToken.split(\".\");\n\n    // Decode the access token payload\n    const payload = JSON.parse(atob(tokenParts[1]));\n\n    // Get the expiration time from the payload\n    const expirationTime = payload.exp;\n\n    // Calculate the remaining time in seconds until the token expires\n    const currentTime = Math.floor(Date.now() / 1000);\n    const remainingTime = expirationTime - currentTime;\n\n    console.log(`The access token will expire in ${remainingTime} seconds.`);\n    useEffect(() => {\n        const fetchBlogs = async () => {\n            try {\n                const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n                    headers: {\n                        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n                    },\n                });\n\n                if (response.status === 401) {\n                    console.log(\"token expired and expired time is\", remainingTime);\n\n                    // Access token has expired, use refresh token to get a new access token\n                    const refreshResponse = await fetch(\"http://localhost:8000/api/refresh/\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({\n                            refresh: localStorage.getItem(\"refreshToken\"),\n                        }),\n                    });\n\n                    if (refreshResponse.ok) {\n                        const tokens = await refreshResponse.json();\n                        localStorage.setItem(\"accessToken\", tokens.access);\n                        // Try fetching blogs again with the new access token\n                        const newResponse = await fetch(\"http://localhost:8000/api/blog/list/\", {\n                            headers: {\n                                Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n                            },\n                        });\n                        const data = await newResponse.json();\n                        setBlogs(data);\n                        console.log(data);\n                        setLoading(false);\n                    } else {\n                        throw new Error(\"Refresh token is invalid\");\n                    }\n                } else {\n                    const data = await response.json();\n                    setBlogs(data);\n                    setLoading(false);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        fetchBlogs();\n    }, []);\n\n    const handleCreate = () => {\n        const newBlog = {\n            title: newBlogTitle,\n            content: newBlogContent,\n            authorName: newBlogAuthorName,\n            image: newBlogImage, // Add the image file to the new blog object\n        };\n\n        const formData = new FormData();\n        formData.append(\"title\", newBlog.title);\n        formData.append(\"content\", newBlog.content);\n        formData.append(\"authorName\", newBlog.authorName);\n        if(newBlogImage != null){\n            formData.append('image', newBlogImage);\n        }\n\n        fetch(\"http://localhost:8000/api/blog/create/\", {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n            },\n            body: formData, // Use the form data instead of JSON.stringify\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                setBlogs([...blogs, data]);\n                setNewBlogTitle(\"\");\n                setNewBlogContent(\"\");\n                setNewBlogAuthorName(\"\");\n                setNewBlogImage(null); // Reset the image state after submitting the form\n            });\n    };\n\n    const handleDelete = (id) => {\n        if (window.confirm(\"Are you sure you want to delete this post?\")) {\n            fetch(`http://localhost:8000/api/blog/delete/${id}/`, {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n                },\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        setBlogs(blogs.filter((blog) => blog.id !== id));\n                    } else {\n                        throw new Error(\"Delete failed\");\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        }\n    };\n\n    const handleUpdate = () => {\n        const updatedBlog = {\n            id: selectedBlogId,\n            title: updatedBlogTitle === undefined ? blogs.find((blog) => blog.id === selectedBlogId).title : updatedBlogTitle,\n            content: updatedBlogContent === undefined ? blogs.find((blog) => blog.id === selectedBlogId).content : updatedBlogContent,\n            authorName: updatedBlogAuthorName === undefined ? blogs.find((blog) => blog.id === selectedBlogId).authorName : updatedBlogAuthorName,\n        };\n\n        const formData = new FormData();\n        formData.append(\"title\", updatedBlog.title);\n        formData.append(\"content\", updatedBlog.content);\n        formData.append(\"authorName\", updatedBlog.authorName);\n        if(updatedBlogImage != null){\n            formData.append('image', updatedBlogImage);\n        }\n\n        fetch(`http://localhost:8000/api/blog/update/${updatedBlog.id}/`, {\n            method: \"PUT\",\n            headers: {\n                Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n            },\n            body: formData,\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                const index = blogs.findIndex((blog) => blog.id === data.id);\n                const newBlogs = [...blogs];\n                newBlogs[index] = data;\n                \n                setBlogs(newBlogs);\n                setSelectedBlogId(\"\");\n                setUpdatedBlogTitle(undefined);\n                setUpdatedBlogContent(undefined);\n                setUpdatedBlogAuthorName(undefined);\n                setUpdatedBlogImage(null);\n            })\n            .catch((error) => console.error(error));\n    };\n    \n  const navigate = useNavigate();\n\n  const  handleLogout = () => {\n    if (window.confirm(\"Are you sure you want to logout?\")) {\n    // Remove access token and refresh token from local storage\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n\n    // Navigate to the login page\n  \n    navigate('/login');\n  } }\n\n    if (loading) {\n        return <span class=\"loader\"></span>\n    }\n\n    \n\n    return(\n<div>\n\n<Container maxWidth=\"\" >\n<div  style={{ position: \"sticky\", top: \"0\", width: \"100%\"}}>\n        <div style={{ padding: \"15px\", backgroundColor: \"#FFF\"}}>\n            <div class=\"row\">\n                <div class=\"col-3\">Profile</div>\n                <div class=\"col-6\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n          <Tab label=\"NewsFeed\" {...a11yProps(0)} />\n          <Tab label=\"Update/Edit\" {...a11yProps(1)} />\n          <Tab label=\"Create/Add New\" {...a11yProps(2)} />\n        </Tabs>\n                </div>\n                <div class=\"col-3\">Search</div>\n            </div>\n            </div>\n           \n            </div>\n\n <div  style={{ width: \"100%\"}}>\n        <div style={{ padding: \"15px\", backgroundColor: \"#FFf\"}}>\n        <div class=\"row\">\n                <div class=\"col-3\">col</div>\n                <div class=\"col-6\">\n\n                <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}></Box>\n      <TabPanel value={value} index={0}>\n{blogs\n    .sort((a, b) => b.id - a.id)\n   .map((blog) => (\n       <div key={blog.id}>\n           <h2>{blog.title}</h2>\n           <img src={`http://localhost:8000${blog.image}`} style={{ width: \"auto\", maxWidth: \"100%\" }} />\n\n            <p>{blog.content}</p>\n            <p>Author: {blog.authorName}</p>\n           <p>Published Date: {blog.created_at}</p>\n            <p>Updated Date: {blog.updated_at}</p>\n            {created_at && <p>Blog Created at Standard: {created_at}</p>}\n            {/* <button className=\"update\" onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n            <button className=\"delete\" onClick={() => handleDelete(blog.id)}>Delete</button> */}\n            <hr></hr>\n        </div>\n       \n    ))} \n      </TabPanel>\n      <TabPanel value={value} index={1}>\n       Update/Edit Blog\n\n       <div>\n       {blogs\n    .sort((a, b) => b.id - a.id)\n   .map((blog) => (\n       <div key={blog.id}>\n           <h2>{blog.title}</h2>\n           <img src={`http://localhost:8000${blog.image}`} style={{ width: \"auto\", maxWidth: \"100%\" }} />\n\n            <p>{blog.content}</p>\n            <p>Author: {blog.authorName}</p>\n           <p>Published Date: {blog.created_at}</p>\n            <p>Updated Date: {blog.updated_at}</p>\n            {created_at && <p>Blog Created at Standard: {created_at}</p>}\n            <button className=\"update\" onClick={() => setSelectedBlogId(blog.id)}>Edit</button>\n            <button className=\"delete\" onClick={() => handleDelete(blog.id)}>Delete</button>\n            <hr></hr>\n        </div>\n       \n    ))} \n       </div>\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n      Create/Add New Blog\n      </TabPanel>\n    </Box>\n\n                </div>\n                <div class=\"col-3\">col</div>\n            </div>\n            </div>\n           \n            </div>\n            </Container>\n</div>\n\n)}\n\nexport default Blog;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}