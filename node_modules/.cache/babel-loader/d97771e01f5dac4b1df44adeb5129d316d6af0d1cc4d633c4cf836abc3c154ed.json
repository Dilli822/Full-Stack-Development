{"ast":null,"code":"var _jsxFileName = \"/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [countLikes, setCountLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setCountLikes(blogsWithLiked);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n\n//   const handleLikeClick = (blogId) => {\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[index] };\n\n//     if (blogToUpdate.liked) {\n//       // If the blog post is already liked, decrease the like count by 1\n//       blogToUpdate.likes--;\n//     } else {\n//       // If the blog post is not liked, increase the like count by 1\n//       blogToUpdate.likes++;\n//     }\n\n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n\n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[index] = blogToUpdate;\n//     setBlogs(newBlogs);\n\n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         liked: blogToUpdate.liked,\n//         likes: blogToUpdate.likes,\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Likes() {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(0);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n          }\n        });\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map(blog => ({\n          ...blog,\n          liked: false\n        }));\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  const handleLikeClick = blogId => {\n    const index = blogs.findIndex(blog => blog.id === blogId);\n    const blogToUpdate = {\n      ...blogs[index]\n    };\n\n    // Check if user has already liked this post\n    if (blogToUpdate.liked_by.includes(currentUser.id)) {\n      return;\n    }\n    if (blogToUpdate.liked) {\n      // If the blog post is already liked, decrease the like count by 1\n      blogToUpdate.likes--;\n      // Remove user ID from liked_by array\n      blogToUpdate.liked_by = blogToUpdate.liked_by.filter(id => id !== currentUser.id);\n    } else {\n      // If the blog post is not liked, increase the like count by 1\n      blogToUpdate.likes++;\n      // Add user ID to liked_by array\n      blogToUpdate.liked_by.push(currentUser.id);\n    }\n\n    // Toggle the liked state for the blog post\n    blogToUpdate.liked = !blogToUpdate.liked;\n\n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[index] = blogToUpdate;\n    setBlogs(newBlogs);\n\n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        liked: blogToUpdate.liked,\n        likes: blogToUpdate.likes,\n        liked_by: blogToUpdate.liked_by\n      })\n    }).then(response => response.json()).then(data => console.log(data)).catch(error => {\n      console.error(error);\n      setError(\"Failed to update like state.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blogs\",\n      children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Author: \", blog.author.first_name, \" \", blog.author.last_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Likes: \", blog.likes]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: () => handleLikeClick(blog.id),\n          children: /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n            color: blog.liked ? \"error\" : \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, blog.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n_s(Likes, \"NQ4ilqbeM9JYepazybH3BHCmUGs=\");\n_c = Likes;\nvar _c;\n$RefreshReg$(_c, \"Likes\");","map":{"version":3,"names":["useState","useEffect","IconButton","FavoriteIcon","ShareIcon","jsxDEV","_jsxDEV","Likes","_s","blogs","setBlogs","error","setError","countLikes","setCountLikes","fetchBlogs","response","fetch","headers","Authorization","localStorage","getItem","data","json","blogsWithLiked","map","blog","liked","console","handleLikeClick","blogId","index","findIndex","id","blogToUpdate","liked_by","includes","currentUser","likes","filter","push","newBlogs","method","body","JSON","stringify","then","log","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","content","author","first_name","last_name","onClick","color","_c","$RefreshReg$"],"sources":["/Users/dillirai/Downloads/Full-Stack-Development/Practice Full Stack dev /Practice/drf-blog-api-master/django/frontend/src/components/likes/blog_Likes.js"],"sourcesContent":["\nimport { useState, useEffect } from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\n\n// export default function Likes() {\n//   const [blogs, setBlogs] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [countLikes, setCountLikes] = useState(0);\n\n//   useEffect(() => {\n//     const fetchBlogs = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//           },\n//         });\n\n//         const data = await response.json();\n\n//         // Initialize liked state for each blog post\n//         const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n//         setBlogs(blogsWithLiked);\n//         setCountLikes(blogsWithLiked);\n//       } catch (error) {\n//         console.error(error);\n//         setError(\"Failed to fetch blog posts.\");\n//       }\n//     };\n\n//     fetchBlogs();\n//   }, []);\n  \n//   const handleLikeClick = (blogId) => {\n//     const index = blogs.findIndex((blog) => blog.id === blogId);\n//     const blogToUpdate = { ...blogs[index] };\n  \n//     if (blogToUpdate.liked) {\n//       // If the blog post is already liked, decrease the like count by 1\n//       blogToUpdate.likes--;\n//     } else {\n//       // If the blog post is not liked, increase the like count by 1\n//       blogToUpdate.likes++;\n//     }\n  \n//     // Toggle the liked state for the blog post\n//     blogToUpdate.liked = !blogToUpdate.liked;\n  \n//     // Update the state with the new liked state and like count\n//     const newBlogs = [...blogs];\n//     newBlogs[index] = blogToUpdate;\n//     setBlogs(newBlogs);\n  \n//     // Update the API with the new liked state and like count\n//     fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n//       method: \"PUT\",\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         liked: blogToUpdate.liked,\n//         likes: blogToUpdate.likes,\n//       }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => console.log(data))\n//       .catch((error) => {\n//         console.error(error);\n//         setError(\"Failed to update like state.\");\n//       });\n//   };\nexport default function Likes() {\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  const [countLikes, setCountLikes] = useState(0);\n\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/api/blog/list/\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n          },\n        });\n\n        const data = await response.json();\n\n        // Initialize liked state for each blog post\n        const blogsWithLiked = data.map((blog) => ({ ...blog, liked: false }));\n\n        setBlogs(blogsWithLiked);\n        setCountLikes(blogsWithLiked);\n      } catch (error) {\n        console.error(error);\n        setError(\"Failed to fetch blog posts.\");\n      }\n    };\n\n    fetchBlogs();\n  }, []);\n  \n  const handleLikeClick = (blogId) => {\n    const index = blogs.findIndex((blog) => blog.id === blogId);\n    const blogToUpdate = { ...blogs[index] };\n  \n    // Check if user has already liked this post\n    if (blogToUpdate.liked_by.includes(currentUser.id)) {\n      return;\n    }\n  \n    if (blogToUpdate.liked) {\n      // If the blog post is already liked, decrease the like count by 1\n      blogToUpdate.likes--;\n      // Remove user ID from liked_by array\n      blogToUpdate.liked_by = blogToUpdate.liked_by.filter(id => id !== currentUser.id);\n    } else {\n      // If the blog post is not liked, increase the like count by 1\n      blogToUpdate.likes++;\n      // Add user ID to liked_by array\n      blogToUpdate.liked_by.push(currentUser.id);\n    }\n  \n    // Toggle the liked state for the blog post\n    blogToUpdate.liked = !blogToUpdate.liked;\n  \n    // Update the state with the new liked state and like count\n    const newBlogs = [...blogs];\n    newBlogs[index] = blogToUpdate;\n    setBlogs(newBlogs);\n  \n    // Update the API with the new liked state and like count\n    fetch(`http://localhost:8000/api/blog/likes/update/${blogId}/`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        liked: blogToUpdate.liked,\n        likes: blogToUpdate.likes,\n        liked_by: blogToUpdate.liked_by,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(data))\n      .catch((error) => {\n        console.error(error);\n        setError(\"Failed to update like state.\");\n      });\n  };\n  \n  return (\n    <div>\n      {error && <p>{error}</p>}\n      <h2>Blogs</h2>\n      <div className=\"blogs\">\n        {blogs.map((blog) => (\n          <div key={blog.id}>\n            <h3>{blog.title}</h3>\n            <p>{blog.content}</p>\n            <p>\n              Author: {blog.author.first_name} {blog.author.last_name}\n            </p>\n            <p>Likes: {blog.likes}</p>\n            <IconButton onClick={() => handleLikeClick(blog.id)}>\n              <FavoriteIcon color={blog.liked ? \"error\" : \"primary\"} />\n            </IconButton>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}